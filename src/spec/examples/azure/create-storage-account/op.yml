name: create-storage-account
description: creates a storage account if it doesn't already exist
inputs:
  subscriptionId:
    string:
      constraints: { minLength: 1}
  username:
    string:
      constraints: { format: email }
  location:
    string:
      constraints: { enum: [ westus, centralus, eastus ] }
      default: westus
  password:
    string:
      constraints: { minLength: 1 }
      isSecret: true
  resourceGroupName:
    string:
      constraints: { minLength: 1 }
  storageAccountName:
    string:
      constraints: { minLength: 4, maxLength: 23, pattern: '^[a-z0-9]*$' }
  storageAccountKind:
    string:
      constraints: { enum: [ Storage, Blob ] }
      default: Storage
  storageAccountSkuName:
    string:
      constraints: { enum: [ LRS, ZRS, GRS, RAGRS, PLRS ] }
      default: RAGRS
outputs:
  storageAccessKey:
    string:
      constraints: { minLength: 1 }
      isSecret: true
run:
  serial:
    - op: 
        ref: create-resource-group
        inputs: { subscriptionId, username, password, location, resourceGroupName }
    - container:
        image: { ref: microsoft/azure-cli }
        cmd: [ /cmd.sh ]
        envVars:
          SUBSCRIPTION_ID: $(subscriptionId)
          USERNAME: $(username)
          PASSWORD: $(password)
          LOCATION: $(location)
          RESOURCE_GROUP_NAME: $(resourceGroupName)
          STORAGE_ACCOUNT_NAME: $(storageAccountName)
          STORAGE_ACCOUNT_KIND: $(storageAccountKind)
          STORAGE_ACCOUNT_SKU_NAME: $(storageAccountSkuName)
        files: { /cmd.sh }
        stdOut:
          storageAccessKey=: storageAccessKey

