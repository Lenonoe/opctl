description: tests code coverage
name: test-coverage
inputs:
  srcDir:
    dir:
      description: directory containing the projects source code
outputs:
  coverageTxtFile:
    file:
      description: aggregate of all test coverage metrics
run:
  container:
    cmd:
      - bash
      - -ce
      - |
        echo "generating aggregate coverage profile"
        find . -name '*.coverprofile' | xargs cat > raw_coverage.txt

        echo "stripping fakes"
        sed '/fake/d' raw_coverage.txt > coverage.txt

        echo "determining aggregate coverage metrics"
        declare -i total_statements total_hits line_statements line_hits
        # lines in form: "location statement_count hit_count"
        while read -r line; do
          # ignore mode lines
          if [[ $line != mode* ]] ;
          then
            IFS=' ' read -ra line_parts <<< "$line"
            line_statements=${line_parts[1]}
            line_hits=${line_parts[2]}

            # increment statements
            total_statements=$total_statements+$line_statements

            if [[ $line_statements -gt $line_hits ]] ;
            then
              total_hits=$total_hits+$line_hits
            else
              total_hits=$total_hits+$line_statements
            fi
          fi
        done < coverage.txt

        echo "determining coverage %"
        coverage=$(($total_hits*100 / $total_statements))
        echo "Coverage info => Actual: $coverage%, Expected: >= $MINIMUM_COVERAGE%"

        echo "enforcing MINIMUM_COVERAGE..."
        if [[ $coverage -lt $MINIMUM_COVERAGE ]] ;
        then
          echo "Insufficient test coverage!" 1>&2
          exit 1
        else
          echo "Coverage ok"
        fi
    dirs:
      /go/src/github.com/opspec-io/opctl: { bind: srcDir }
    envVars:
      MINIMUM_COVERAGE: 63
    files:
      /go/src/github.com/opspec-io/opctl/coverage.txt: { bind: coverageTxtFile }
    image: golang:1.8
    workDir: /go/src/github.com/opspec-io/opctl
