// Code generated by counterfeiter. DO NOT EDIT.
package dereferencer

import (
	"sync"

	"github.com/opspec-io/sdk-golang/model"
)

type fakePkgFileDeReferencer struct {
	DeReferencePkgFileStub        func(ref string, scope map[string]*model.Value, pkgHandle model.PkgHandle) (string, bool, error)
	deReferencePkgFileMutex       sync.RWMutex
	deReferencePkgFileArgsForCall []struct {
		ref       string
		scope     map[string]*model.Value
		pkgHandle model.PkgHandle
	}
	deReferencePkgFileReturns struct {
		result1 string
		result2 bool
		result3 error
	}
	deReferencePkgFileReturnsOnCall map[int]struct {
		result1 string
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakePkgFileDeReferencer) DeReferencePkgFile(ref string, scope map[string]*model.Value, pkgHandle model.PkgHandle) (string, bool, error) {
	fake.deReferencePkgFileMutex.Lock()
	ret, specificReturn := fake.deReferencePkgFileReturnsOnCall[len(fake.deReferencePkgFileArgsForCall)]
	fake.deReferencePkgFileArgsForCall = append(fake.deReferencePkgFileArgsForCall, struct {
		ref       string
		scope     map[string]*model.Value
		pkgHandle model.PkgHandle
	}{ref, scope, pkgHandle})
	fake.recordInvocation("DeReferencePkgFile", []interface{}{ref, scope, pkgHandle})
	fake.deReferencePkgFileMutex.Unlock()
	if fake.DeReferencePkgFileStub != nil {
		return fake.DeReferencePkgFileStub(ref, scope, pkgHandle)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.deReferencePkgFileReturns.result1, fake.deReferencePkgFileReturns.result2, fake.deReferencePkgFileReturns.result3
}

func (fake *fakePkgFileDeReferencer) DeReferencePkgFileCallCount() int {
	fake.deReferencePkgFileMutex.RLock()
	defer fake.deReferencePkgFileMutex.RUnlock()
	return len(fake.deReferencePkgFileArgsForCall)
}

func (fake *fakePkgFileDeReferencer) DeReferencePkgFileArgsForCall(i int) (string, map[string]*model.Value, model.PkgHandle) {
	fake.deReferencePkgFileMutex.RLock()
	defer fake.deReferencePkgFileMutex.RUnlock()
	return fake.deReferencePkgFileArgsForCall[i].ref, fake.deReferencePkgFileArgsForCall[i].scope, fake.deReferencePkgFileArgsForCall[i].pkgHandle
}

func (fake *fakePkgFileDeReferencer) DeReferencePkgFileReturns(result1 string, result2 bool, result3 error) {
	fake.DeReferencePkgFileStub = nil
	fake.deReferencePkgFileReturns = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *fakePkgFileDeReferencer) DeReferencePkgFileReturnsOnCall(i int, result1 string, result2 bool, result3 error) {
	fake.DeReferencePkgFileStub = nil
	if fake.deReferencePkgFileReturnsOnCall == nil {
		fake.deReferencePkgFileReturnsOnCall = make(map[int]struct {
			result1 string
			result2 bool
			result3 error
		})
	}
	fake.deReferencePkgFileReturnsOnCall[i] = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *fakePkgFileDeReferencer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deReferencePkgFileMutex.RLock()
	defer fake.deReferencePkgFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakePkgFileDeReferencer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
