// This file was generated by counterfeiter
package interpolate

import (
	"sync"
)

type fakeStringInterpolater struct {
	InterpolateStub        func(s string, varName string, varValue string) string
	interpolateMutex       sync.RWMutex
	interpolateArgsForCall []struct {
		s        string
		varName  string
		varValue string
	}
	interpolateReturns struct {
		result1 string
	}
	interpolateReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeStringInterpolater) Interpolate(s string, varName string, varValue string) string {
	fake.interpolateMutex.Lock()
	ret, specificReturn := fake.interpolateReturnsOnCall[len(fake.interpolateArgsForCall)]
	fake.interpolateArgsForCall = append(fake.interpolateArgsForCall, struct {
		s        string
		varName  string
		varValue string
	}{s, varName, varValue})
	fake.recordInvocation("Interpolate", []interface{}{s, varName, varValue})
	fake.interpolateMutex.Unlock()
	if fake.InterpolateStub != nil {
		return fake.InterpolateStub(s, varName, varValue)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.interpolateReturns.result1
}

func (fake *fakeStringInterpolater) InterpolateCallCount() int {
	fake.interpolateMutex.RLock()
	defer fake.interpolateMutex.RUnlock()
	return len(fake.interpolateArgsForCall)
}

func (fake *fakeStringInterpolater) InterpolateArgsForCall(i int) (string, string, string) {
	fake.interpolateMutex.RLock()
	defer fake.interpolateMutex.RUnlock()
	return fake.interpolateArgsForCall[i].s, fake.interpolateArgsForCall[i].varName, fake.interpolateArgsForCall[i].varValue
}

func (fake *fakeStringInterpolater) InterpolateReturns(result1 string) {
	fake.InterpolateStub = nil
	fake.interpolateReturns = struct {
		result1 string
	}{result1}
}

func (fake *fakeStringInterpolater) InterpolateReturnsOnCall(i int, result1 string) {
	fake.InterpolateStub = nil
	if fake.interpolateReturnsOnCall == nil {
		fake.interpolateReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.interpolateReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *fakeStringInterpolater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.interpolateMutex.RLock()
	defer fake.interpolateMutex.RUnlock()
	return fake.invocations
}

func (fake *fakeStringInterpolater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
