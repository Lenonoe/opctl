// This file was generated by counterfeiter
package interpolate

import (
	"sync"

	"github.com/opspec-io/sdk-golang/model"
)

type Fake struct {
	InterpolateStub        func(template string, scope map[string]*model.Data) string
	interpolateMutex       sync.RWMutex
	interpolateArgsForCall []struct {
		template string
		scope    map[string]*model.Data
	}
	interpolateReturns struct {
		result1 string
	}
	interpolateReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Interpolate(template string, scope map[string]*model.Data) string {
	fake.interpolateMutex.Lock()
	ret, specificReturn := fake.interpolateReturnsOnCall[len(fake.interpolateArgsForCall)]
	fake.interpolateArgsForCall = append(fake.interpolateArgsForCall, struct {
		template string
		scope    map[string]*model.Data
	}{template, scope})
	fake.recordInvocation("Interpolate", []interface{}{template, scope})
	fake.interpolateMutex.Unlock()
	if fake.InterpolateStub != nil {
		return fake.InterpolateStub(template, scope)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.interpolateReturns.result1
}

func (fake *Fake) InterpolateCallCount() int {
	fake.interpolateMutex.RLock()
	defer fake.interpolateMutex.RUnlock()
	return len(fake.interpolateArgsForCall)
}

func (fake *Fake) InterpolateArgsForCall(i int) (string, map[string]*model.Data) {
	fake.interpolateMutex.RLock()
	defer fake.interpolateMutex.RUnlock()
	return fake.interpolateArgsForCall[i].template, fake.interpolateArgsForCall[i].scope
}

func (fake *Fake) InterpolateReturns(result1 string) {
	fake.InterpolateStub = nil
	fake.interpolateReturns = struct {
		result1 string
	}{result1}
}

func (fake *Fake) InterpolateReturnsOnCall(i int, result1 string) {
	fake.InterpolateStub = nil
	if fake.interpolateReturnsOnCall == nil {
		fake.interpolateReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.interpolateReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.interpolateMutex.RLock()
	defer fake.interpolateMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Interpolate = new(Fake)
