// Code generated by counterfeiter. DO NOT EDIT.
package core

import (
	"sync"

	"github.com/opspec-io/sdk-golang/model"
)

type fakeCaller struct {
	CallStub        func(id string, scope map[string]*model.Value, scg *model.SCG, opDirHandle model.DataHandle, rootOpId string) error
	callMutex       sync.RWMutex
	callArgsForCall []struct {
		id          string
		scope       map[string]*model.Value
		scg         *model.SCG
		opDirHandle model.DataHandle
		rootOpId    string
	}
	callReturns struct {
		result1 error
	}
	callReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeCaller) Call(id string, scope map[string]*model.Value, scg *model.SCG, opDirHandle model.DataHandle, rootOpId string) error {
	fake.callMutex.Lock()
	ret, specificReturn := fake.callReturnsOnCall[len(fake.callArgsForCall)]
	fake.callArgsForCall = append(fake.callArgsForCall, struct {
		id          string
		scope       map[string]*model.Value
		scg         *model.SCG
		opDirHandle model.DataHandle
		rootOpId    string
	}{id, scope, scg, opDirHandle, rootOpId})
	fake.recordInvocation("Call", []interface{}{id, scope, scg, opDirHandle, rootOpId})
	fake.callMutex.Unlock()
	if fake.CallStub != nil {
		return fake.CallStub(id, scope, scg, opDirHandle, rootOpId)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.callReturns.result1
}

func (fake *fakeCaller) CallCallCount() int {
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	return len(fake.callArgsForCall)
}

func (fake *fakeCaller) CallArgsForCall(i int) (string, map[string]*model.Value, *model.SCG, model.DataHandle, string) {
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	return fake.callArgsForCall[i].id, fake.callArgsForCall[i].scope, fake.callArgsForCall[i].scg, fake.callArgsForCall[i].opDirHandle, fake.callArgsForCall[i].rootOpId
}

func (fake *fakeCaller) CallReturns(result1 error) {
	fake.CallStub = nil
	fake.callReturns = struct {
		result1 error
	}{result1}
}

func (fake *fakeCaller) CallReturnsOnCall(i int, result1 error) {
	fake.CallStub = nil
	if fake.callReturnsOnCall == nil {
		fake.callReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.callReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *fakeCaller) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeCaller) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
