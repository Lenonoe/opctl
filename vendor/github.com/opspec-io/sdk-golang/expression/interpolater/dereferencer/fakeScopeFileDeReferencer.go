// Code generated by counterfeiter. DO NOT EDIT.
package dereferencer

import (
	"sync"

	"github.com/opspec-io/sdk-golang/model"
)

type fakeScopeFileDeReferencer struct {
	DeReferenceScopeFileStub        func(ref string, scope map[string]*model.Value) (string, bool, error)
	deReferenceScopeFileMutex       sync.RWMutex
	deReferenceScopeFileArgsForCall []struct {
		ref   string
		scope map[string]*model.Value
	}
	deReferenceScopeFileReturns struct {
		result1 string
		result2 bool
		result3 error
	}
	deReferenceScopeFileReturnsOnCall map[int]struct {
		result1 string
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeScopeFileDeReferencer) DeReferenceScopeFile(ref string, scope map[string]*model.Value) (string, bool, error) {
	fake.deReferenceScopeFileMutex.Lock()
	ret, specificReturn := fake.deReferenceScopeFileReturnsOnCall[len(fake.deReferenceScopeFileArgsForCall)]
	fake.deReferenceScopeFileArgsForCall = append(fake.deReferenceScopeFileArgsForCall, struct {
		ref   string
		scope map[string]*model.Value
	}{ref, scope})
	fake.recordInvocation("DeReferenceScopeFile", []interface{}{ref, scope})
	fake.deReferenceScopeFileMutex.Unlock()
	if fake.DeReferenceScopeFileStub != nil {
		return fake.DeReferenceScopeFileStub(ref, scope)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.deReferenceScopeFileReturns.result1, fake.deReferenceScopeFileReturns.result2, fake.deReferenceScopeFileReturns.result3
}

func (fake *fakeScopeFileDeReferencer) DeReferenceScopeFileCallCount() int {
	fake.deReferenceScopeFileMutex.RLock()
	defer fake.deReferenceScopeFileMutex.RUnlock()
	return len(fake.deReferenceScopeFileArgsForCall)
}

func (fake *fakeScopeFileDeReferencer) DeReferenceScopeFileArgsForCall(i int) (string, map[string]*model.Value) {
	fake.deReferenceScopeFileMutex.RLock()
	defer fake.deReferenceScopeFileMutex.RUnlock()
	return fake.deReferenceScopeFileArgsForCall[i].ref, fake.deReferenceScopeFileArgsForCall[i].scope
}

func (fake *fakeScopeFileDeReferencer) DeReferenceScopeFileReturns(result1 string, result2 bool, result3 error) {
	fake.DeReferenceScopeFileStub = nil
	fake.deReferenceScopeFileReturns = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *fakeScopeFileDeReferencer) DeReferenceScopeFileReturnsOnCall(i int, result1 string, result2 bool, result3 error) {
	fake.DeReferenceScopeFileStub = nil
	if fake.deReferenceScopeFileReturnsOnCall == nil {
		fake.deReferenceScopeFileReturnsOnCall = make(map[int]struct {
			result1 string
			result2 bool
			result3 error
		})
	}
	fake.deReferenceScopeFileReturnsOnCall[i] = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *fakeScopeFileDeReferencer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deReferenceScopeFileMutex.RLock()
	defer fake.deReferenceScopeFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeScopeFileDeReferencer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
