// Code generated by counterfeiter. DO NOT EDIT.
package number

import (
	"sync"

	"github.com/opspec-io/sdk-golang/model"
)

type fakeCoercer struct {
	CoerceStub        func(value *model.Value) (float64, error)
	coerceMutex       sync.RWMutex
	coerceArgsForCall []struct {
		value *model.Value
	}
	coerceReturns struct {
		result1 float64
		result2 error
	}
	coerceReturnsOnCall map[int]struct {
		result1 float64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeCoercer) Coerce(value *model.Value) (float64, error) {
	fake.coerceMutex.Lock()
	ret, specificReturn := fake.coerceReturnsOnCall[len(fake.coerceArgsForCall)]
	fake.coerceArgsForCall = append(fake.coerceArgsForCall, struct {
		value *model.Value
	}{value})
	fake.recordInvocation("Coerce", []interface{}{value})
	fake.coerceMutex.Unlock()
	if fake.CoerceStub != nil {
		return fake.CoerceStub(value)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.coerceReturns.result1, fake.coerceReturns.result2
}

func (fake *fakeCoercer) CoerceCallCount() int {
	fake.coerceMutex.RLock()
	defer fake.coerceMutex.RUnlock()
	return len(fake.coerceArgsForCall)
}

func (fake *fakeCoercer) CoerceArgsForCall(i int) *model.Value {
	fake.coerceMutex.RLock()
	defer fake.coerceMutex.RUnlock()
	return fake.coerceArgsForCall[i].value
}

func (fake *fakeCoercer) CoerceReturns(result1 float64, result2 error) {
	fake.CoerceStub = nil
	fake.coerceReturns = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *fakeCoercer) CoerceReturnsOnCall(i int, result1 float64, result2 error) {
	fake.CoerceStub = nil
	if fake.coerceReturnsOnCall == nil {
		fake.coerceReturnsOnCall = make(map[int]struct {
			result1 float64
			result2 error
		})
	}
	fake.coerceReturnsOnCall[i] = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *fakeCoercer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.coerceMutex.RLock()
	defer fake.coerceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeCoercer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
