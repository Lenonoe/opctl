// Code generated by go-bindata.
// sources:
// pkg/data/package-manifest.schema.json
// DO NOT EDIT!

package pkg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgDataPackageManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x71\x6f\xdb\xb8\x15\xff\x3f\x9f\x82\xf0\x15\x83\xb3\xc6\x72\xda\xe6\xba\xcd\x87\x21\x08\x7a\x3d\xac\xc3\xd6\x06\x17\xa0\x03\x2e\x76\x5b\x46\x7a\xb6\x79\x91\x48\x8d\xa4\x9c\xa6\xb7\x7e\xf7\x81\xa4\x24\x4b\x14\x25\xcb\x0a\xdb\xe6\x7a\xed\x3f\x77\x21\xf9\x9e\xde\xfb\xf1\x47\xf2\xbd\x27\xca\xbf\x1d\x20\x34\x7a\x20\xc2\x35\x24\x78\x34\x43\xa3\xb5\x94\xe9\x6c\x3a\xfd\x55\x30\x3a\x31\xad\x01\xe3\xab\x69\xc4\xf1\x52\x4e\x8e\x4f\xa6\xa6\xed\xbb\xd1\x91\x92\x23\x51\x21\x22\x66\xd3\x29\xe6\xe1\x9a\x6c\x20\x60\xa9\x48\x21\x0c\x08\x9b\x1e\x07\x8f\x82\x93\xa9\xfa\x6b\x9a\xe2\xf0\x1a\xaf\x60\x92\x60\x4a\x96\x20\x64\x90\x2b\x57\x0f\x32\xca\x24\x91\x31\x28\x7d\xf9\xd0\x7f\xe7\x23\x4d\x6f\x04\x22\xe4\x24\x95\x84\x51\x35\xa6\xe8\x44\x4b\xc6\x11\x46\xb9\x88\x19\x9a\x72\x96\x02\x97\x04\xc4\x68\x86\x94\x7f\x08\x8d\x28\x4e\xa0\xfc\xab\xa9\xee\x25\x4e\x00\xb1\x25\x92\x6b\x40\x2c\xd5\x6a\xf4\x30\x79\x9b\x6a\x93\x84\xe4\x84\xae\x46\xba\xf9\xa3\xe9\xb5\x54\xb4\x69\xfe\x71\xfb\xe7\xbe\x0f\x20\x34\xcd\xa4\xa8\xea\x7e\xc0\x61\xa9\x46\x7f\x37\x8d\x60\x49\x28\x51\x5a\xc5\x34\xc5\x1c\x27\x75\x51\x96\xc9\xc1\xb2\x3c\xa3\xbb\xe5\x44\x68\x19\xbb\x01\x2e\xba\x91\x78\x6d\x46\xb8\x50\x68\x79\x06\x24\xaf\x81\xe7\x8f\x39\xc8\x1f\x35\xe2\xf0\xdf\x8c\x70\x50\xcc\xbb\xac\xcc\xed\x01\x42\x0b\xdd\x8f\xa3\x48\xcb\xe3\xf8\xbc\xca\x83\x25\x8e\x05\xe4\x4c\x2a\x1f\xb1\xe5\x47\x44\xf8\xb9\x86\xa2\x62\x7f\x49\xc8\xb2\xf3\xa8\x6d\x92\x09\x87\x50\x32\x7e\x8b\x34\x9e\x20\x81\x2b\x37\x31\x75\xce\x35\xbb\xfa\x15\x42\xb9\x6d\x77\xf0\xb5\xb0\xa9\xd6\xd0\x3e\xb4\x83\x8f\x65\xb7\x8b\x69\xc5\xbf\x8f\x47\xb6\xaa\x25\xce\x62\xe9\x52\xd3\xa0\xb7\x1e\x89\x36\x38\xce\xe0\x07\x84\x11\x87\x18\x4b\xb2\x01\x94\x62\xb9\x46\x84\x4a\xe0\x29\x07\x09\x11\x5a\x72\x96\xe8\x99\x8f\x08\x47\x84\xa2\x9b\x35\x09\xd7\x39\x15\x10\x11\x48\xf1\xee\xe8\x2e\x56\x13\x71\x01\x21\x87\x3e\x66\xbf\x58\x16\x96\xe4\xf3\x46\x04\x12\x46\xb8\xd5\x84\x2b\xc6\x62\xc0\xd4\xb2\xe1\xa0\xc5\x9e\x4e\x1e\x1e\xd8\xe2\xa5\xe8\x4e\xfa\xea\x41\x8d\x35\x80\x0a\xbe\xe4\x7f\x2d\x6a\x6b\x73\x49\x62\x68\x67\xf7\xb6\xb7\x8d\xde\x3f\x91\x18\xbc\x32\x5b\x3d\xf2\x1b\xb5\x3f\x29\xb5\x15\xc4\x5f\x05\xab\x35\x57\x9c\xb4\xce\x04\x70\xb5\xf7\x9f\x63\x21\x6e\x18\x8f\xce\x32\xb9\x1e\xcd\x7e\xdb\x45\x4a\x0b\x2f\x25\x05\x54\x92\x10\xeb\x33\x7a\x43\x30\x2a\x14\x23\x4c\x23\x94\xe6\xda\x77\xb3\xba\x10\xb3\x99\xed\x3e\xdd\x0c\x7f\x58\x8c\x25\x44\x17\x16\x05\x2a\x98\x8f\xca\xe7\xdf\x5d\x6b\x63\x5a\xb6\x88\x5f\x3a\xdc\x70\x19\x51\x4c\x44\xaf\x99\xad\xcd\x16\xcd\x92\x2b\xe0\xcf\x18\x15\x92\x63\x42\xeb\xc1\x49\xb9\x19\x35\x47\x0d\xde\x64\x70\x1c\xbf\x5a\xda\xa8\x59\x93\xff\xcf\x8b\x57\x2f\xd1\x85\x8e\x44\xd1\xa5\x16\x40\xd7\x70\xab\x3c\x5d\x8c\x8b\xb0\x56\x32\x16\x8b\x80\x80\x5c\xea\x48\x78\x2d\x93\x38\x0f\x87\x3f\xdc\xa6\x93\x4a\xa0\x3c\x39\x3e\xf9\x4e\x40\xa8\x74\x4f\xbe\x0f\x1e\x3f\x3e\xac\xad\xba\xd2\x7e\xcc\x39\xbe\xad\x77\x11\x09\x89\x63\xdb\x73\x4f\x71\x13\xa2\xea\x6a\x75\x72\x08\xd3\xdb\x3d\xa1\x50\x02\xfe\xa0\x78\x72\x7f\xa0\x00\x9a\x25\xfb\x20\xa1\xc6\xfb\x03\xe2\xf8\xce\x40\x14\x12\xc6\xf5\xdd\xfe\x2e\x19\x4f\xb0\x7d\x6e\x8c\x18\x05\x4d\x88\xcb\x9a\xf2\xe6\xc1\x5a\x2c\x4b\xb5\xad\xac\x80\x37\x8f\x11\x0b\xba\x9f\xcd\x86\x22\xf4\x11\x64\x4c\x44\x57\x6a\x1f\x45\xad\x1a\xac\x63\xb0\xd1\x9f\x4f\xd8\xa5\xd5\x8e\xb6\x46\x59\x3d\x8b\xd6\xa3\x6c\xe1\x44\x28\xc1\xef\x49\xb2\x1f\x29\x72\x11\x7f\xbc\x68\xa1\x85\x3d\xc9\x35\xb3\x09\xdd\xdb\x6c\x23\xe2\xcd\xec\x93\x21\x66\x67\xb1\x24\x69\x0c\xfb\xed\x47\x5b\x29\x6f\xc6\x3f\x1a\x60\x3c\x65\x8d\x95\xd4\x65\x35\x65\xd2\x1f\x45\xbe\xb7\xec\xdd\x7b\x47\xac\x3a\x52\xac\xff\xde\xae\x68\x01\x7f\xce\xb4\x31\xe7\x73\x1d\x08\x7b\x05\xa8\x8e\x30\xa6\x3d\x9b\xaa\xf6\xb7\x85\x9c\x2f\xcd\xc6\xe8\x33\xa3\xca\x59\x7b\xef\x72\xaa\xf6\xe3\xca\x47\x92\x93\x9f\x30\x83\xd3\x1c\xcb\x80\xd0\x19\x9c\x96\xdd\x03\x28\x77\xbf\x52\xa9\xfa\x24\xd4\x93\x29\xc1\xc2\x6b\x90\xed\xbc\xae\xf6\xef\x64\xa9\x35\x5b\x17\x5a\xb6\x93\xef\x6d\xbc\x36\x8f\xfd\x42\xbc\xde\x9f\x90\xc6\xdc\xaf\x22\xef\xce\x91\x77\x93\x45\x83\xb7\x2b\x97\x6b\x8e\xfa\x96\xcb\xd9\x25\xee\x06\x44\x7f\xd8\x5c\x6e\x00\x14\x5f\x4b\x2e\xd7\xdc\x8b\xf6\xc9\xe5\xec\xcd\x36\x4b\x81\x0b\x90\x6a\x93\xad\x79\x6f\xa4\x3d\xf9\xff\x17\xcb\xf9\x7d\x13\xca\x08\x4b\x98\x48\x52\xab\x32\xf5\x98\xc1\x52\x0c\x19\x6f\xee\xea\x45\xf0\xc4\xce\x03\x5c\x13\xb3\x47\x4e\xba\xf5\xab\x3b\x2b\x3d\xea\x8b\x93\xda\x85\xf9\x84\x24\x78\x05\x13\xb5\x6e\x76\xc1\x75\x86\x8c\x08\xd2\x22\x88\xc3\x12\x38\xd0\x10\x10\x16\x48\x2f\x37\x88\xd0\xd5\x2d\xba\x5c\x11\xb9\xce\xae\x82\x90\x25\x53\x23\x30\x8d\x88\x72\xf7\x2a\x53\x9a\xa6\xa5\xdc\x16\xe1\x1d\x12\x92\x03\x14\x1d\x8f\x82\x47\x4f\xb6\x2a\xfc\x02\x6c\x03\xe2\x07\x67\x48\x30\x89\xf7\xe3\xa2\x16\xf1\xc7\xc3\xc7\x5e\x61\x32\xfe\xf8\xc1\x66\xcd\x84\xb4\x0a\xc2\x3d\xe0\x29\xa4\xfc\x21\xf4\xc4\x2b\x42\xa5\x57\x7e\x40\x22\xe9\xe6\x64\x3f\x80\x94\x84\x3f\x70\x4e\xbc\x82\xa3\xbd\xf1\x06\xcc\xd3\xbd\x81\x79\xea\x0f\x98\xef\x7d\x03\xf3\xd4\x13\x30\x19\x27\xfb\xe1\x92\x71\xe2\x0f\x96\xa7\x5e\x61\x51\xbe\xf8\x41\x45\x40\xb2\xe9\x51\x68\x3e\x43\x02\x12\x4c\x25\x09\x51\x7e\xf3\xc4\x3e\xe0\x8c\x22\x85\x8a\x41\x6b\x36\x9d\x6e\x9b\xa6\x5e\xbd\xcf\x6d\xee\x06\xe0\xc0\xd5\x63\xd5\xa1\xff\x05\x74\x25\xd7\x7b\x96\x74\x8d\x90\xb7\xb8\xf6\x69\x4b\x58\xeb\x2a\xe0\x57\x8a\xd0\x8f\xdc\x3e\x15\xe6\x7d\x59\x9f\xec\x68\xb5\xa7\x4f\xc7\x47\x75\x93\x8b\x2a\xd7\xb1\xd3\xd7\xfb\x5f\x1c\xee\x48\xb1\xfe\x08\xc5\xe1\x01\x19\x66\x8a\xa5\x04\x6e\x17\x92\x3a\xc1\xc8\x45\xbc\xc1\xf1\xd7\x16\x34\x1c\xdb\xd4\x36\x41\x1c\x71\x58\xc1\xfb\xae\x57\xff\xbd\x0b\xde\xe6\x39\x1d\x85\xc1\x4a\xff\xde\x85\x41\x2d\x3b\xac\x30\x68\xdc\xbf\xb7\x05\xef\x4f\x54\x5f\x34\x80\x7d\xd1\x82\x77\xe7\x32\xba\x67\x35\xcc\xda\x24\xd4\x6b\x98\xa9\xcd\x68\x0b\xf1\xf3\x21\x6f\x67\xcc\xda\x3f\x6f\xe1\xec\xe5\xe4\x6d\x80\x27\x1f\xce\x26\xbf\x1c\x4f\xfe\xb6\x78\x38\xf0\xa5\xbc\x7b\x56\xca\x3b\xaa\x7b\x85\x5d\x6e\x5d\xdb\x1b\x81\x1e\x94\x55\x5f\x88\x79\x50\x57\x7d\x0f\xe1\x43\x5d\x65\xf7\xea\x13\xaf\xdd\x61\x1f\x0d\x57\xee\xfd\x33\x5c\x75\xec\x8f\x58\x45\xb8\x21\x8e\x63\xb4\xe2\x38\x5d\x97\x5c\xfc\x01\x09\x00\x54\x1c\x2d\x40\x83\x1b\x72\x4d\x52\x88\x88\xb9\xae\xaf\xfe\x9a\x3e\xc3\x71\xfc\x56\x8b\x6d\x1f\xd0\xe4\x58\x8f\x4b\x65\x21\xa3\x12\x13\x0a\x5c\x69\x74\xc6\x0c\x3d\x94\xb0\xf4\x2e\xd2\x6a\xb5\xc6\x31\xc4\x77\xd1\x21\x80\x13\x6c\x6b\x70\xee\x0d\x75\x87\x5d\xb3\x56\x1f\x31\xf8\xbd\x46\xa9\x66\x9f\x83\x2c\x4c\xec\xcb\x80\x2e\xee\x3c\x63\x49\x82\x69\x84\x78\x46\x55\x3e\x84\x51\xf9\xac\x1f\x10\xdb\x00\xe7\x24\x02\x81\x30\xbd\x45\x02\x24\xc2\x52\x9f\x2f\xa6\x68\x18\xc3\x06\x1c\xc5\xb0\xf6\x38\x0c\xb5\xc7\x62\x1d\xf3\xd1\x75\x57\xb1\x3e\x3b\x8d\xd9\x36\x0e\x13\xee\x3c\xb6\x5a\x26\xa1\x0d\xa8\xe2\xf2\x3e\x01\x81\x08\xd5\x30\x6c\xa7\xa5\x21\xdc\xbd\xc5\x97\xc3\xde\x8c\x2f\xcd\x4e\xbf\x98\x1d\x9e\xaa\x7d\x7f\x3e\x9f\x56\xb6\xfe\x07\x4e\xa9\xd6\x33\xa0\xf8\xe7\x12\x71\xb9\x34\x7e\x56\x38\x80\xfe\x54\x7c\x1b\xa3\xef\x26\xeb\x9b\xcb\x98\x03\x22\x91\xb9\xf3\x1a\x37\x13\xe1\x06\x8e\x34\x8b\x1b\xa5\x44\xf3\xef\xa3\x5b\xb6\xaf\x99\xca\xa2\x0d\xe6\x04\x5f\xc5\x80\x18\x2f\xee\x55\xd7\xbe\xe6\xe9\xb4\xcc\x15\x64\x95\xb6\x39\x5a\x17\x8d\x36\x7b\x54\xc3\xa3\x7e\x51\x8b\x43\x74\x04\x74\xf3\x1a\x7b\x61\xe8\x73\xba\x21\x9c\xd1\x04\xa8\x2c\xf1\xf2\xc9\xd5\xcb\x37\x7f\xef\xa0\xe4\xd0\xc5\xfb\x49\xc1\x55\x21\x8a\x0f\x68\x7f\x22\x7e\xa1\xbc\x7f\xcb\x7e\x69\x3e\xde\xb8\x4f\xeb\x5e\x9b\xf4\xf5\x2e\x7c\x7d\x88\x0e\xe1\x66\xc7\xa1\x8f\x4c\x92\x63\x97\x65\xca\xae\xc6\x3d\xdc\xe2\xb5\x9f\x64\xfa\xf6\x6d\xd2\x06\xeb\x5d\x96\x77\x53\xdf\x28\xcd\xe2\xb8\xfe\x1d\x86\xe3\x61\xd6\xb3\x9c\xdf\x71\x0c\x98\x30\x67\x0e\x58\x03\xcf\x6a\x5d\xf8\x9b\x73\xc7\x77\x1f\xc8\x31\x2f\xd5\xef\x4c\x2b\xf1\x18\x65\x12\x66\x48\xae\x89\x40\x4b\x02\x71\xa4\x12\xfc\x08\x52\x0e\xa1\xc2\xdf\xb5\x89\x95\x7d\x33\x24\x79\x06\xbb\x8a\xd9\x9d\xb6\xa7\x8c\xbb\xf3\x7f\x3b\x23\x56\xe3\xd0\x15\xcb\x68\xe5\x8b\xa7\xd2\x0b\xc5\x34\xd5\xb0\x66\x42\x7e\x4a\x8f\x5a\x17\x4f\xbf\x1d\xfa\x52\x6f\xc4\xe3\x89\xf9\xef\xe1\xe9\x58\x86\xe9\xff\xb2\x28\x3d\x3c\xed\xb9\xb4\xfe\xc1\x84\x44\x0a\xb2\xb1\x38\x54\x3e\x5f\x11\x1a\x21\xc9\xdc\x8b\x6b\xc7\x3b\x05\x54\xaf\x31\x36\x8c\xfb\xac\x47\xaa\xc9\xac\x07\x1d\xaa\x7d\xb1\x9f\xb5\x57\x3f\xca\x41\x8d\x34\xa6\xe0\x57\x7e\xb7\x0e\x47\x11\x07\x21\x50\x82\xd3\x14\x22\xbd\xbf\x15\x5d\xc5\x91\xd2\x6b\x2e\x3e\x2b\xb4\x32\x7a\xce\xed\x1c\xcf\x27\xb2\x6f\x82\xf6\xd8\xa2\x1d\x50\x19\x01\xe7\x28\xe5\xb0\x24\xef\xeb\x78\x9a\x32\xe3\x7d\xc6\xf3\x55\xd6\x59\x7e\xfd\x42\x78\xb2\x4c\xfe\x1e\xf1\xbc\x61\xfc\xfa\xc7\xc6\xd7\xe6\x2e\x6f\xff\xc3\xf8\xb5\x72\x25\xaa\x7c\xf1\x2e\xd7\x68\x5c\xaf\x28\x54\xde\xc3\xea\xc8\x63\xf7\xdb\xd6\x83\x36\x4f\xeb\x25\xe4\xd6\x23\x3e\x0f\xba\x2a\x6d\x0b\x1f\xb5\x67\x77\x59\x79\x9b\x27\x1c\x58\xcf\xea\x5f\x0e\xcc\xcb\x61\xae\xda\x52\xde\x35\xb8\xa8\xc4\x52\xbb\x9a\xd4\xb1\x2a\x3a\x2b\x4d\xe9\xf5\xaa\x19\xc8\xe5\xda\x7a\x45\xb1\x1e\x83\xd8\xce\xe4\xe0\x5b\x14\x5b\x1d\x34\x3c\x73\xb1\x7f\x71\xa4\xec\xb1\x5f\x47\x29\xaf\x71\x4c\x3e\xa8\x05\x8f\xc2\x35\x51\x11\x9e\x12\x36\x81\x21\x46\xfa\xe6\x57\x91\x56\x67\x9c\x03\x95\x48\x84\x2c\xd5\x8d\xf9\x4d\x54\xb6\x44\xef\xb4\xe8\x0b\x25\xa9\x42\xe3\x59\x31\xf6\x42\x0d\x55\x2d\xef\x02\xf4\x42\x0d\xb3\x9b\x55\x3c\xa9\xf2\xd3\x23\x5b\xc5\x3b\x74\x43\xe2\x58\x7f\x74\x28\x44\x96\xb8\x62\x4d\x5f\xd1\x4c\xe7\xdb\x9c\x72\xd8\xc0\xd4\xde\x7f\x12\xfe\xbb\xc8\x9d\x9b\x3f\x5c\x53\x76\x75\x52\xb0\x9d\x6f\x39\x21\x0d\x47\x8d\x7a\x9b\x83\x16\xb9\x66\x66\xf0\x2b\x3d\xb6\x4a\x42\xab\xb5\xca\xc1\x06\x3f\xbf\xb1\xb0\x5b\xe3\xfd\x62\x61\x8f\x80\xe3\xb2\x79\x34\x7e\x9e\x68\x83\xa5\x77\x08\x33\x6a\xef\xcd\x5c\xc1\x46\x6d\xc0\xe0\x90\xa3\xd0\xd2\x16\x78\xdc\xf9\xea\x4e\xd8\xf6\x79\x44\x4f\x10\x4b\x03\x87\x43\x59\x79\x7d\xe8\x7c\x8f\xbb\xed\x1e\x0c\xa3\xd1\x71\x6f\x41\xcc\xcd\x1b\x0e\xa1\x23\x1e\x73\x41\xe9\x18\xb6\xe3\x06\x91\xc8\xd2\x94\x71\xa9\xfe\xf7\xc1\xf8\xc5\xcb\xb7\x17\xcf\x5e\x9d\x3f\x7f\xfb\xfa\xec\xe7\x43\x24\xb2\x2b\x21\x89\xd4\x1f\x29\x20\x71\x4b\x25\x7e\x8f\x6e\xd6\xc0\xa1\x31\xb2\xd8\xb2\x39\xa4\x31\x0e\x4d\xfa\xa2\xce\x13\xfd\x03\x40\xea\xa4\xa8\x0e\x47\x58\x22\x9e\x51\x49\x12\x08\x9a\x13\xee\xfa\x39\xb7\xfc\xe7\xcc\xdc\xdc\xd1\x5d\x6d\x4e\x6e\x1e\x07\xc7\xc1\x71\xf3\xc6\xeb\xb8\xb8\x03\x50\xbf\xdb\xaa\x7f\x6f\xcf\xc8\x04\x6b\x99\x54\x4a\xfd\x6d\xf5\xa8\x6a\x0d\xea\xcd\x38\xaf\x3e\xcd\xe7\x81\xe3\x7f\xc7\xa7\xb3\xf1\x7c\xae\x2b\x54\x67\x93\x5f\xf0\xe4\xc3\x64\xf1\x70\x7c\x3a\x9b\xcf\x83\x5a\xd3\xe1\x9f\x0f\x0f\x4f\x75\xfb\xc3\x4a\xfb\x7c\x3e\x99\xcf\x83\xc5\xc3\xc3\xd3\x07\x95\x9f\x75\x3b\xf8\x78\x70\xf0\xff\x00\x00\x00\xff\xff\x03\x7f\x70\x13\x87\x50\x00\x00")

func pkgDataPackageManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_pkgDataPackageManifestSchemaJson,
		"pkg/data/package-manifest.schema.json",
	)
}

func pkgDataPackageManifestSchemaJson() (*asset, error) {
	bytes, err := pkgDataPackageManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/data/package-manifest.schema.json", size: 20615, mode: os.FileMode(420), modTime: time.Unix(1490767428, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/data/package-manifest.schema.json": pkgDataPackageManifestSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"package-manifest.schema.json": &bintree{pkgDataPackageManifestSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
