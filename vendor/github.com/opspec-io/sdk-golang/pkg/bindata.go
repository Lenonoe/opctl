// Code generated by go-bindata.
// sources:
// pkg/data/package-manifest.schema.json
// DO NOT EDIT!

package pkg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgDataPackageManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x51\x73\xdb\xb8\x11\x7e\xf7\xaf\xd8\xd1\xe5\x41\x6e\x2c\xc9\x49\x7c\x69\xab\x4c\xc7\x93\xc9\xdd\x4d\xd3\x69\x93\xcc\x79\x26\x9d\x39\xdb\x49\x20\x72\x25\xe1\x4c\x02\x2c\x00\xca\x71\xae\xf9\xef\x1d\x00\x24\x45\x82\x20\x45\xd1\x4c\xed\xcb\xc5\x2f\x89\x08\xec\x72\xf7\xc3\xc7\xc5\x62\x01\xf2\xb7\x03\x80\xd1\x03\x19\xac\x31\x26\xa3\x39\x8c\xd6\x4a\x25\xf3\xd9\xec\x57\xc9\xd9\xc4\x5e\x9d\x72\xb1\x9a\x85\x82\x2c\xd5\xe4\xf8\x64\x66\xaf\x7d\x37\x3a\xd2\x72\x34\xcc\x45\xe4\x7c\x36\x23\x22\x58\xd3\x0d\x4e\x79\x22\x13\x0c\xa6\x94\xcf\x8e\xa7\x8f\xa6\x27\x33\xfd\x6b\x96\x90\xe0\x8a\xac\x70\x12\x13\x46\x97\x28\xd5\x34\x53\xae\x6f\x64\x95\x29\xaa\x22\xd4\xfa\xb2\xae\xff\xca\x7a\xda\xd6\x10\x65\x20\x68\xa2\x28\x67\xba\x4f\xde\x08\x4b\x2e\x80\x40\x26\x62\xbb\x26\x82\x27\x28\x14\x45\x39\x9a\x83\xf6\x0f\x60\xc4\x48\x8c\xc5\xaf\xba\xba\x57\x24\x46\xe0\x4b\x50\x6b\x04\x9e\x18\x35\xa6\x9b\xba\x49\x8c\x49\x52\x09\xca\x56\x23\x73\xf9\xb3\x6d\x75\x54\x34\x69\xfe\x61\xfb\x73\xdf\x1b\x50\x96\xa4\x4a\x96\x75\x3f\x10\xb8\xd4\xbd\xbf\x9b\x85\xb8\xa4\x8c\x6a\xad\x72\x96\x10\x41\xe2\xaa\x28\x4f\x55\x6f\x59\x91\xb2\xdd\x72\x32\x70\x8c\xdd\xa0\x90\xed\x48\xbc\xb5\x3d\x7c\x28\x34\xdc\x03\xe3\xb7\x28\xb2\xdb\x1c\x64\xb7\x1a\x09\xfc\x4f\x4a\x05\x6a\xe6\x9d\x97\xc6\xf6\x00\xe0\xd2\xb4\x93\x30\x34\xf2\x24\x7a\x53\xe6\xc1\x92\x44\x12\x33\x26\x15\xb7\xd8\xf2\x23\xa4\xe2\x8d\x81\xa2\x64\x7f\x41\xc8\xa2\xf1\xa8\x69\x90\xa9\xc0\x40\x71\x71\x03\x06\x4f\x54\x28\xb4\x9b\x84\x79\xc7\x9a\x2f\x7e\xc5\x40\x6d\xaf\x7b\xf8\x9a\xdb\x54\xb9\xd0\xdc\xb5\x85\x8f\x45\xb3\x8f\x69\xf9\xdf\xe7\x23\x57\xd5\x92\xa4\x91\xf2\xa9\xa9\xd1\xdb\xf4\x84\x0d\x89\x52\x7c\x06\x04\x04\x46\x44\xd1\x0d\x42\x42\xd4\x1a\x28\x53\x28\x12\x81\x0a\x43\x58\x0a\x1e\x9b\x91\x0f\xa9\x00\xca\xe0\x7a\x4d\x83\x75\x46\x05\xa0\x12\x34\xef\x8e\x6e\x63\x35\x95\x67\x18\x08\xec\x62\xf6\xcb\x65\x6e\x49\x36\x6e\x54\x82\xb4\xc2\x8d\x26\x2c\x38\x8f\x90\x30\xc7\x86\x83\x06\x7b\x5a\x79\x78\xe0\x8a\x17\xa2\x3b\xe9\x6b\x3a\xd5\x9e\x01\xc8\xf9\x92\xfd\xba\xac\x3c\x9b\x4b\x1a\x61\x33\xbb\xb7\xad\x4d\xf4\xfe\x89\x46\x38\x28\xb3\xf5\x2d\xbf\x51\xfb\x8b\x52\x5b\x43\xfc\x55\xb0\xda\x70\xc5\x4b\xeb\x24\x8d\xa2\x17\x02\x43\x39\x9a\xff\xb6\x8b\x89\x0e\x48\x5a\x0c\x99\xa2\x24\x92\x90\x4a\x0c\x21\x4c\xf5\x20\x00\x49\xd5\x5a\x5f\x0f\x88\x99\xb0\xaf\xa9\xb2\xc3\x28\x79\x2a\x02\xcc\x98\x4f\x63\xb2\x42\xe0\xa2\x92\x75\x40\x1b\xdf\x53\x89\xc2\xc9\x40\xa0\x79\xde\xb3\xcc\xe2\x11\x51\x18\x9e\x39\xe4\x28\x8d\xc6\x28\x21\x52\x5e\x73\x11\x0e\xa0\xb5\x36\x60\xdb\xb1\x38\xf7\xb8\xe1\x33\x22\x1f\xa2\x4e\x63\x5e\x19\x47\x96\xc6\x0b\x14\x2f\x38\x93\x4a\x10\xca\xaa\x69\x4b\x11\xa6\xea\xbd\x7a\x87\x1f\x12\x45\xaf\x97\x2e\x6a\x0e\x43\xfe\x71\xf6\xfa\x15\x9c\x99\x1c\x15\xce\x8d\x00\x5c\xe1\x8d\xf6\xf4\x72\x9c\x27\xbc\x8a\xf3\x48\x4e\x29\xaa\xa5\xc9\x91\xd7\x2a\x8e\xb2\x44\xf9\xd3\x4d\x32\x29\xa5\xd0\x93\xe3\x93\xef\x24\x06\x5a\xf7\xe4\xfb\xe9\xe3\xc7\x87\x95\xe7\xb1\xb0\x9f\x08\x41\x6e\xaa\x4d\x54\x61\xec\x09\x88\xfe\x21\xae\x43\x54\x7e\x8e\xbd\x1c\x22\xec\x66\x4f\x28\xb4\xc0\x70\x50\x3c\xb9\x3f\x50\x20\x4b\xe3\x7d\x90\xd0\xfd\x87\x03\xe2\xf8\xd6\x40\xe4\x12\xd6\xf5\xdd\xfe\x2e\xb9\x88\x89\x3b\xa3\x8c\x38\x43\x43\x88\xf3\x8a\xf2\xfa\x94\x9b\x3f\x96\x3a\xac\xac\x50\xd4\x27\x18\x07\xba\x9f\x6d\x40\x91\x26\x9c\x5a\x13\x61\x81\x26\x9c\x36\x69\x70\x26\xc8\x5a\x7b\x36\x60\xe7\xce\x75\xd8\x1a\xe5\xb4\x5c\x36\x4e\x72\x97\x5e\x84\x62\xf2\x91\xc6\xfb\x91\x22\x13\x19\x8e\x17\x0d\xb4\x70\x07\xb9\x62\x36\x65\x7b\x9b\x6d\x45\x06\x33\xfb\xa4\x8f\xd9\x69\xa4\x68\x12\xe1\x7e\xf1\x68\x2b\x35\x98\xf1\x8f\x7a\x18\xcf\x78\xed\x49\x6a\xb3\x9a\x71\x35\x1c\x45\xbe\x77\xec\xdd\x3b\x22\x96\x1d\xc9\x9f\xff\xce\xae\x18\x81\xe1\x9c\x69\x62\xce\xff\x6b\x42\xd8\x2b\x75\xf5\xa4\x31\xcd\xeb\xac\x72\x7b\x53\x5e\xfa\xca\x06\xc6\x21\xd7\x5a\x19\x6b\xef\xdd\x6a\xab\x79\xba\x1a\x62\xf9\x93\xcd\x30\xbd\x17\x40\x8e\x01\x81\x37\x39\x2d\x9a\x7b\x50\xee\x7e\x2d\xb2\xaa\x83\x50\x5d\x66\x49\x1e\x5c\xa1\x6a\xe6\x75\xb9\x7d\x27\x4b\x9d\xd1\x3a\x33\xb2\xad\x7c\x6f\xe2\xb5\xbd\xed\x1d\xf1\x7a\x7f\x42\x5a\x73\xbf\x8a\x15\x79\x86\xbc\x9f\x2c\x06\xbc\x5d\x6b\xb9\x7a\xaf\x6f\x6b\x39\xb7\xf8\x5d\x83\xe8\x0f\xbb\x96\xeb\x01\xc5\xd7\xb2\x96\xab\xc7\xa2\x7d\xd6\x72\x6e\xb0\x4d\x13\x14\x12\x95\x0e\xb2\x15\xef\xad\xf4\x40\xfe\xff\xd9\x71\x7e\xdf\x05\x65\x48\x14\x4e\x14\xad\x54\x99\x3a\x8c\x60\x21\x06\xd6\x9b\xdb\x7a\x31\x7d\xe2\xae\x03\x7c\x03\xb3\xc7\x9a\x74\xeb\x57\xfb\xaa\xf4\xa8\x2b\x4e\x3a\x0a\x8b\x89\x29\x46\x4e\xf4\x73\xb3\x0b\xae\xe7\x60\x45\xb2\xfa\xa5\xc0\x25\x0a\x64\x01\x02\x91\x60\x1e\x37\x0c\x61\x71\x03\xe7\x2b\xaa\xd6\xe9\x62\x1a\xf0\x78\x66\x05\x66\x21\xd5\xee\x2e\x52\xad\x69\x56\xc8\x6d\x11\xde\x21\xa1\x04\x62\xde\xf0\x68\xfa\xe8\xc9\x56\xc5\xb0\x00\xbb\x80\x0c\x83\x33\xc6\x84\x46\xfb\x71\xd1\x88\x0c\xc7\xc3\xc7\x83\xc2\x64\xfd\x19\x06\x9b\x35\x97\xca\x29\x08\x77\x80\x27\x97\x1a\x0e\xa1\x27\x83\x22\x54\x78\x35\x0c\x48\x34\xd9\x9c\xec\x07\x90\x96\x18\x0e\x9c\x93\x41\xc1\x31\xde\x0c\x06\xcc\xd3\xbd\x81\x79\x3a\x1c\x30\xdf\x0f\x0d\xcc\xd3\x81\x80\x49\x05\xdd\x0f\x97\x54\xd0\xe1\x60\x79\x3a\x28\x2c\xda\x97\x61\x50\x91\x18\x6f\x3a\x14\x9a\x9f\x83\xc4\x98\x30\x45\x03\xc8\xce\xa4\xb8\x13\x9c\x55\xa4\x51\xb1\x68\xcd\x67\xb3\xed\xa5\xd9\xa0\xde\x67\x36\xb7\x03\x70\xe0\x6b\x71\xea\xd0\xff\x44\xb6\x52\xeb\x3d\x4b\xba\x56\x68\xb0\xbc\xf6\x69\x43\x5a\xeb\x2b\xe0\x97\x8a\xd0\x8f\xfc\x3e\xe5\xe6\xdd\xad\x4f\x6e\xb6\xda\xd1\xa7\xe3\xa3\xaa\xc9\x79\x95\xeb\xd8\xeb\xeb\xfd\x2f\x0e\xb7\x2c\xb1\xfe\x08\xc5\xe1\x1e\x2b\xcc\x84\x28\x85\xc2\x2d\x24\xb5\x82\x91\x89\x0c\x06\xc7\x5f\x1a\xd0\xf0\x84\xa9\xed\x02\x71\x24\x70\x85\x1f\xdb\xb6\xfe\x3b\x17\xbc\xed\x7d\x5a\x0a\x83\xa5\xf6\xbd\x0b\x83\x46\xb6\x5f\x61\xd0\xba\x7f\x6f\x0b\xde\x5f\xa8\xbe\x68\x01\xbb\xd3\x82\x77\xeb\x63\x74\xcf\x6a\x98\x95\x41\x70\xce\x15\xb9\x8c\x76\x10\x7f\xd3\x67\x77\xc6\x3e\xfb\x6f\x1a\x38\x7b\x3e\x79\x3f\x25\x93\x4f\xcf\x27\xbf\x1c\x4f\xfe\x7a\xf9\xb0\xe7\xa6\xbc\x7f\x54\x8a\xd3\xab\x7b\xa5\x5d\x7e\x5d\xdb\xb3\x82\x03\x28\x2b\x6f\x88\x0d\xa0\xae\xbc\x0f\x31\x84\xba\x52\xf4\xea\x92\xaf\xdd\x22\x8e\x06\x2b\x7f\xfc\x0c\x56\x2d\xf1\x91\xe8\x0c\x37\x20\x51\x04\x2b\x41\x92\x75\xc1\xc5\x67\x20\x11\x21\x9f\x5a\x90\x4d\xaf\xe9\x15\x4d\x30\xa4\xf6\x20\xbf\xfe\x35\x7b\x41\xa2\xe8\xbd\x11\xdb\xde\xa0\xce\xb1\x0e\x87\xca\x02\xce\x14\xa1\x0c\x85\xd6\xe8\xcd\x19\x3a\x28\xe1\xc9\x6d\xa4\xf5\xd3\x1a\x45\x18\xdd\x46\x87\x44\x41\x89\xab\xc1\x1b\x1b\xaa\x0e\xfb\x46\xad\xda\xa3\xf7\xbe\x46\xa1\x66\x9f\x89\x2c\x88\xdd\xc3\x80\x3e\xee\xbc\xe0\x71\x4c\x58\x08\x22\x65\x7a\x3d\x44\xa0\xb8\xd7\x33\xe0\x1b\x14\x82\x86\x28\x81\xb0\x1b\x90\xa8\x80\x28\x33\xbf\xd8\xa2\x61\x84\x1b\xf4\x14\xc3\x9a\xf3\x30\x68\xce\xc5\x5a\xc6\xa3\xed\xac\x62\x75\x74\x6a\xa3\x6d\x1d\xa6\xc2\x3b\x6d\x35\x0c\x42\x13\x50\xf9\xb1\x7e\x8a\x12\x28\x33\x30\x6c\x87\xa5\x26\xdc\x1e\xe2\x8b\x6e\xef\xc6\xe7\x36\xd2\x5f\xce\x0f\x4f\x75\xdc\xbf\xb8\x98\x95\x42\xff\x03\xaf\x54\xe3\x1c\x90\xff\xf9\x44\x7c\x2e\x8d\xaf\x69\x14\xc1\x02\x61\xc1\x53\x16\x82\xe2\x20\x49\x5c\x9c\x68\xce\x4f\xb4\xd6\xd7\xc0\x35\x08\x59\x1a\xd5\xaa\x88\xf6\xef\xb3\x5f\xb6\xab\x85\x21\x15\x20\x70\x69\xcf\xd7\x56\xac\xda\x6d\x94\x2f\xb5\x2a\xcc\xf2\x5c\xbd\xac\x5d\x73\x7b\xd5\x9c\xe9\x96\xab\x78\x44\x47\xc8\x36\x6f\xc9\x20\xbc\xfc\x91\x6d\xa8\xe0\x2c\x46\xa6\x60\x43\x04\x25\x8b\x68\x50\x86\x9e\xbf\xfb\xdb\x1d\x10\x91\x32\x90\x01\x4f\xcc\xce\x04\x5c\xcf\x2c\x31\x19\x89\xef\x94\x8d\x96\x51\x59\xaa\x92\xf3\x32\xcb\xb5\xcd\x8b\x01\xcd\xb6\xf5\x0d\x6d\x99\xdd\x77\x4d\x57\x9d\xea\x0d\x41\xd6\x9f\xe8\xb0\xe4\xfc\x16\x3e\x5b\x2d\x34\xef\x7d\x7c\x95\xf1\xd3\x64\x20\x7d\x08\xd9\x92\x31\x81\x5d\x21\xba\x35\xad\xa2\xa9\x76\x88\x39\xdf\x33\x55\xbc\x78\x13\xc4\x0b\xeb\x2d\x9e\x7e\x0f\x01\x7c\xaf\xba\x78\xee\xe6\x66\xc6\x85\x50\xe7\x7b\xbc\x34\x6f\xc5\xa8\x9b\x86\xdb\xb8\xa5\x87\xac\xf7\x2c\x7f\x31\xc4\xbe\x4b\xa3\x38\x68\x5d\xdb\xb4\xf1\x19\x84\x98\x08\x0c\xb4\xd7\x47\xba\x0f\x14\xa6\x01\x65\x52\x21\x09\xfd\x20\xee\x28\xbc\x67\x36\xe5\xaa\x47\x73\x50\x22\xc5\xce\xce\xe6\x25\x96\x2e\xae\xda\xbe\xb3\xfc\x6d\x97\x7b\xea\xe8\xce\x87\xcf\x5b\x0c\x29\xb5\xd6\x37\xcd\x87\x7b\x7e\x3d\x2f\x40\x81\x07\x69\xf3\x2a\x76\x65\xae\x80\x80\x30\x1d\x73\x8b\x63\x03\x66\x1b\xc7\xbc\x73\xc7\xd5\x5a\xb7\xe7\x3d\xe5\xed\xde\xb2\x4b\xb8\xf0\x97\xbb\xdc\x02\x90\xee\x97\x4d\x01\xc5\xab\x7f\x5b\x73\x15\x37\x17\xd6\x5c\xb6\x54\xe1\x1a\x83\x55\xb7\x69\xf0\xdc\xcc\x76\xe3\x89\xfd\xf7\xf0\x74\xac\x82\xe4\xbf\x69\x98\x1c\x9e\x76\x0c\x65\x7f\xe7\x52\x81\x76\x78\x2c\x0f\xb5\xc5\x0b\x6a\xe6\xb3\xfe\xf4\xdc\x16\xc4\x6b\xc6\x79\xe2\xcf\x97\x9b\x26\x6c\x19\xa8\x57\xe6\xd2\x15\xfb\x79\x73\xa9\xae\xe8\x54\x5b\x73\xe7\xec\xc8\x0e\x82\x92\x30\x14\x28\x25\xc4\x24\x49\x6c\x28\x21\x79\x93\xef\x30\x0f\x74\x99\xa6\xbf\x24\xaa\x2a\xfc\x51\xb8\xb5\x88\x21\x41\x7d\x37\x6d\xce\xdd\x9a\xb1\x54\x21\x0a\x01\x89\xc0\x25\xfd\x58\x85\xd2\xa6\xe8\xf7\x14\xca\xd7\x69\xeb\x0e\xc1\x1d\x41\xc9\x53\xf5\x3b\x83\xf2\x9a\x8b\xab\x1f\x6a\x5f\x49\xf0\x39\xfa\x6f\x2e\xae\xb4\x17\x61\xe9\x4b\x0d\x6a\x0d\xe3\x6a\xbd\xab\x74\x4a\xc0\xcc\xe7\xbb\xcf\x02\x1c\x34\x79\x5a\xdd\xe0\x68\x9c\x77\xb3\xac\xb6\x74\xed\x72\x88\x9d\x11\xff\xa6\xc7\x76\xf5\x75\xe0\xdc\xab\x7b\xb1\x3a\x2b\xd6\xfa\x2a\x9f\x59\x53\xef\x92\x27\x4f\xdc\x5a\x67\xcb\x03\xd1\x5a\x07\xf5\x67\xf4\xed\xd9\x7c\xe3\x2a\xa9\x9e\x78\xdd\x2e\xc9\xb8\x5a\xd5\x53\xce\x4c\x43\xa7\x25\xcc\x80\x2b\x18\xd0\xc6\xf4\x9e\xf1\xb7\x7b\xca\xa9\xa0\x93\x22\x3b\xbb\xa3\x15\xcd\xbd\xce\x7d\x6b\x9f\xf2\x29\x5a\xdc\x25\x95\x76\x95\x44\xf4\x93\x8e\x48\x10\xac\x69\x14\x82\x11\xb6\x89\x26\x31\x05\xb1\xa2\x9a\x92\x0a\x81\x4c\x65\x65\x33\xca\xb2\x33\x60\xc0\x97\xf0\xc1\x88\xbe\xd4\x92\x3a\xa1\x9e\xe7\x7d\xcf\x74\x57\x7d\xe5\xc3\x14\x5e\xea\x6e\xee\x65\xa0\x12\x58\x1a\x45\x47\xae\x8a\x0f\x90\xd7\x3e\x88\x94\x69\x8c\xf5\x95\xcc\x60\xf9\x55\xeb\x66\x68\xd1\xad\x67\x45\x67\xf8\x0a\xcc\xef\xa2\x7a\x52\xff\x22\x54\xd1\xd4\x4a\xc1\x66\xbe\x65\x84\xb4\x1c\xb5\xea\x5d\x0e\x3a\xe4\x9a\xdb\xce\xaf\x4d\xdf\x32\x09\x9d\xab\x65\x0e\xd6\xf8\xf9\x8d\x85\xed\x1a\xef\x17\x0b\x1b\x33\xa2\x0c\xb7\x1d\x27\x1a\xca\x31\xdb\xcc\x9c\xfb\x9d\x1d\xad\x88\xeb\x08\xdf\x72\xf2\xf2\xcb\xa5\x5d\x3c\xb9\x45\xbe\x55\xd9\xde\xf6\x65\x5d\x95\x0e\xbd\x73\xaf\x5c\x4b\x53\x06\x76\xeb\x13\x76\x41\xd3\x5b\x4c\x1d\x41\x2c\x0c\xec\x0f\x65\x69\x97\xdf\x7b\xdc\x62\xdb\xdc\x1b\x46\xab\xe3\xde\x82\x98\x99\xd7\x1f\x42\x4f\xfd\xda\x07\xa5\xa7\xdb\x8e\x83\x7e\x32\x4d\x12\x2e\x94\xfe\xef\x83\xf1\xcb\x57\xef\xcf\x5e\xbc\x7e\xf3\xe3\xfb\xb7\xcf\x7f\x3e\x04\x99\x2e\xa4\xa2\xca\xbc\x4b\x04\xf2\x86\x29\xf2\x11\xae\xd7\x28\xb0\xd6\x33\x9f\x1a\x04\x26\x11\xc9\xca\x84\x7a\xde\x32\x1b\x75\x7a\x46\x2a\x77\x07\xa2\x40\xa4\x4c\xd1\x18\xa7\xf5\x01\xf7\x7d\x8f\x31\xfb\x1e\xa1\x9f\x3b\xa6\xa9\xc9\xc9\xcd\xe3\xe9\xf1\xf4\xb8\x7e\x30\x7d\x9c\x1f\xd5\xa9\x1e\x41\x37\x1f\xcc\xb4\x32\xd3\xb5\x8a\xa3\xc3\x46\xfb\xdc\xf3\x65\xba\xe9\xdd\x38\xab\xbb\x5d\x5c\x4c\x3d\xff\x1d\x9f\xce\xc7\x17\x17\xa6\x36\xf7\x7c\xf2\x0b\x99\x7c\x9a\x5c\x3e\x1c\x9f\xce\x2f\x2e\xa6\x95\x4b\x87\x7f\x3a\x3c\x3c\x35\xd7\x1f\x96\xae\x5f\x5c\x4c\x2e\x2e\xa6\x97\x0f\x0f\x4f\x1f\x94\xbe\xcb\x78\xf0\xf9\xe0\xe0\x7f\x01\x00\x00\xff\xff\xf8\x87\x27\xde\x48\x54\x00\x00")

func pkgDataPackageManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_pkgDataPackageManifestSchemaJson,
		"pkg/data/package-manifest.schema.json",
	)
}

func pkgDataPackageManifestSchemaJson() (*asset, error) {
	bytes, err := pkgDataPackageManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/data/package-manifest.schema.json", size: 21576, mode: os.FileMode(420), modTime: time.Unix(1494596926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/data/package-manifest.schema.json": pkgDataPackageManifestSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"package-manifest.schema.json": &bintree{pkgDataPackageManifestSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
