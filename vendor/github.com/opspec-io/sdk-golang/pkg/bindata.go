// Code generated by go-bindata.
// sources:
// pkg/data/package-manifest.schema.json
// DO NOT EDIT!

package pkg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgDataPackageManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xe1\x8e\xdb\xb8\x11\xfe\xbf\x4f\x41\xf8\x82\xc2\xdb\xac\xe5\x4d\xb2\x97\xb6\x3e\x14\x8b\x45\x2e\x87\xa6\x68\x93\xc5\x2d\x90\x02\x67\x3b\x09\x2d\x8d\x6d\xde\x4a\xa4\x4a\x52\xde\x6c\xae\x79\xf7\x82\xa4\x24\x4b\x14\x25\xcb\xb2\x92\xf8\x72\xc9\x9f\xbb\x25\x39\xa3\x99\x8f\x1f\xc9\x99\x11\xe5\xdf\x4e\x10\x1a\x3c\x10\xfe\x1a\x22\x3c\x98\xa0\xc1\x5a\xca\x78\x32\x1e\xff\x2a\x18\x1d\x99\x56\x8f\xf1\xd5\x38\xe0\x78\x29\x47\xe7\x17\x63\xd3\xf6\xdd\xe0\x4c\xc9\x91\x20\x13\x11\x93\xf1\x18\x73\x7f\x4d\x36\xe0\xb1\x58\xc4\xe0\x7b\x84\x8d\xcf\xbd\x47\xde\xc5\x58\xfd\x35\x8e\xb1\x7f\x8b\x57\x30\x8a\x30\x25\x4b\x10\xd2\x4b\x95\xab\x07\x19\x65\x92\xc8\x10\x94\xbe\x74\xe8\xbf\xd3\x91\xa6\x37\x00\xe1\x73\x12\x4b\xc2\xa8\x1a\x93\x75\xa2\x25\xe3\x08\xa3\x54\xc4\x0c\x8d\x39\x8b\x81\x4b\x02\x62\x30\x41\xca\x3f\x84\x06\x14\x47\x90\xff\x55\x55\xf7\x12\x47\x80\xd8\x12\xc9\x35\x20\x16\x6b\x35\x7a\x98\xbc\x8f\xb5\x49\x42\x72\x42\x57\x03\xdd\xfc\xd1\xf4\x5a\x2a\xea\x34\xff\xb8\xfd\x73\xdf\x07\x10\x1a\x27\x52\x14\x75\x3f\xe0\xb0\x54\xa3\xbf\x1b\x07\xb0\x24\x94\x28\xad\x62\x1c\x63\x8e\xa3\xb2\x28\x4b\x64\x67\x59\x9e\xd0\xdd\x72\xc2\xb7\x8c\xdd\x00\x17\xcd\x48\xbc\x36\x23\x5c\x28\xd4\x3c\x03\xa2\xd7\xc0\xd3\xc7\x9c\xa4\x8f\x1a\x70\xf8\x6f\x42\x38\x28\xe6\x4d\x0b\x73\x7b\x82\xd0\x5c\xf7\xe3\x20\xd0\xf2\x38\xbc\x2e\xf2\x60\x89\x43\x01\x29\x93\xf2\x47\x6c\xf9\x11\x10\x7e\xad\xa1\x28\xd8\x9f\x13\x32\xef\x3c\xab\x9b\x64\xc2\xc1\x97\x8c\xdf\x23\x8d\x27\x48\xe0\xca\x4d\x4c\x9d\x73\xcd\x16\xbf\x82\x2f\xb7\xed\x0e\xbe\x66\x36\x95\x1a\xea\x87\x36\xf0\x31\xef\x76\x31\x2d\xfb\xf7\xf1\xcc\x56\xb5\xc4\x49\x28\x5d\x6a\x2a\xf4\xd6\x23\xd1\x06\x87\x09\xfc\x80\x30\xe2\x10\x62\x49\x36\x80\x62\x2c\xd7\x88\x50\x09\x3c\xe6\x20\x21\x40\x4b\xce\x22\x3d\xf3\x01\xe1\x88\x50\x74\xb7\x26\xfe\x3a\xa5\x02\x22\x02\x29\xde\x9d\x1d\x62\x35\x11\x37\xe0\x73\x68\x63\xf6\x8b\x65\x66\x49\x3a\x6f\x44\x20\x61\x84\x6b\x4d\x58\x30\x16\x02\xa6\x96\x0d\x27\x35\xf6\x34\xf2\xf0\xc4\x16\xcf\x45\x77\xd2\x57\x0f\xaa\xac\x01\x94\xf1\x25\xfd\x6b\x5e\x5a\x9b\x4b\x12\x42\x3d\xbb\xb7\xbd\x75\xf4\xfe\x89\x84\xd0\x2b\xb3\xd5\x23\xbf\x51\xfb\x93\x52\x5b\x41\xfc\x55\xb0\x5a\x73\xc5\x49\xeb\x44\x00\x57\x7b\xff\x35\x16\xe2\x8e\xf1\xe0\x2a\x91\xeb\xc1\xe4\xb7\x5d\xa4\xb4\xf0\x52\x52\x40\x25\xf1\xb1\x3e\xa3\x37\x04\xa3\x4c\x31\xc2\x34\x40\x71\xaa\x7d\x37\xab\x33\x31\x9b\xd9\xee\xd3\xcd\xf0\x87\x85\x58\x42\x70\x63\x51\xa0\x80\xf9\x20\x7f\xfe\xe1\x5a\x2b\xd3\xb2\x45\x7c\xea\x70\xc3\x65\x44\x36\x11\xad\x66\xb6\x34\x5b\x34\x89\x16\xc0\x9f\x31\x2a\x24\xc7\x84\x96\x83\x93\x7c\x33\xaa\x8e\xea\xbc\xc9\xe0\x30\x7c\xb5\xb4\x51\xb3\x26\xff\x9f\x37\xaf\x5e\xa2\x1b\x1d\x89\xa2\xa9\x16\x40\xb7\x70\xaf\x3c\x9d\x0f\xb3\xb0\x56\x32\x16\x0a\x8f\x80\x5c\xea\x48\x78\x2d\xa3\x30\x0d\x87\x3f\xdc\xc7\xa3\x42\xa0\x3c\x3a\xbf\xf8\x4e\x80\xaf\x74\x8f\xbe\xf7\x1e\x3f\x3e\x2d\xad\xba\xdc\x7e\xcc\x39\xbe\x2f\x77\x11\x09\x91\x63\xdb\x73\x4f\x71\x15\xa2\xe2\x6a\x75\x72\x08\xd3\xfb\x3d\xa1\x50\x02\xfd\x41\xf1\xe4\x78\xa0\x00\x9a\x44\xfb\x20\xa1\xc6\xf7\x07\xc4\xf9\xc1\x40\x64\x12\xc6\xf5\xdd\xfe\x2e\x19\x8f\xb0\x7d\x6e\x0c\x18\x05\x4d\x88\x69\x49\x79\xf5\x60\xcd\x96\xa5\xda\x56\x56\xc0\xab\xc7\x88\x05\xdd\xcf\x66\x43\x11\xfa\x08\x32\x26\xa2\x85\xda\x47\x51\xad\x06\xeb\x18\xac\xf4\xa7\x13\x36\xb5\xda\xd1\xd6\x28\xab\x67\x5e\x7b\x94\xcd\x9d\x08\x45\xf8\x3d\x89\xf6\x23\x45\x2a\xd2\x1f\x2f\x6a\x68\x61\x4f\x72\xc9\x6c\x42\xf7\x36\xdb\x88\xf4\x66\xf6\x45\x17\xb3\x93\x50\x92\x38\x84\xfd\xf6\xa3\xad\x54\x6f\xc6\x3f\xea\x60\x3c\x65\x95\x95\xd4\x64\x35\x65\xb2\x3f\x8a\x7c\x6f\xd9\xbb\xf7\x8e\x58\x74\x24\x5b\xff\xad\x5d\xd1\x02\xfd\x39\x53\xc7\x9c\xcf\x75\x20\xec\x15\xa0\x3a\xc2\x98\xfa\x6c\xaa\xd8\x5f\x17\x72\xbe\x34\x1b\x63\x9f\x19\x55\xca\xda\xa3\xcb\xa9\xea\x8f\xab\x3e\x92\x9c\xf4\x84\xe9\x9c\xe6\x58\x06\xf8\xce\xe0\x34\xef\xee\x40\xb9\xe3\x4a\xa5\xca\x93\x50\x4e\xa6\x04\xf3\x6f\x41\xd6\xf3\xba\xd8\xbf\x93\xa5\xd6\x6c\xdd\x68\xd9\x46\xbe\xd7\xf1\xda\x3c\xf6\x0b\xf1\x7a\x7f\x42\x1a\x73\xbf\x8a\xbc\x3b\x45\xde\x4d\x16\x0d\xde\xae\x5c\xae\x3a\xea\x5b\x2e\x67\x97\xb8\x2b\x10\xfd\x61\x73\xb9\x0e\x50\x7c\x2d\xb9\x5c\x75\x2f\xda\x27\x97\xb3\x37\xdb\x24\x06\x2e\x40\xaa\x4d\xb6\xe4\xbd\x91\xee\xc9\xff\xbf\x58\xce\xef\x9b\x50\x06\x58\xc2\x48\x92\x52\x95\xa9\xc5\x0c\xe6\x62\xc8\x78\x73\xa8\x17\xde\x13\x3b\x0f\x70\x4d\xcc\x1e\x39\xe9\xd6\xaf\xe6\xac\xf4\xac\x2d\x4e\x6a\x17\xe6\x23\x12\xe1\x15\x8c\xd4\xba\xd9\x05\xd7\x15\x32\x22\x48\x8b\x20\x0e\x4b\xe0\x40\x7d\x40\x58\x20\xbd\xdc\x20\x40\x8b\x7b\x34\x5d\x11\xb9\x4e\x16\x9e\xcf\xa2\xb1\x11\x18\x07\x44\xb9\xbb\x48\x94\xa6\x71\x2e\xb7\x45\x78\x87\x84\xe4\x00\x59\xc7\x23\xef\xd1\x93\xad\x8a\x7e\x01\xb6\x01\xe9\x07\x67\x88\x30\x09\xf7\xe3\xa2\x16\xe9\x8f\x87\x8f\x7b\x85\xc9\xf8\xd3\x0f\x36\x6b\x26\xa4\x55\x10\x6e\x01\x4f\x26\xd5\x1f\x42\x4f\x7a\x45\x28\xf7\xaa\x1f\x90\x48\xbc\xb9\xd8\x0f\x20\x25\xd1\x1f\x38\x17\xbd\x82\xa3\xbd\xe9\x0d\x98\xa7\x7b\x03\xf3\xb4\x3f\x60\xbe\xef\x1b\x98\xa7\x3d\x01\x93\x70\xb2\x1f\x2e\x09\x27\xfd\xc1\xf2\xb4\x57\x58\x94\x2f\xfd\xa0\x22\x20\xda\xb4\x28\x34\x5f\x21\x01\x11\xa6\x92\xf8\x28\xbd\x79\x62\x1f\x70\x46\x91\x42\xc5\xa0\x35\x19\x8f\xb7\x4d\xe3\x5e\xbd\x4f\x6d\x6e\x06\xe0\xc4\xd5\x63\xd5\xa1\xff\x05\x74\x25\xd7\x7b\x96\x74\x8d\x50\x6f\x71\xed\xd3\x9a\xb0\xd6\x55\xc0\x2f\x14\xa1\x1f\xb9\x7d\xca\xcc\xfb\xb2\x3e\xd9\xd1\x6a\x4b\x9f\xce\xcf\xca\x26\x67\x55\xae\x73\xa7\xaf\xc7\x5f\x1c\x6e\x48\xb1\xfe\x08\xc5\xe1\x0e\x19\x66\x8c\xa5\x04\x6e\x17\x92\x1a\xc1\x48\x45\x7a\x83\xe3\xaf\x35\x68\x38\xb6\xa9\x6d\x82\x38\xe0\xb0\x82\xf7\x4d\xaf\xfe\x5b\x17\xbc\xcd\x73\x1a\x0a\x83\x85\xfe\xbd\x0b\x83\x5a\xb6\x5b\x61\xd0\xb8\x7f\xb4\x05\xef\x4f\x54\x5f\x34\x80\x7d\xd1\x82\x77\xe3\x32\x3a\xb2\x1a\x66\x69\x12\xca\x35\xcc\xd8\x66\xb4\x85\xf8\x75\x97\xb7\x33\x66\xed\x5f\xd7\x70\x76\x3a\x7a\xeb\xe1\xd1\x87\xab\xd1\x2f\xe7\xa3\xbf\xcd\x1f\x76\x7c\x29\xef\x9e\x95\xfc\x8e\xea\x5e\x61\x97\x5b\xd7\xf6\x46\x60\x0f\xca\x8a\x2f\xc4\x7a\x50\x57\x7c\x0f\xd1\x87\xba\xc2\xee\xd5\x26\x5e\x3b\x60\x1f\xf5\x57\xee\xfd\xd3\x5f\x35\xec\x8f\x58\x45\xb8\x3e\x0e\x43\xb4\xe2\x38\x5e\xe7\x5c\xfc\x01\x09\x00\x94\x1d\x2d\x40\xbd\x3b\x72\x4b\x62\x08\x88\xb9\xae\xaf\xfe\x1a\x3f\xc3\x61\xf8\x56\x8b\x6d\x1f\x50\xe5\x58\x8b\x4b\x65\x3e\xa3\x12\x13\x0a\x5c\x69\x74\xc6\x0c\x2d\x94\xb0\xf8\x10\x69\xb5\x5a\xc3\x10\xc2\x43\x74\x08\xe0\x04\xdb\x1a\x9c\x7b\x43\xd9\x61\xd7\xac\x95\x47\x74\x7e\xaf\x91\xab\xd9\xe7\x20\xf3\x23\xfb\x32\xa0\x8b\x3b\xcf\x58\x14\x61\x1a\x20\x9e\x50\x95\x0f\x61\x94\x3f\xeb\x07\xc4\x36\xc0\x39\x09\x40\x20\x4c\xef\x91\x00\x89\xb0\xd4\xe7\x8b\x29\x1a\x86\xb0\x01\x47\x31\xac\x3e\x0e\x43\xf5\xb1\x58\xc3\x7c\x34\xdd\x55\x2c\xcf\x4e\x65\xb6\x8d\xc3\x84\x3b\x8f\xad\x9a\x49\xa8\x03\x2a\xbb\xbc\x4f\x40\x20\x42\x35\x0c\xdb\x69\xa9\x08\x37\x6f\xf1\xf9\xb0\x37\xc3\xa9\xd9\xe9\xe7\x93\xd3\x4b\xb5\xef\xcf\x66\xe3\xc2\xd6\xff\xc0\x29\x55\x7b\x06\x64\xff\x5c\x22\x2e\x97\x86\xcf\x32\x07\xd0\x9f\xb2\x6f\x63\xf4\xdd\x64\x7d\x73\x19\x73\x40\x24\x30\x77\x5e\xc3\x6a\x22\x5c\xc1\x91\x26\x61\xa5\x94\x68\xfe\x7d\x74\xcb\xb6\x35\x53\x59\xb4\xc1\x9c\xe0\x45\x08\x88\xf1\xec\x5e\x75\xe9\x6b\x9e\x46\xcb\x5c\x41\x56\x6e\x9b\xa3\x75\x5e\x69\xb3\x47\x55\x3c\x6a\x17\xb5\x38\x44\x07\x40\x37\xaf\x71\x2f\x0c\x7d\x4e\x37\x84\x33\x1a\x01\x95\x39\x5e\x7d\x72\x75\xfa\xe6\xef\x0d\x94\xec\xba\x78\x3f\x29\xb8\x2a\x44\xe9\x03\xda\x9f\x48\xbf\x50\x1e\xdf\xb2\x5f\x9a\x8f\x37\x8e\x69\xdd\x6b\x93\xbe\xde\x85\xaf\x0f\xd1\x2e\xdc\x6c\x38\xf4\x91\x49\x72\xec\xb2\x4c\xde\x55\xb9\x87\x9b\xbd\xf6\x93\x4c\xdf\xbe\x8d\xea\x60\x3d\x64\x79\x57\xf5\x0d\xe2\x24\x0c\xcb\xdf\x61\x38\x1e\x66\x3d\xcb\xf9\x1d\x47\x87\x09\x73\xe6\x80\x25\xf0\xac\xd6\x79\x7f\x73\xee\xf8\xee\x03\x39\xe6\x45\x7f\x67\x5a\xda\x6a\x90\x8f\x29\x5a\x14\x5e\xd4\xea\xea\xb5\xfe\xa0\x88\xc9\xb5\xea\xcf\x46\x8a\xc3\x3e\x21\x8a\x19\x77\x67\xf9\x76\xde\xab\xc6\xa1\x05\x4b\x68\xe1\xbb\xa6\xad\xb9\x92\xe9\x86\x35\x13\x0d\xc5\x87\x5a\x82\xb7\xdb\x45\xa7\x7a\xb3\x1c\x8e\xcc\x7f\x4f\x2f\x87\xd2\x8f\xff\x97\x04\xf1\xe9\x65\x4b\xfa\xff\x83\x09\x89\x94\xc3\x43\x71\xaa\x2c\x5e\x10\x1a\x20\xc9\xdc\x0b\x60\x47\xdd\x1f\x95\xeb\x80\x15\xe3\x3e\xeb\xb1\x67\xb2\xdf\x4e\x07\x5f\x5b\xec\x27\xf5\x15\x8a\x7c\x50\x25\xd5\xc8\xd8\x91\xde\x7f\xc3\x41\xc0\x41\x08\x14\xe1\x38\x86\x40\xef\x41\x59\x57\xb6\xed\xb7\x9a\x8b\xcf\x0a\xad\x0c\x9e\x73\x3b\x0f\xeb\x13\xd9\x37\x5e\xfd\xf9\x5f\x0f\xa8\x0c\x80\x73\x14\x73\x58\x92\xf7\x65\x3c\x4d\x29\xf0\x98\xf1\x7c\x95\x34\x96\x48\xbf\x10\x9e\x2c\x91\xbf\x47\x3c\xef\x18\xbf\xfd\xb1\xf2\x45\xb8\xcb\xdb\xff\x30\x7e\xab\x5c\x09\x0a\x5f\xa5\xcb\x35\x1a\x96\xb3\xfe\xc2\xbb\x52\x1d\x1d\xec\x7e\x23\x7a\x52\xe7\x69\xb9\xcc\x5b\x7b\x0c\xa7\x81\x51\xa1\x6d\xde\x47\x7d\xd8\x5d\xfa\xdd\xc6\xf2\x27\xd6\xb3\xda\x97\xec\xd2\x92\x95\xab\xfe\x93\x76\x75\x2e\xfc\xb0\xd8\xae\xf8\x34\xac\x8a\xc6\x6a\x90\x3b\x28\x6c\x0e\x08\x6b\x03\xed\x41\x00\x31\x07\x5f\x45\x7d\x83\x09\x92\x3c\x81\xca\x88\x6e\xf1\x62\x25\x1a\xb9\x5d\x55\x43\xc4\x14\x83\x56\xf1\x71\x8f\xe1\x71\x63\xda\xf1\x2d\x3e\x2e\x0e\xea\x9e\x13\xd9\xbf\x65\x92\xf7\xd8\x2f\xba\x94\xd7\x38\x24\x1f\xd4\x36\x85\xfc\x35\x09\x03\xa4\x85\x4d\x30\x8a\x91\xbe\x53\x96\x25\xec\x09\xe7\x40\x25\x12\x3e\x8b\x75\x63\x7a\xc7\x95\x2d\xd1\x3b\x2d\xfa\x42\x49\xaa\xa0\x7b\x92\x8d\xbd\x51\x43\x55\xcb\x3b\x0f\xbd\x50\xc3\xec\x66\x44\x04\x52\x99\xef\x99\xad\xe2\x1d\xba\x23\x61\xa8\x3f\x67\x14\x22\x89\x20\xf8\x74\xf1\x6f\xe3\x7b\xa2\x7c\x58\xc7\xa2\x41\xff\xe9\xfd\xef\x22\x2b\xaf\xfe\x24\x4e\xde\xd5\x48\xc1\x7a\xbe\xa5\x84\x34\x1c\x35\xea\x6d\x0e\x5a\xe4\x9a\x98\xc1\xaf\xf4\xd8\x22\x09\xad\xd6\x22\x07\x2b\xfc\xfc\xc6\xc2\x66\x8d\xc7\xc5\xc2\x16\x61\xd2\xb4\x7a\x34\x7e\x9e\x18\x89\xc5\x07\x04\x47\xa5\x37\x72\xae\x10\xa9\x34\xa0\x73\xa0\x94\x69\xa9\x0b\x97\x0e\xbe\x14\xe4\xd7\x7d\x78\xd1\x12\xc4\xdc\xc0\xee\x50\x16\x5e\x4c\x3a\xdf\x10\x6f\xbb\x3b\xc3\x68\x74\x1c\x2d\x88\xa9\x79\xdd\x21\x74\xc4\x63\x2e\x28\x1d\xc3\x76\xdc\x4d\x12\x49\x1c\x33\x2e\xd5\xff\x3e\x18\xbe\x78\xf9\xf6\xe6\xd9\xab\xeb\xe7\x6f\x5f\x5f\xfd\x7c\x8a\x44\xb2\x10\x92\x48\xfd\xf9\x03\x12\xf7\x54\xe2\xf7\xe8\x6e\x0d\x1c\x2a\x23\xb3\x2d\x9b\x43\x1c\xe2\xb4\xc4\xa7\xce\x13\xfd\xd3\x42\xea\xa4\x28\x0e\x47\x58\x22\x9e\x50\x49\x22\xf0\xaa\x13\xee\xfa\xa1\xb8\xf4\x87\xd2\xdc\xdc\xd1\x5d\x75\x4e\x6e\x1e\x7b\xe7\xde\x79\xf5\x2e\xed\x30\xbb\x5d\x50\xbe\x35\xab\x7f\xc9\xcf\xc8\x78\x6b\x19\x15\x5e\x22\xd4\x55\xd1\x8a\x95\xb3\x37\xc3\xb4\x66\x36\x9b\x79\x8e\xff\x1d\x5e\x4e\x86\xb3\x99\xae\xab\x5d\x8d\x7e\xc1\xa3\x0f\xa3\xf9\xc3\xe1\xe5\x64\x36\xf3\x4a\x4d\xa7\x7f\x3e\x3d\xbd\xd4\xed\x0f\x0b\xed\xb3\xd9\x68\x36\xf3\xe6\x0f\x4f\x2f\x1f\x14\x7e\x30\xee\xe4\xe3\xc9\xc9\xff\x03\x00\x00\xff\xff\x9a\x70\x85\x72\xe1\x50\x00\x00")

func pkgDataPackageManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_pkgDataPackageManifestSchemaJson,
		"pkg/data/package-manifest.schema.json",
	)
}

func pkgDataPackageManifestSchemaJson() (*asset, error) {
	bytes, err := pkgDataPackageManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/data/package-manifest.schema.json", size: 20705, mode: os.FileMode(420), modTime: time.Unix(1493948801, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/data/package-manifest.schema.json": pkgDataPackageManifestSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"package-manifest.schema.json": &bintree{pkgDataPackageManifestSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
