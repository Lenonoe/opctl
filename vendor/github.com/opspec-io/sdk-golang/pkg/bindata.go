// Code generated by go-bindata.
// sources:
// pkg/data/package-manifest.schema.json
// DO NOT EDIT!

package pkg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgDataPackageManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x71\x6f\xdb\xb8\x15\xff\x3f\x9f\x82\xf0\x15\x83\xb3\xc6\x72\xda\xe6\xba\xcd\x87\x21\x08\x7a\x3d\xac\xc3\xd6\x06\x17\xa0\x03\x2e\x76\x5b\x5a\x7a\xb6\x79\x91\x48\x8d\xa4\x9c\xa6\xb7\x7e\xf7\x81\xa4\x24\x4b\x14\x25\xdb\x0a\xdb\xfa\x7a\xed\x3f\x77\x21\xf9\x9e\xde\xfb\xf1\x47\xf2\xbd\x27\xca\xbf\x1d\x21\x34\x78\x20\xc2\x15\x24\x78\x30\x41\x83\x95\x94\xe9\x64\x3c\xfe\x55\x30\x3a\x32\xad\x01\xe3\xcb\x71\xc4\xf1\x42\x8e\x4e\xcf\xc6\xa6\xed\xbb\xc1\x89\x92\x23\x51\x21\x22\x26\xe3\x31\xe6\xe1\x8a\xac\x21\x60\xa9\x48\x21\x0c\x08\x1b\x9f\x06\x8f\x82\xb3\xb1\xfa\x6b\x9c\xe2\xf0\x06\x2f\x61\x94\x60\x4a\x16\x20\x64\x90\x2b\x57\x0f\x32\xca\x24\x91\x31\x28\x7d\xf9\xd0\x7f\xe7\x23\x4d\x6f\x04\x22\xe4\x24\x95\x84\x51\x35\xa6\xe8\x44\x0b\xc6\x11\x46\xb9\x88\x19\x9a\x72\x96\x02\x97\x04\xc4\x60\x82\x94\x7f\x08\x0d\x28\x4e\xa0\xfc\xab\xa9\xee\x25\x4e\x00\xb1\x05\x92\x2b\x40\x2c\xd5\x6a\xf4\x30\x79\x97\x6a\x93\x84\xe4\x84\x2e\x07\xba\xf9\xa3\xe9\xb5\x54\xb4\x69\xfe\x71\xf3\xe7\xbe\x0f\x20\x34\xcd\xa4\xa8\xea\x7e\xc0\x61\xa1\x46\x7f\x37\x8e\x60\x41\x28\x51\x5a\xc5\x38\xc5\x1c\x27\x75\x51\x96\xc9\xde\xb2\x3c\xa3\xdb\xe5\x44\x68\x19\xbb\x06\x2e\xba\x91\x78\x6d\x46\xb8\x50\x68\x79\x06\x24\xaf\x81\xe7\x8f\x39\xca\x1f\x35\xe0\xf0\xdf\x8c\x70\x50\xcc\xbb\xae\xcc\xed\x11\x42\x33\xdd\x8f\xa3\x48\xcb\xe3\xf8\xb2\xca\x83\x05\x8e\x05\xe4\x4c\x2a\x1f\xb1\xe1\x47\x44\xf8\xa5\x86\xa2\x62\x7f\x49\xc8\xb2\xf3\xa4\x6d\x92\x09\x87\x50\x32\x7e\x87\x34\x9e\x20\x81\x2b\x37\x31\x75\xce\x35\x9b\xff\x0a\xa1\xdc\xb4\x3b\xf8\x5a\xd8\x54\x6b\x68\x1f\xda\xc1\xc7\xb2\xdb\xc5\xb4\xe2\xdf\xc7\x13\x5b\xd5\x02\x67\xb1\x74\xa9\x69\xd0\x5b\x8f\x44\x6b\x1c\x67\xf0\x03\xc2\x88\x43\x8c\x25\x59\x03\x4a\xb1\x5c\x21\x42\x25\xf0\x94\x83\x84\x08\x2d\x38\x4b\xf4\xcc\x47\x84\x23\x42\xd1\xed\x8a\x84\xab\x9c\x0a\x88\x08\xa4\x78\x77\x72\x1f\xab\x89\xb8\x82\x90\xc3\x2e\x66\xbf\x58\x14\x96\xe4\xf3\x46\x04\x12\x46\xb8\xd5\x84\x39\x63\x31\x60\x6a\xd9\x70\xd4\x62\x4f\x27\x0f\x8f\x6c\xf1\x52\x74\x2b\x7d\xf5\xa0\xc6\x1a\x40\x05\x5f\xf2\xbf\x66\xb5\xb5\xb9\x20\x31\xb4\xb3\x7b\xd3\xdb\x46\xef\x9f\x48\x0c\x5e\x99\xad\x1e\xf9\x8d\xda\x9f\x94\xda\x0a\xe2\xaf\x82\xd5\x9a\x2b\x4e\x5a\x67\x02\xb8\xda\xfb\x2f\xb1\x10\xb7\x8c\x47\x17\x99\x5c\x0d\x26\xbf\x6d\x23\xa5\x85\x97\x92\x02\x2a\x49\x88\xf5\x19\xbd\x26\x18\x15\x8a\x11\xa6\x11\x4a\x73\xed\xdb\x59\x5d\x88\xd9\xcc\x76\x9f\x6e\x86\x3f\x2c\xc6\x12\xa2\x2b\x8b\x02\x15\xcc\x07\xe5\xf3\xef\xaf\xb5\x31\x2d\x1b\xc4\xaf\x1d\x6e\xb8\x8c\x28\x26\x62\xa7\x99\xad\xcd\x16\xcd\x92\x39\xf0\x67\x8c\x0a\xc9\x31\xa1\xf5\xe0\xa4\xdc\x8c\x9a\xa3\x7a\x6f\x32\x38\x8e\x5f\x2d\x6c\xd4\xac\xc9\xff\xe7\xd5\xab\x97\xe8\x4a\x47\xa2\xe8\x5a\x0b\xa0\x1b\xb8\x53\x9e\xce\x86\x45\x58\x2b\x19\x8b\x45\x40\x40\x2e\x74\x24\xbc\x92\x49\x9c\x87\xc3\x1f\xee\xd2\x51\x25\x50\x1e\x9d\x9e\x7d\x27\x20\x54\xba\x47\xdf\x07\x8f\x1f\x1f\xd7\x56\x5d\x69\x3f\xe6\x1c\xdf\xd5\xbb\x88\x84\xc4\xb1\xed\xb9\xa7\xb8\x09\x51\x75\xb5\x3a\x39\x84\xe9\xdd\x9e\x50\x28\x01\x7f\x50\x3c\x39\x1c\x28\x80\x66\xc9\x3e\x48\xa8\xf1\xfe\x80\x38\xbd\x37\x10\x85\x84\x71\x7d\xbb\xbf\x0b\xc6\x13\x6c\x9f\x1b\x03\x46\x41\x13\xe2\xba\xa6\xbc\x79\xb0\x16\xcb\x52\x6d\x2b\x4b\xe0\xcd\x63\xc4\x82\xee\x67\xb3\xa1\x08\x7d\x04\x19\x13\xd1\x5c\xed\xa3\xa8\x55\x83\x75\x0c\x36\xfa\xf3\x09\xbb\xb6\xda\xd1\xc6\x28\xab\x67\xd6\x7a\x94\xcd\x9c\x08\x25\xf8\x3d\x49\xf6\x23\x45\x2e\xe2\x8f\x17\x2d\xb4\xb0\x27\xb9\x66\x36\xa1\x7b\x9b\x6d\x44\xbc\x99\x7d\xd6\xc7\xec\x2c\x96\x24\x8d\x61\xbf\xfd\x68\x23\xe5\xcd\xf8\x47\x3d\x8c\xa7\xac\xb1\x92\xba\xac\xa6\x4c\xfa\xa3\xc8\xf7\x96\xbd\x7b\xef\x88\x55\x47\x8a\xf5\xbf\xb3\x2b\x5a\xc0\x9f\x33\x6d\xcc\xf9\x5c\x07\xc2\x5e\x01\xaa\x23\x8c\x69\xcf\xa6\xaa\xfd\x6d\x21\xe7\x4b\xb3\x31\xfa\xcc\xa8\x72\xd6\x1e\x5c\x4e\xd5\x7e\x5c\xf9\x48\x72\xf2\x13\xa6\x77\x9a\x63\x19\x10\x3a\x83\xd3\xb2\xbb\x07\xe5\x0e\x2b\x95\xaa\x4f\x42\x3d\x99\x12\x2c\xbc\x01\xd9\xce\xeb\x6a\xff\x56\x96\x5a\xb3\x75\xa5\x65\x3b\xf9\xde\xc6\x6b\xf3\xd8\x2f\xc4\xeb\xfd\x09\x69\xcc\xfd\x2a\xf2\xee\x1c\x79\x37\x59\x34\x78\xdb\x72\xb9\xe6\xa8\x6f\xb9\x9c\x5d\xe2\x6e\x40\xf4\x87\xcd\xe5\x7a\x40\xf1\xb5\xe4\x72\xcd\xbd\x68\x9f\x5c\xce\xde\x6c\xb3\x14\xb8\x00\xa9\x36\xd9\x9a\xf7\x46\xda\x93\xff\x7f\xb1\x9c\xdf\x37\xa1\x8c\xb0\x84\x91\x24\xb5\x2a\xd3\x0e\x33\x58\x8a\x21\xe3\xcd\x7d\xbd\x08\x9e\xd8\x79\x80\x6b\x62\xf6\xc8\x49\x37\x7e\x75\x67\xa5\x27\xbb\xe2\xa4\x76\x61\x3e\x22\x09\x5e\xc2\x48\xad\x9b\x6d\x70\x5d\x20\x23\x82\xb4\x08\xe2\xb0\x00\x0e\x34\x04\x84\x05\xd2\xcb\x0d\x22\x34\xbf\x43\xd7\x4b\x22\x57\xd9\x3c\x08\x59\x32\x36\x02\xe3\x88\x28\x77\xe7\x99\xd2\x34\x2e\xe5\x36\x08\x6f\x91\x90\x1c\xa0\xe8\x78\x14\x3c\x7a\xb2\x51\xe1\x17\x60\x1b\x10\x3f\x38\x43\x82\x49\xbc\x1f\x17\xb5\x88\x3f\x1e\x3e\xf6\x0a\x93\xf1\xc7\x0f\x36\x2b\x26\xa4\x55\x10\xde\x01\x9e\x42\xca\x1f\x42\x4f\xbc\x22\x54\x7a\xe5\x07\x24\x92\xae\xcf\xf6\x03\x48\x49\xf8\x03\xe7\xcc\x2b\x38\xda\x1b\x6f\xc0\x3c\xdd\x1b\x98\xa7\xfe\x80\xf9\xde\x37\x30\x4f\x3d\x01\x93\x71\xb2\x1f\x2e\x19\x27\xfe\x60\x79\xea\x15\x16\xe5\x8b\x1f\x54\x04\x24\xeb\x1d\x0a\xcd\x17\x48\x40\x82\xa9\x24\x21\xca\x6f\x9e\xd8\x07\x9c\x51\xa4\x50\x31\x68\x4d\xc6\xe3\x4d\xd3\xd8\xab\xf7\xb9\xcd\xdd\x00\x1c\xb9\x7a\xac\x3a\xf4\xbf\x80\x2e\xe5\x6a\xcf\x92\xae\x11\xf2\x16\xd7\x3e\x6d\x09\x6b\x5d\x05\xfc\x4a\x11\xfa\x91\xdb\xa7\xc2\xbc\x2f\xeb\x93\x1d\xad\xee\xe8\xd3\xe9\x49\xdd\xe4\xa2\xca\x75\xea\xf4\xf5\xf0\x8b\xc3\x1d\x29\xd6\x1f\xa1\x38\xdc\x23\xc3\x4c\xb1\x94\xc0\xed\x42\x52\x27\x18\xb9\x88\x37\x38\xfe\xda\x82\x86\x63\x9b\xda\x24\x88\x03\x0e\x4b\x78\xdf\xf5\xea\x7f\xe7\x82\xb7\x79\x4e\x47\x61\xb0\xd2\xbf\x77\x61\x50\xcb\xf6\x2b\x0c\x1a\xf7\x0f\xb6\xe0\xfd\x89\xea\x8b\x06\xb0\x2f\x5a\xf0\xee\x5c\x46\x07\x56\xc3\xac\x4d\x42\xbd\x86\x99\xda\x8c\xb6\x10\xbf\xec\xf3\x76\xc6\xac\xfd\xcb\x16\xce\x5e\x8f\xde\x06\x78\xf4\xe1\x62\xf4\xcb\xe9\xe8\x6f\xb3\x87\x3d\x5f\xca\xbb\x67\xa5\xbc\xa3\xba\x57\xd8\xe5\xd6\xb5\xb9\x11\xe8\x41\x59\xf5\x85\x98\x07\x75\xd5\xf7\x10\x3e\xd4\x55\x76\xaf\x5d\xe2\xb5\x7b\xec\xa3\xe1\xd2\xbd\x7f\x86\xcb\x8e\xfd\x11\xab\x08\x37\xc4\x71\x8c\x96\x1c\xa7\xab\x92\x8b\x3f\x20\x01\x80\x8a\xa3\x05\x68\x70\x4b\x6e\x48\x0a\x11\x31\xd7\xf5\xd5\x5f\xe3\x67\x38\x8e\xdf\x6a\xb1\xcd\x03\x9a\x1c\xdb\xe1\x52\x59\xc8\xa8\xc4\x84\x02\x57\x1a\x9d\x31\xc3\x0e\x4a\x58\x7a\x1f\x69\xb5\x5a\xe3\x18\xe2\xfb\xe8\x10\xc0\x09\xb6\x35\x38\xf7\x86\xba\xc3\xae\x59\xab\x8f\xe8\xfd\x5e\xa3\x54\xb3\xcf\x41\x16\x26\xf6\x65\x40\x17\x77\x9e\xb1\x24\xc1\x34\x42\x3c\xa3\x2a\x1f\xc2\xa8\x7c\xd6\x0f\x88\xad\x81\x73\x12\x81\x40\x98\xde\x21\x01\x12\x61\xa9\xcf\x17\x53\x34\x8c\x61\x0d\x8e\x62\x58\x7b\x1c\x86\xda\x63\xb1\x8e\xf9\xe8\xba\xab\x58\x9f\x9d\xc6\x6c\x1b\x87\x09\x77\x1e\x5b\x2d\x93\xd0\x06\x54\x71\x79\x9f\x80\x40\x84\x6a\x18\x36\xd3\xd2\x10\xee\xde\xe2\xcb\x61\x6f\x86\xd7\x66\xa7\x9f\x4d\x8e\xcf\xd5\xbe\x3f\x9d\x8e\x2b\x5b\xff\x03\xa7\x54\xeb\x19\x50\xfc\x73\x89\xb8\x5c\x1a\x3e\x2b\x1c\x40\x7f\x2a\xbe\x8d\xd1\x77\x93\xf5\xcd\x65\xcc\x01\x91\xc8\xdc\x79\x8d\x9b\x89\x70\x03\x47\x9a\xc5\x8d\x52\xa2\xf9\xf7\xd1\x2d\xbb\xab\x99\xca\xa2\x35\xe6\x04\xcf\x63\x40\x8c\x17\xf7\xaa\x6b\x5f\xf3\x74\x5a\xe6\x0a\xb2\x4a\xdb\x1c\xad\xb3\x46\x9b\x3d\xaa\xe1\xd1\x6e\x51\x8b\x43\x74\x00\x74\xfd\x1a\x7b\x61\xe8\x73\xba\x26\x9c\xd1\x04\xa8\x2c\xf1\xf2\xc9\xd5\xeb\x37\x7f\xef\xa0\x64\xdf\xc5\xfb\x49\xc1\x55\x21\x8a\x0f\x68\x7f\x22\x7e\xa1\x3c\xbc\x65\xbf\x30\x1f\x6f\x1c\xd2\xba\xd7\x26\x7d\xbd\x0b\x5f\x1f\xa2\x7d\xb8\xd9\x71\xe8\x23\x93\xe4\xd8\x65\x99\xb2\xab\x71\x0f\xb7\x78\xed\x27\x99\xbe\x7d\x9b\xb4\xc1\x7a\x9f\xe5\xdd\xd4\x37\x48\xb3\x38\xae\x7f\x87\xe1\x78\x98\xf5\x2c\xe7\x77\x1c\x3d\x26\xcc\x99\x03\xd6\xc0\xb3\x5a\x67\xfe\xe6\xdc\xf1\xdd\x07\x72\xcc\x8b\xfe\xce\xb4\xb6\xd5\xa0\x10\x53\x34\xaf\xbc\xa8\xd5\xd5\x6b\xfd\x41\x11\x93\x2b\xd5\x5f\x8c\x14\xf7\xfb\x84\x28\x65\xdc\x9d\xe5\xdb\x79\xaf\x1a\x87\xe6\x2c\xa3\x95\xef\x9a\x36\xe6\x4a\xa6\x1b\x56\x4c\x74\x14\x1f\x5a\x09\xbe\xdb\x2e\x7a\xad\x37\xcb\xe1\xc8\xfc\xf7\xf8\x7c\x28\xc3\xf4\x7f\x59\x94\x1e\x9f\xef\x48\xff\x7f\x30\x21\x91\x72\x78\x28\x8e\x95\xc5\x73\x42\x23\x24\x99\x7b\x01\x6c\xa9\xfb\xa3\x7a\x1d\xb0\x61\xdc\x67\x3d\xf6\x4c\xf6\xdb\xeb\xe0\xdb\x15\xfb\x49\x7b\x85\xa2\x1c\xd4\x48\x35\x0a\x76\xe4\xf7\xdf\x70\x14\x71\x10\x02\x25\x38\x4d\x21\xd2\x7b\x50\xd1\x55\x6c\xfb\x3b\xcd\xc5\x67\x85\x56\x46\xcf\xb9\x9d\x87\xf9\x44\xf6\x4d\xd0\x7e\xfe\xb7\x03\x2a\x23\xe0\x1c\xa5\x1c\x16\xe4\x7d\x1d\x4f\x53\x0a\x3c\x64\x3c\x5f\x65\x9d\x25\xd2\x2f\x84\x27\xcb\xe4\xef\x11\xcf\x5b\xc6\x6f\x7e\x6c\x7c\x11\xee\xf2\xf6\x3f\x8c\xdf\x28\x57\xa2\xca\x57\xe9\x72\x85\x86\xf5\xac\xbf\xf2\xae\x54\x47\x07\xdb\xdf\x88\x1e\xb5\x79\x5a\x2f\xf3\xb6\x1e\xc3\x79\x60\x54\x69\x9b\xf9\xa8\x0f\xbb\x4b\xbf\x9b\x58\xfe\xc8\x7a\xd6\xee\x25\xbb\xbc\x64\xe5\xaa\xff\xe4\x5d\xbd\x0b\x3f\x2c\xb5\x2b\x3e\x1d\xab\xa2\xb3\x1a\xe4\x0e\x0a\xbb\x03\xc2\xd6\x40\x7b\x10\x41\xca\x21\x54\x51\xdf\x60\x82\x24\xcf\xa0\x31\xa2\x5f\xbc\xd8\x88\x46\x6e\x96\xcd\x10\x31\xc7\x60\xa7\xf8\xd8\x63\x78\xdc\x99\x76\x7c\x8b\x8f\xab\x83\xfa\xe7\x44\xf6\x6f\x99\x94\x3d\xf6\x8b\x2e\xe5\x35\x8e\xc9\x07\xb5\x4d\xa1\x70\x45\xe2\x08\x69\x61\x13\x8c\x62\xa4\xef\x94\x15\x09\x7b\xc6\x39\x50\x89\x44\xc8\x52\xdd\x98\xdf\x71\x65\x0b\xf4\x4e\x8b\xbe\x50\x92\x2a\xe8\x9e\x14\x63\xaf\xd4\x50\xd5\xf2\x2e\x40\x2f\xd4\x30\xbb\x19\x11\x81\x54\xe6\x7b\x62\xab\x78\x87\x6e\x49\x1c\xeb\xcf\x19\x85\xc8\x12\x88\x3e\x5d\xfc\xdb\xf9\x9e\xa8\x1c\xd6\xb3\x68\xe0\x3f\xbd\xff\x5d\x64\xe5\xcd\x9f\xc4\x29\xbb\x3a\x29\xd8\xce\xb7\x9c\x90\x86\xa3\x46\xbd\xcd\x41\x8b\x5c\x13\x33\xf8\x95\x1e\x5b\x25\xa1\xd5\x5a\xe5\x60\x83\x9f\xdf\x58\xd8\xad\xf1\xb0\x58\xd8\x1a\x26\xe5\xb8\x6d\x79\xd9\x5b\xdd\xb3\xf5\xa1\xb9\xdf\xb5\xba\x9a\xb8\xda\xe1\x3b\x2e\xa5\x7d\xba\x58\x8c\xa5\xf7\x08\xc2\x6a\x6f\xfe\x5c\xa1\x58\x6d\x40\xef\x80\xac\xd0\xd2\x16\x96\xdd\xfb\xf2\x51\xd8\xf6\x81\xc7\x8e\x20\x96\x06\xf6\x87\xb2\xf2\x02\xd4\xf9\x26\x7a\xd3\xdd\x1b\x46\xa3\xe3\x60\x41\xcc\xcd\xeb\x0f\xa1\x23\xee\x73\x41\xe9\x18\xb6\xe5\x0e\x94\xc8\xd2\x94\x71\xa9\xfe\xf7\xc1\xf0\xc5\xcb\xb7\x57\xcf\x5e\x5d\x3e\x7f\xfb\xfa\xe2\xe7\x63\x24\xb2\xb9\x90\x44\xea\xcf\x2c\x90\xb8\xa3\x12\xbf\x47\xb7\x2b\xe0\xd0\x18\x59\x1c\x0d\x1c\xd2\x18\xe7\xa5\x44\x75\x6e\xe9\x9f\x30\x52\x27\x52\x75\x38\xc2\x12\xf1\x8c\x4a\x92\x40\xd0\x9c\x70\xd7\x0f\xd2\xe5\x3f\xc8\xe6\xe6\x8e\xee\x6a\x73\x72\xfd\x38\x38\x0d\x4e\x9b\x77\x76\x87\xc5\x2d\x86\xfa\xed\x5c\xfd\x8b\x81\x46\x26\x58\xc9\xa4\xf2\xb2\xa2\xad\x5a\x57\xad\xd0\xbd\x19\xe6\xb5\xb9\xe9\x34\x70\xfc\xef\xf0\x7c\x32\x9c\x4e\x75\xfd\xee\x62\xf4\x0b\x1e\x7d\x18\xcd\x1e\x0e\xcf\x27\xd3\x69\x50\x6b\x3a\xfe\xf3\xf1\xf1\xb9\x6e\x7f\x58\x69\x9f\x4e\x47\xd3\x69\x30\x7b\x78\x7c\xfe\xa0\xf2\xc3\x74\x47\x1f\x8f\x8e\xfe\x1f\x00\x00\xff\xff\x62\x85\x90\x10\x49\x51\x00\x00")

func pkgDataPackageManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_pkgDataPackageManifestSchemaJson,
		"pkg/data/package-manifest.schema.json",
	)
}

func pkgDataPackageManifestSchemaJson() (*asset, error) {
	bytes, err := pkgDataPackageManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/data/package-manifest.schema.json", size: 20809, mode: os.FileMode(420), modTime: time.Unix(1494479829, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/data/package-manifest.schema.json": pkgDataPackageManifestSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"package-manifest.schema.json": &bintree{pkgDataPackageManifestSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

