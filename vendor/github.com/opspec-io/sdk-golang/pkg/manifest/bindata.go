// Code generated by go-bindata.
// sources:
// pkg/manifest/data/pkg-manifest.schema.json
// DO NOT EDIT!

package manifest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgManifestDataPkgManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6f\x73\xdb\x36\xd2\x7f\xef\x4f\x81\x51\x33\x53\xf9\x49\x24\x39\x7f\x9f\xab\x3b\x1d\x4f\x26\x4d\xe7\x7a\xd3\x26\x99\x4b\x93\x9b\xa9\xa5\x74\x20\x72\x25\xa1\x26\x09\x1e\x00\xca\x71\xef\xfa\xdd\x6f\x00\x90\x14\x09\x02\xa4\x48\x91\xb5\x92\x38\x6f\x62\x13\x58\x10\xfb\xdb\x1f\x17\x8b\xc5\x92\xfe\xcf\x09\x42\xa3\x7b\xdc\xdb\x40\x88\x47\xe7\x68\xb4\x11\x22\x3e\x9f\xcd\x7e\xe7\x34\x9a\xe8\xab\x53\xca\xd6\x33\x9f\xe1\x95\x98\x9c\x3d\x99\xe9\x6b\x5f\x8d\x1e\x48\x39\xe2\x67\x22\xfc\x7c\x36\xa3\x31\x8f\xc1\x9b\x12\x3a\x3b\x9b\x3e\x9c\x3e\x9d\xc5\x57\xeb\x49\x88\x23\xb2\x02\x2e\xa6\xe9\x58\x72\x5c\x2d\x2b\x88\x08\x40\x8a\xc7\xd8\xbb\xc2\x6b\xf8\x39\xed\xa9\x5b\x7d\xe0\x1e\x23\xb1\x20\x34\x92\x7d\xb2\x46\xb4\xa2\x0c\x61\x94\x8a\xe8\xae\x31\xa3\x31\x30\x41\x80\x8f\xce\x91\x54\x07\xa1\x51\x84\x43\xc8\x7f\xab\x0e\xf7\x0a\x87\x80\xe8\x0a\x89\x0d\x20\x1a\xab\x61\x54\x37\x71\x13\xab\x29\x71\xc1\x48\xb4\x1e\xa9\xcb\x7f\xea\x56\x63\x08\xd7\xc8\xdf\xef\x7e\x6d\x7b\x03\x12\xc5\x89\xe0\xc5\xb1\xef\x31\x58\xc9\xde\x5f\xcd\x7c\x58\x91\x88\xc8\x51\xf9\x2c\xc6\x0c\x87\x65\x51\x9a\x88\xce\xb2\x2c\x89\x9a\xe5\xb8\x67\x4c\x76\x0b\x8c\xd7\x23\xf1\x5e\xf7\xb0\xa1\xe0\xb8\x07\x84\xef\x81\xa5\xb7\x39\x49\x6f\x35\x62\xf0\xef\x84\x30\x90\x44\xbb\x2c\xd8\xf6\x04\xa1\x85\x6a\xc7\xbe\xaf\xe4\x71\xf0\xa6\xc8\x83\x15\x0e\x38\xa4\x4c\xca\x6f\xb1\xe3\x87\x4f\xd8\x1b\x05\x45\x61\xfe\x39\x21\xf3\xc6\x07\x2e\x23\x13\x06\x9e\xa0\xec\x06\x29\x3c\x41\x00\x93\x6a\xe2\xc8\x6a\x6b\xba\xfc\x1d\x3c\xb1\xbb\x6e\xe1\x6b\x36\xa7\xd2\x05\x77\xd7\x1a\x3e\xe6\xcd\x36\xa6\x65\xff\xfe\x7c\x60\x0e\xb5\xc2\x49\x20\x6c\xc3\x54\xe8\xad\x7a\xa2\x2d\x0e\x12\xf8\x56\x6a\x8c\x97\x9c\x06\x89\x00\x14\x63\xb1\x41\x2b\x46\x43\xc4\x28\x15\x12\x8f\xf8\x6a\x8d\x28\x43\x0c\x02\x2c\xc8\x36\xed\x41\x22\x01\x2c\x66\x20\xc0\xd7\xbd\x25\x39\x7c\xc2\x10\x89\xd0\xf5\x86\x78\x9b\x94\x2d\x88\x70\x24\xa9\xf9\xe0\x10\xc5\x08\x7f\x0b\x1e\x83\x7d\x34\xfb\x71\x95\xcd\x24\x35\x2d\xe1\x88\x6b\x61\xe7\x14\x96\x94\x06\x80\x23\x63\x0e\x27\x8e\xf9\xd4\x52\xf5\xc4\x14\xcf\x45\x1b\x19\xae\x3a\x55\x1e\x13\x94\x51\x2a\xfd\x6d\x51\x7a\x7c\x57\x24\x00\xf7\x03\xb0\x6b\x75\x3d\x01\x3f\x90\x00\x7a\x25\xbf\xbc\xe5\x1d\xfb\x6f\x9b\xfd\xd2\x0a\x9f\x05\xf1\x15\x9d\xac\xcc\x8f\x93\x20\x78\xc1\xc0\x2f\x2d\x96\x2e\xb6\x1a\x28\x49\x39\x88\x04\xc1\x01\x47\x09\x07\x1f\xf9\x89\xb4\x02\xc2\x89\xd8\xc8\xeb\x1e\x56\xeb\xfe\x35\x11\xda\x8e\x9c\x26\xcc\x83\xf4\xe9\x20\x21\x5e\x83\x64\x44\x31\x78\x41\x75\xcf\x44\xc2\x81\x19\x81\x0c\x72\x2f\x9f\x9a\x5a\x34\xc0\x02\xfc\xb7\x06\x3b\x0a\xe6\x18\xc5\x98\xf3\x6b\xca\xfc\x1e\x46\xad\x58\xcc\x6e\x8c\x5c\x0f\xdb\x2c\x32\x23\xed\x65\xf5\x92\x25\xa3\x24\x5c\x02\x7b\x41\x23\x2e\x18\x26\x51\x39\xfc\xc9\x7d\x59\xb5\x57\x67\x1f\x85\x83\xe0\xf5\xca\x84\xcd\xa0\xc8\x3f\xde\xbe\x7e\x85\xde\xaa\x58\x17\x5d\x2a\x01\x74\x05\x37\x52\xd3\xc5\x38\x8b\x93\x05\xa5\x01\x9f\x12\x10\x2b\x15\x5a\x6f\x44\x18\xa4\xf1\xf5\x35\x23\xeb\x8d\x98\x14\x82\xef\xc9\x16\x07\xc4\x57\xbc\x9a\x9c\x9d\x7d\xc5\xc1\x53\x3f\x3e\x9d\x3e\x7a\x74\x5a\x7a\x3e\x73\x6d\x30\x63\xf8\xa6\xdc\x44\x04\x84\x16\x1f\x6a\xb7\x78\x15\xb0\xe2\x73\x6d\xa5\x14\x8e\x6e\x5a\x02\x23\x05\x86\x02\xe6\xf1\xf1\x00\x03\x51\x12\xb6\xc1\x45\xf6\x1f\x0a\x96\xb3\x83\x61\xc9\x24\x34\x10\xcd\xda\xaf\x28\x0b\xb1\xb9\xfa\x8c\x68\x04\x8a\x2c\x97\xa5\xc1\xab\x2b\x78\xf6\x00\x4b\x0f\xb4\x06\x56\x5d\x8c\x0c\x20\xff\xa9\x7d\x0f\x57\x9e\x57\x4f\x11\x2d\x41\x79\x5e\xd7\x08\xc6\x62\x5a\x69\x4f\xcd\x77\x69\x5c\x47\xbb\x49\x19\x2d\x0b\xe7\x82\xb8\xb0\x22\x14\xe2\x8f\x24\x6c\x47\x91\x54\x64\x28\x96\x38\x48\x62\x9a\xbc\xa4\x04\x89\x5a\x2b\xa1\x45\x06\x52\xe2\x49\x17\x25\x92\x40\x90\x38\x80\x76\x7e\x6c\x27\x35\x90\x2a\x0f\x3b\xa8\x12\xd1\xca\x33\x57\xa7\x43\x44\xc5\x50\x64\x7a\x6a\xcc\xbe\xb5\x5f\x2d\xaa\x95\xf9\x8d\xbd\x15\x53\x02\x43\xa9\xe6\xe2\xd8\x5f\xb5\xc8\xb4\x0a\x96\x2d\x61\x93\x7b\xf3\x57\x6c\x77\x05\xc2\xaf\xb4\x7b\xed\x73\x03\x98\x32\xfa\xe8\xb6\x80\xee\x45\xaf\x8f\x0d\x57\xba\x4e\x75\xde\x72\x19\x13\xf0\xac\xc1\x70\xde\xdc\x81\x72\xc7\xb5\xad\x2b\x1b\xa1\xbc\xb1\xd3\x44\x6b\xda\x0e\x54\x7b\x75\x66\x6c\x88\x3f\xbe\x71\xd1\xb3\x69\x09\xdf\x09\x0e\xb5\x70\xb8\xa2\x60\x5b\x30\x54\x58\xc2\xcf\x5c\x4b\x7c\x47\x55\x8b\x82\x43\xa9\xea\xf2\xc5\x9d\x54\x2d\x10\x6f\x6f\x2d\x33\x99\xa1\x14\x34\xd7\xd1\xee\xa1\x7b\xd5\x19\xda\x43\x77\xa7\xdf\xad\xc5\x21\x1e\xdc\xd4\xcf\x1c\x48\x18\xcf\x2c\xaa\xf1\x33\x8e\x65\x78\xdf\x73\xaf\x66\xe8\xb0\x10\xc0\x3a\x3e\x2f\x15\xe1\xa1\x80\xfc\xff\xe3\x07\x72\x8f\xdb\xd6\x27\x19\x2c\xf2\x43\xc1\xf9\xb7\xde\xe1\xb4\x6f\x93\xab\x1b\xe5\xa6\x10\xa1\x12\x24\x58\x87\x38\xc0\x78\xc8\x88\x11\xca\xbb\x60\xbb\x69\x7d\x88\x21\xf2\x21\xf2\x5a\x9a\xb4\x28\x37\x94\x29\xbf\x39\x06\x53\x5a\x6e\xd6\x93\xa5\xf6\x20\x83\x7b\x79\x49\x3b\xd8\x17\x19\x43\xda\x16\x77\xa3\x0a\x57\xda\x73\xe7\xb3\xcc\xa9\x99\xd4\x18\x45\x49\x10\x54\x37\x03\x29\x2d\x5a\x22\xf6\x65\xe4\xad\xab\x91\x7d\x33\x30\x5f\x44\xde\xba\x03\x30\x5f\x46\xae\xa5\x03\x30\x9f\x5a\x6e\xad\x46\xc5\x03\x52\x48\x7a\x54\x77\x0a\xa9\xd8\xee\x4a\x21\xbd\x56\x7d\x7a\x4d\x21\xa5\xfd\x8e\x36\x85\x64\xf3\xde\x87\xa7\x90\xf4\xa8\xb7\x9b\x42\xaa\x7d\x92\x8e\x2b\x85\x54\x36\x42\x39\x85\xc4\xa9\x77\x05\x35\xbc\x2e\xb6\x37\xb2\xd4\xb0\xd6\x5b\x25\x5b\xcb\x77\x17\xaf\xf5\x6d\x6f\x89\xd7\xed\x09\xa9\xa7\xfb\x59\x94\x91\xa4\xc8\xdb\xc9\xa2\xc0\x6b\xca\x37\x56\x7b\xdd\x95\x1f\xa4\x97\x1d\x55\xa0\x15\xc0\xee\xc2\xb8\xae\xc0\x7c\x96\x5b\xa5\xbd\x73\x98\xf6\xf2\x03\xd3\x2d\x27\x31\x30\x0e\xaa\x62\xaf\x84\x85\x96\x1e\x04\x0d\x33\xf7\xd6\xb6\x22\xc2\xc7\x02\x26\x82\x94\x0a\xaa\xf6\xb0\x6e\x2e\x86\xb4\x6e\xfd\xea\x34\x7d\x6c\x1e\x56\xdb\x8c\xd6\xa2\xc4\x62\xa7\xa5\xd1\xb6\xa8\x5b\xaf\x6a\x50\x93\xbe\x9c\x4d\x54\x19\xde\x44\x3e\x61\x4d\xe0\x3d\x47\x5a\x24\xad\xdc\x63\xb0\x02\x06\x91\x07\x08\x73\xa4\x1e\x4c\xf0\xd1\xf2\x06\x5d\xae\x89\xd8\x24\xcb\xa9\x47\xc3\x99\x16\x98\xf9\x44\xaa\xbb\x4c\xe4\x48\xb3\x5c\x6e\x87\x77\x83\x84\x60\x00\x59\xc3\xc3\xe9\xc3\xc7\xbb\x21\xfa\x05\xd8\x04\xa4\x1f\x9c\x21\xc4\xc4\x92\xba\xa8\xf5\x3b\x52\x64\x28\x56\x3e\xea\x15\x34\xad\x5d\x3f\x48\x6d\x28\x17\x46\x5d\xe4\x1e\x60\x65\x52\x43\xe1\xf5\xb8\x57\xbc\x72\x1d\xfb\x81\x8c\xc4\xdb\x27\xed\xe0\x92\x12\x43\x41\xf5\xa4\x57\xa8\x94\x6e\xbd\xc1\xf4\xac\x35\x4c\xcf\x86\x82\xe9\x69\xdf\x30\x3d\xeb\x09\xa6\x84\x91\x76\x28\x25\x8c\x0c\x05\xd2\xb3\x5e\x41\x92\x9a\xf5\x83\x11\x87\x70\xbb\x47\xf5\xe5\x73\xc4\x21\xc4\x91\x20\x1e\x4a\x5f\x0d\x33\x97\x49\x3d\x90\xc4\x48\x63\x77\x3e\x9b\xed\x2e\xcd\x7a\xd5\x3e\x9d\x73\x3d\x00\x27\xb6\x16\xa3\x38\xf3\x27\x88\xd6\x62\xd3\xb2\xe0\x41\x0b\x0d\x14\x47\xbb\x0e\xc0\x1b\x6a\x1d\x1e\xda\x35\xcc\x26\x7b\x4c\x1a\xba\x4e\xa6\x9b\xaa\x39\x1e\x94\x15\xc8\xb2\x71\xf6\x2a\x8f\x4f\x2d\x8f\x5b\xb3\xf9\xfb\xf2\xf2\xf6\x1d\x76\xc2\x69\x5d\x45\x87\x52\x8c\x81\xc0\x71\x15\x0c\x58\x9c\xdd\x6e\x23\x3b\x62\xb0\x86\x8f\xbd\xa4\xf0\xf5\x7d\x6a\x52\x9d\x85\xf6\xd6\xa9\x4e\x25\xdb\x2d\xd5\xa9\xd5\x3f\xda\x14\xfe\x40\x19\x53\x0d\xd8\xad\xa6\xf0\x6b\x1f\xaa\x23\xcb\xca\x96\x8c\x60\xbc\xde\x67\x32\xda\x40\xfc\x4d\x97\xf3\xa6\xda\x8a\xae\xd1\xe5\xe4\xb7\x29\x9e\xfc\xf1\x7c\xf2\xeb\xd9\xe4\x9b\xc5\xfd\x8e\xef\xbb\xd8\xad\x92\xbf\x8a\xde\x2a\x78\xb3\x8f\xb5\x7b\xab\xb7\x87\xc1\x8a\x55\xe2\x3d\x0c\x57\x3c\x31\xec\x61\xb8\xe2\x41\x4d\x1f\xc3\x15\x9c\xe1\x3e\x41\xe4\x01\x6e\xd9\x5b\xdb\xdd\xb1\xb7\xae\x71\xb7\x58\x86\xdd\x1e\x0e\x02\xb4\x66\x38\xde\xe4\xd4\xfe\x16\x71\x00\x94\xad\x5b\x10\x4d\xaf\xc9\x15\x89\xc1\x27\xba\x56\x48\xfe\x36\x7b\x81\x83\xe0\x37\x25\xb6\xbb\x41\x95\xb2\x7b\xbc\x29\xea\xd1\x48\x60\x12\x01\x93\x23\x5a\xc3\x93\x3d\x06\xa1\xf1\x21\xd2\xf2\xe1\x0f\x02\x08\x0e\x19\x83\x03\x23\xd8\x1c\xc1\xea\x6a\xca\x0a\xdb\xac\x56\xee\xd1\xf9\xe0\x27\x1f\xa6\xcd\xba\xe8\x85\x66\x09\xb3\x8d\x3b\x2f\x68\x18\xe2\xc8\x47\x2c\x89\xe4\x26\x0d\xa3\xfc\x5e\xdf\x22\xba\x05\xc6\x88\x0f\x1c\xe1\xe8\x06\x71\x10\x08\x0b\xb5\x5c\xe9\x7c\x68\x00\x5b\xb0\xe4\xf9\xea\x8b\xc7\x6a\x4a\xc7\x3a\xbc\x80\x5c\xb6\x4e\xc5\xda\x5a\x61\xc2\xac\xab\x60\x43\xa5\x9d\xeb\x93\x1f\x04\x38\x22\x91\x82\x61\x67\x96\x8a\x70\x53\x0d\x70\xda\xed\xc3\xf8\x52\x2f\x1c\x8b\xf3\xd3\x0b\xb9\x8c\xcc\xe7\xb3\xc2\x4a\x72\xcf\x55\x62\xe7\x2a\x28\xd4\xff\x6c\x22\x36\x95\xc6\xd7\x24\x08\xd0\x12\xd0\x92\x26\x91\x8f\x04\x45\x1c\x87\xf9\x77\x0a\xb2\xd7\xd4\xab\x1b\xf3\x0a\x84\xaa\x56\xcd\xda\xa9\x52\x6d\xd8\x6e\x86\x3e\x61\x88\xc1\x4a\xbf\x34\x5f\x9a\x55\xf3\xa4\x5c\xe5\x87\xc8\x52\x82\x88\x2a\xd9\x01\x5b\xaf\x8a\x32\xfb\x85\x3e\x16\xd1\x11\x44\xdb\xf7\xb8\x17\x5e\xbe\x8c\xb6\x84\xd1\x28\x84\x48\xa0\x2d\x66\x04\x2f\x83\x5e\x19\x7a\xf9\xe1\xbb\x5b\x20\x22\x89\x10\xf7\x68\xac\x0e\x5d\xd0\xf5\x4c\x13\x33\xc2\xe1\xad\xb2\x51\x33\x2a\x8d\x7c\x32\x5e\xa6\xa1\xbb\xfa\x22\x88\x7b\x6e\x5d\x5d\x5b\x3a\xef\xdb\xa6\xab\x8c\x1c\xfb\x20\xeb\x0f\xa4\x5f\x72\xde\xb9\xcf\xda\x19\x4a\xb3\xcd\xac\xac\xfd\xbc\xbc\xa9\x8a\x47\xba\xd0\xb3\x26\x7e\x42\x7a\xfb\x69\x26\xd3\xf2\xa6\xca\xc7\x07\xb2\xc3\x61\x41\xf3\x8f\xbd\x58\x61\x3d\xc0\x17\x58\xe8\x60\xfd\x9c\xcd\x1e\xb7\xdb\x89\x75\x30\x94\x75\x57\x5e\x02\xcd\xb8\xba\xe8\xcf\xd6\x96\xef\xe1\x20\x8b\x3d\xd4\x07\xfe\x4a\x5e\x06\x79\x38\x92\x4f\x6b\x7e\x96\xae\x4e\x25\xd4\x37\x98\xa8\xd8\xc8\xf6\xac\x27\x6f\x3c\x8a\xa8\x9d\x61\x4c\x99\x3d\xef\x62\x66\x22\x64\xbf\xd4\x79\xe4\x9f\x82\xda\x4d\x57\x50\x75\x61\x43\x79\x4d\x3a\xc8\x49\xec\xfd\x1c\xe8\xa5\xf2\x93\xe3\x89\xfe\xff\xf4\x62\x2c\xbc\xf8\xbf\x89\x1f\x9f\x5e\xec\x49\xfb\xbf\x53\x2e\x90\x54\x78\xcc\x4f\xe5\x8c\x97\x44\x79\x42\x3b\xf1\x1b\xce\x73\x50\x39\x4f\x5b\x99\x5c\x17\xa6\x76\xa6\x99\x4e\x20\x74\x5a\xf3\xf6\xc5\xfe\xdc\x9d\x33\xca\x3b\x55\x76\x6b\x19\x3b\xd2\x1a\x4b\xec\xfb\x0c\x38\x47\x21\x8e\x63\x50\x6b\x10\xce\x9a\x6c\x15\x2e\x68\x1f\x97\x3e\x24\xaa\xc2\x7f\xc9\xcc\x5d\x6c\x9f\xa0\x7e\x98\xba\x57\x7d\x37\x96\xc2\x07\xc6\x50\xcc\x60\x45\x3e\x96\xa1\xd4\xc1\xdd\x91\x42\xf9\x3a\xd9\xa7\xda\xfc\xaf\x86\x92\x26\xe2\x13\x83\xf2\x9a\xb2\xab\xef\x2b\xdf\xde\xb4\x29\xfa\x2f\xca\xae\xa4\x16\x7e\xe1\xfb\x9f\x62\x83\xc6\xe5\x4c\x49\xe1\xd0\x5b\x85\x01\xcd\x47\xdb\x27\x2e\x4d\xcb\x99\x76\xe7\xba\x9b\x46\x40\x85\x6b\x8b\x3e\x52\xf4\xf6\xec\xfb\x2e\x6e\x3f\x31\xee\xd5\xe2\x05\x92\xd8\x99\x33\x4b\x9b\x3a\x27\xcb\x68\x6c\x66\xc9\xea\x5e\xe0\xac\xcb\xa0\xc5\x57\xe6\x41\x54\xd3\x70\x4d\x43\xa2\x43\x82\x4a\x24\xe7\xd3\x79\x61\xdd\x9d\x21\x26\x8c\x4c\xf2\x20\xe8\x2e\xc8\xb4\xdc\xbd\xfa\x25\xe6\xbc\xc5\x3c\xbf\x93\xaa\xe2\x80\xfc\x01\x1c\xfd\xf8\xea\xcd\xbb\x5f\x7e\x7b\xf5\xfc\xe7\x97\x3a\x9c\x7b\xff\xfc\xa7\x77\x2f\xe5\x26\x2b\xad\x24\xfe\x7a\xd7\xe1\x5c\x37\x7e\x3d\x45\x3f\xae\xb2\x7e\x1c\xc9\x7d\xe0\x03\x44\x04\xfa\xf9\xdd\xdb\x5f\xd4\xa7\xcb\x38\x4f\x42\xf0\xd3\x1e\xdf\xa1\x7b\xe3\xdd\x10\x35\x4e\xe5\xd0\xc0\xa4\xf6\x38\x2b\xef\xd6\x71\x13\xdd\xff\xa6\xf7\xc0\xdc\x4a\xcb\xbb\xd5\x7d\x0e\x28\x1f\xf3\xb6\x37\xc4\xd5\xcf\x81\xe7\x4d\x35\x04\xde\x51\xf7\xf5\xbb\x5f\x72\x2e\x17\x08\xac\xa9\x5b\x68\xd4\x04\x2e\xf5\xae\xa1\xb1\xea\x20\x59\x5c\x10\xb8\xa3\xb1\x39\xe2\x71\x65\x5a\x9c\xb1\xc8\x9e\xa7\xda\xf5\x5e\x5c\xae\x68\xa6\x17\xaf\x23\x76\xcb\xe1\x9b\x6b\xda\xff\x9a\x88\x89\xc6\x07\x84\x4a\xa5\x33\x4d\x5b\xc0\x54\xea\xd0\x39\x6c\xca\x46\x71\x05\x4f\x07\xd7\x6c\x79\xae\x37\x76\xf6\x04\x31\x9f\x60\x77\x28\x0b\x47\xbb\xd6\x33\xf6\x5d\x73\x67\x18\xf5\x18\x47\x0b\x62\x3a\xbd\xee\x10\x5a\x96\x55\x1b\x94\x96\x6e\x0d\xc5\x62\x3c\x89\x63\xca\x84\xfc\xf1\xde\x58\xad\x0c\x88\x27\x4b\x2e\x88\x50\xef\xc4\x20\x7e\x13\x09\xfc\x11\x5d\x6f\x80\x41\xde\x23\xcb\xc0\x33\x88\x03\x9c\x66\xf4\xc4\x06\xf4\x69\x0c\xa2\x2b\xbd\xe4\x60\x81\x58\x12\x95\xde\x97\xaa\xfd\x3b\x1c\xe9\xdf\xa1\xb0\x53\x44\x35\xb9\x74\xd9\x3e\x9a\x9e\x4d\xcf\xaa\x95\xd0\xe3\xac\x0c\xa3\x5c\xf3\xcc\x63\xf0\x66\x5a\x66\xba\x11\x61\x70\xea\x9c\x9f\x59\x8a\x24\x9b\x3e\x8c\xd3\xcc\xd8\x7c\x3e\xb5\xfc\x38\xbe\x38\x1f\xcf\xe7\x2a\x7b\xf6\x7c\xf2\x2b\x9e\xfc\x31\x59\xdc\x1f\x5f\x9c\xcf\xe7\xd3\xd2\xa5\xd3\xff\x3b\x3d\xbd\x50\xd7\xef\x17\xae\xcf\xe7\x93\xf9\x7c\xba\xb8\x7f\x7a\x71\xaf\xf0\xf7\x38\x4e\xfe\x3c\x39\xf9\x5f\x00\x00\x00\xff\xff\x4f\x48\x6c\xcd\x2f\x66\x00\x00")

func pkgManifestDataPkgManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_pkgManifestDataPkgManifestSchemaJson,
		"pkg/manifest/data/pkg-manifest.schema.json",
	)
}

func pkgManifestDataPkgManifestSchemaJson() (*asset, error) {
	bytes, err := pkgManifestDataPkgManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/manifest/data/pkg-manifest.schema.json", size: 26159, mode: os.FileMode(420), modTime: time.Unix(1500155397, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/manifest/data/pkg-manifest.schema.json": pkgManifestDataPkgManifestSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"manifest": &bintree{nil, map[string]*bintree{
			"data": &bintree{nil, map[string]*bintree{
				"pkg-manifest.schema.json": &bintree{pkgManifestDataPkgManifestSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
