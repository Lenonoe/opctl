// Code generated by go-bindata.
// sources:
// pkg/manifest/data/package-manifest.schema.json
// DO NOT EDIT!

package manifest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgManifestDataPackageManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x6f\xdb\x38\x12\xfe\x9e\x5f\x31\x70\x03\xac\x73\x8d\xed\xb4\x4d\x7b\x77\x2e\x16\x41\xd0\xed\xe2\x7a\xd8\xbe\xe0\xd2\xf6\x80\x8d\xd3\x82\x96\xc6\x36\x37\x92\xa8\x23\xa9\xa4\xe9\x5e\xff\xfb\x81\xa4\x5e\x29\x4a\x96\x6d\x75\x93\xeb\xb6\x5f\x76\x23\x72\x46\x33\x0f\x1f\x0d\x87\x43\xd2\xbf\xef\x01\x0c\xf6\x85\xb7\xc2\x90\x0c\xa6\x30\x58\x49\x19\x4f\x27\x93\xdf\x04\x8b\x46\xe6\xe9\x98\xf1\xe5\xc4\xe7\x64\x21\x47\x47\xc7\x13\xf3\xec\xde\xe0\x50\xc9\x51\x3f\x13\x11\xd3\xc9\x84\xc5\x22\x46\x6f\x4c\xd9\xe4\x68\xfc\x60\x7c\x3c\x89\x2f\x97\xa3\x90\x44\x74\x81\x42\x8e\x53\x5d\x4a\xaf\x91\x95\x54\x06\xa8\xc4\x63\xe2\x5d\x92\x25\xbe\x4c\x7b\x9a\x56\x1f\x85\xc7\x69\x2c\x29\x8b\x54\x9f\xac\x11\x16\x8c\x03\x81\x54\xc4\x74\x8d\x39\x8b\x91\x4b\x8a\x62\x30\x05\xe5\x0e\xc0\x20\x22\x21\xe6\x7f\xd5\xd5\xbd\x22\x21\x02\x5b\x80\x5c\x21\xb0\x58\xab\xd1\xdd\xe4\x4d\xac\x4d\x12\x92\xd3\x68\x39\xd0\x8f\xbf\x98\x56\x4b\x45\x93\xe6\x9f\x8a\x3f\x37\x7d\x01\x8d\xe2\x44\x8a\xb2\xee\x7d\x8e\x0b\xd5\xfb\xde\xc4\xc7\x05\x8d\xa8\xd2\x2a\x26\x31\xe1\x24\xac\x8a\xb2\x44\x6e\x2d\xcb\x93\x68\xbd\x9c\xf0\x2c\x63\xaf\x90\x8b\x76\x24\xde\x9b\x1e\x2e\x14\x1a\xde\x81\xe1\x7b\xe4\xe9\x6b\xf6\xd2\x57\x0d\x38\xfe\x27\xa1\x1c\x15\xd1\xce\x4b\x63\xbb\x07\x70\xa1\xdb\x89\xef\x6b\x79\x12\xbc\x29\xf3\x60\x41\x02\x81\x29\x93\xf2\x57\x14\xfc\xf0\x29\x7f\xa3\xa1\x28\xd9\x9f\x13\x32\x6f\x3c\x6c\x1a\x64\xca\xd1\x93\x8c\xdf\x80\xc6\x13\x25\x72\xe5\x26\x89\x9c\x63\xcd\xe6\xbf\xa1\x27\x8b\xe7\x0e\xbe\x66\x36\x55\x1e\x34\x77\x6d\xe1\x63\xde\xec\x62\x5a\xf6\xef\xcb\xa1\xad\x6a\x41\x92\x40\xba\xd4\xd4\xe8\xad\x7b\xc2\x15\x09\x12\x7c\x0a\x04\x38\x06\x44\xd2\x2b\x84\x98\xc8\x15\xd0\x48\x22\x8f\x39\x4a\xf4\x61\xc1\x59\xa8\x47\xde\xa7\x1c\x68\x04\xd7\x2b\xea\xad\x52\x2a\x00\x15\xa0\x78\x77\xb8\x8b\xd5\x54\x9c\xa1\xc7\xb1\x8b\xd9\x2f\x16\x99\x25\xe9\xb8\x51\x01\xc2\x08\x37\x9a\x30\x67\x2c\x40\x12\x59\x36\xec\x35\xd8\xd3\xca\xc3\x3d\x5b\x3c\x17\x5d\x4b\x5f\xdd\xa9\xf6\x0d\x40\xc6\x97\xf4\xaf\x8b\xca\xb7\xb9\xa0\x01\x36\xb3\xbb\x68\x6d\xa2\xf7\xcf\x34\xc0\x5e\x99\xad\x5e\xf9\x9d\xda\x5f\x95\xda\x0a\xe2\x6f\x82\xd5\x9a\x2b\x4e\x5a\xc7\x49\x10\x3c\xe3\xe8\x8b\xc1\xf4\xf7\x75\x4c\xb4\x40\x52\x62\x18\x49\x4a\x02\x01\x89\x40\x1f\xfc\x44\x0d\x02\x90\x44\xae\xd4\x73\x8f\xe8\x09\xfb\x9a\x4a\x33\x8c\x82\x25\xdc\xc3\x94\xf9\x34\x24\x4b\x04\xc6\x2b\x59\x07\xb4\xf1\x3d\x11\xc8\xad\x0c\x04\x9a\xe7\x3d\xc3\x2c\x16\x10\x89\xfe\x99\x45\x8e\xd2\x68\x0c\x62\x22\xc4\x35\xe3\x7e\x0f\x5a\x6b\x03\x56\x8c\xc5\xb9\xc3\x0d\x97\x11\xd9\x10\x75\x1a\xf3\xca\x38\x46\x49\x38\x47\xfe\x8c\x45\x42\x72\x42\xa3\x6a\xda\x92\x87\xa9\x7a\xaf\xad\xc3\x0f\x09\x82\xd7\x0b\x1b\x35\x8b\x21\xff\x3c\x7b\xfd\x0a\xce\x74\x8e\x0a\xe7\x5a\x00\x2e\xf1\x46\x79\x7a\x31\xcc\xf2\x5b\xc9\x58\x20\xc6\x14\xe5\x42\xa7\xc4\x2b\x19\x06\x69\x5e\xfc\xf9\x26\x1e\x95\x32\xe6\xd1\xd1\xf1\x3d\x81\x9e\xd2\x3d\x7a\x3c\x7e\xf8\xf0\xa0\xf2\x3d\xe6\xf6\x13\xce\xc9\x4d\xb5\x89\x4a\x0c\x1d\x01\xd1\x3d\xc4\x75\x88\xca\xdf\xb1\x93\x43\x24\xba\xd9\x10\x0a\x25\xd0\x1f\x14\x8f\xee\x0e\x14\x18\x25\xe1\x26\x48\xa8\xfe\xfd\x01\x71\xb4\x33\x10\x99\x84\x71\x7d\xbd\xbf\x0b\xc6\x43\x62\xcf\x28\x03\x16\xa1\x26\xc4\x79\x45\x79\x7d\xca\xcd\x3e\x4b\x15\x56\x96\xc8\xeb\x13\x8c\x05\xdd\xbf\x4c\x40\x11\x3a\x9c\x1a\x13\x61\x8e\x3a\x9c\x36\x69\xb0\x26\xc8\x5a\x7b\x3a\x60\xe7\xd6\x73\x28\x8c\xb2\x5a\x2e\x1a\x27\xb9\x0b\x27\x42\x21\xf9\x44\xc3\xcd\x48\x91\x8a\xf4\xc7\x8b\x06\x5a\xd8\x83\x5c\x31\x9b\x46\x1b\x9b\x6d\x44\x7a\x33\xfb\x78\x1b\xb3\x93\x40\xd2\x38\xc0\xcd\xe2\x51\x21\xd5\x9b\xf1\x0f\xb6\x30\x3e\x62\xb5\x2f\xa9\xcd\xea\x88\xc9\xfe\x28\xf2\xd8\xb2\x77\xe3\x88\x58\x76\x24\xfb\xfe\x3b\xbb\xa2\x05\xfa\x73\xa6\x89\x39\x7f\xd4\x84\xb0\x51\xea\xea\x48\x63\x9a\xd7\x59\xe5\xf6\xa6\xbc\xf4\x95\x09\x8c\x7d\xae\xb5\x52\xd6\xde\xb9\xd5\x56\xf3\x74\xd5\xc7\xf2\x27\x9d\x61\xb6\x5e\x00\x59\x06\x78\xce\xe4\x34\x6f\xde\x82\x72\x77\x6b\x91\x55\x1d\x84\xea\x32\x4b\x30\xef\x12\x65\x33\xaf\xcb\xed\x6b\x59\x6a\x8d\xd6\x99\x96\x6d\xe5\x7b\x13\xaf\xcd\x6b\x6f\x89\xd7\x9b\x13\xd2\x98\xfb\x4d\xac\xc8\x53\xe4\xdd\x64\xd1\xe0\xad\x5b\xcb\xd5\x7b\x7d\x5f\xcb\xd9\xc5\xef\x1a\x44\x7f\xda\xb5\xdc\x16\x50\x7c\x2b\x6b\xb9\x7a\x2c\xda\x64\x2d\x67\x07\xdb\x24\x46\x2e\x50\xaa\x20\x5b\xf1\xde\x48\xf7\xe4\xff\x5f\x2d\xe7\x37\x5d\x50\xfa\x44\xe2\x48\xd2\x4a\x95\xa9\xc3\x08\xe6\x62\x60\xbc\xd9\xd5\x8b\xf1\x23\x7b\x1d\xe0\x1a\x98\x0d\xd6\xa4\x85\x5f\xed\xab\xd2\xc3\xae\x38\xa9\x28\xcc\x47\xba\x18\x39\x52\xdf\xcd\x3a\xb8\x4e\xc1\x88\xa4\xf5\x4b\x8e\x0b\xe4\x18\x79\x08\x44\x80\xfe\xdc\xd0\x87\xf9\x0d\x9c\x2f\xa9\x5c\x25\xf3\xb1\xc7\xc2\x89\x11\x98\xf8\x54\xb9\x3b\x4f\x94\xa6\x49\x2e\x57\x20\xbc\x46\x42\x72\xc4\xac\xe1\xc1\xf8\xc1\xa3\x42\x45\xbf\x00\xdb\x80\xf4\x83\x33\x86\x84\x06\x9b\x71\x51\x8b\xf4\xc7\xc3\x87\xbd\xc2\x64\xfc\xe9\x07\x9b\x15\x13\xd2\x2a\x08\x77\x80\x27\x93\xea\x0f\xa1\x47\xbd\x22\x94\x7b\xd5\x0f\x48\x34\xbe\x3a\xde\x0c\x20\x25\xd1\x1f\x38\xc7\xbd\x82\xa3\xbd\xe9\x0d\x98\x27\x1b\x03\xf3\xa4\x3f\x60\x1e\xf7\x0d\xcc\x93\x9e\x80\x49\x38\xdd\x0c\x97\x84\xd3\xfe\x60\x79\xd2\x2b\x2c\xca\x97\x7e\x50\x11\x18\x5e\x75\x28\x34\x9f\x82\xc0\x90\x44\x92\x7a\x90\x9e\x49\xb1\x27\x38\xa3\x48\xa1\x62\xd0\x9a\x4e\x26\xc5\xa3\x49\xaf\xde\xa7\x36\xb7\x03\xb0\xe7\x6a\xb1\xea\xd0\xbf\x60\xb4\x94\xab\x0d\x4b\xba\x46\xa8\xb7\xbc\xf6\x49\x43\x5a\xeb\x2a\xe0\x97\x8a\xd0\x0f\xdc\x3e\x65\xe6\xdd\xae\x4f\x76\xb6\xda\xd1\xa7\xa3\xc3\xaa\xc9\x59\x95\xeb\xc8\xe9\xeb\xdd\x2f\x0e\xb7\x2c\xb1\xfe\x0c\xc5\xe1\x2d\x56\x98\x31\x91\x12\xb9\x5d\x48\x6a\x05\x23\x15\xe9\x0d\x8e\xbf\x35\xa0\xe1\x08\x53\xc5\x02\x71\xc0\x71\x89\x9f\xda\xb6\xfe\x3b\x17\xbc\xcd\x7b\x5a\x0a\x83\xa5\xf6\x8d\x0b\x83\x5a\x76\xbb\xc2\xa0\x71\xff\xce\x16\xbc\xbf\x52\x7d\xd1\x00\x76\xab\x05\xef\xd6\xcf\xe8\x8e\xd5\x30\x2b\x83\x60\x9d\x2b\xb2\x19\x6d\x21\xfe\x66\x9b\xdd\x19\xf3\xed\xbf\x69\xe0\xec\xf9\xe8\xe3\x98\x8c\x3e\x9f\x8e\x7e\x3d\x1a\xfd\xfd\xe2\xfe\x96\x9b\xf2\xee\x51\xc9\x4f\xaf\x6e\x94\x76\xb9\x75\x15\x67\x05\x7b\x50\x56\xde\x10\xeb\x41\x5d\x79\x1f\xa2\x0f\x75\xa5\xe8\xd5\x25\x5f\xdb\x21\x8e\x7a\x4b\x77\xfc\xf4\x96\x2d\xf1\x91\xa8\x0c\xd7\x23\x41\x00\x4b\x4e\xe2\x55\xce\xc5\xa7\x20\x10\x21\x9b\x5a\x30\x1a\x5f\xd3\x4b\x1a\xa3\x4f\xcd\xb9\x7d\xf5\xd7\xe4\x19\x09\x82\x8f\x5a\xac\x78\x41\x9d\x63\x1d\x0e\x95\x79\x2c\x92\x84\x46\xc8\x95\x46\x67\xce\xd0\x41\x09\x8b\x77\x91\x56\x5f\x6b\x10\x60\xb0\x8b\x0e\x81\x9c\x12\x5b\x83\x33\x36\x54\x1d\x76\x8d\x5a\xb5\xc7\xd6\xfb\x1a\xb9\x9a\x4d\x26\x32\x2f\xb4\x0f\x03\xba\xb8\xf3\x8c\x85\x21\x89\x7c\xe0\x49\xa4\xd6\x43\x04\xf2\x77\x3d\x05\x76\x85\x9c\x53\x1f\x05\x90\xe8\x06\x04\x4a\x20\x52\xcf\x2f\xa6\x68\x18\xe0\x15\x3a\x8a\x61\xcd\x79\x18\x34\xe7\x62\x2d\xe3\xd1\x76\x56\xb1\x3a\x3a\xb5\xd1\x36\x0e\x53\xee\x9c\xb6\x1a\x06\xa1\x09\xa8\xec\x58\x3f\x45\x01\x34\xd2\x30\x14\xc3\x52\x13\x6e\x0f\xf1\x79\xb7\x0f\xc3\x73\x13\xe9\x2f\xa6\x07\x27\x2a\xee\xcf\x66\x93\x52\xe8\xdf\x77\x4a\x35\xce\x01\xd9\x3f\x97\x88\xcb\xa5\xe1\x35\x0d\x02\x98\x23\xcc\x59\x12\xf9\x20\x19\x08\x12\xe6\x27\x9a\xb3\x13\xad\xf5\x35\x70\x0d\xc2\x28\x09\x6a\x55\x44\xf3\xef\x8b\x5b\xb6\xab\x85\x3e\xe5\xc0\x71\x61\xce\xd7\x56\xac\x5a\x6f\x94\x2b\xb5\xca\xcd\x72\x3c\xbd\xa8\x3d\xb3\x7b\xd5\x9c\xe9\x96\xab\x38\x44\x07\x18\x5d\xbd\x27\xbd\xf0\xf2\x79\x74\x45\x39\x8b\x42\x8c\x24\x5c\x11\x4e\xc9\x3c\xe8\x95\xa1\xe7\x1f\x7e\xbc\x05\x22\xd2\x08\x84\xc7\x62\xbd\x33\x01\xd7\x13\x43\xcc\x88\x84\xb7\xca\x46\xc3\xa8\x34\x55\xc9\x78\x99\xe6\xda\xfa\x62\x40\xb3\x6d\xdb\x86\xb6\xd4\xee\xdb\xa6\xab\x4a\xf5\xfa\x20\xeb\xcf\xb4\x5f\x72\x7e\x0f\x9f\xad\x16\xea\x7b\x1f\xdf\x64\xfc\xd4\x19\xc8\x36\x84\x6c\xc9\x98\xc0\xac\x10\xed\x9a\x56\xde\x54\x3b\xc4\x9c\xed\x99\x4a\x96\xdf\x04\x71\xc2\xba\xc3\xd7\xef\x20\x80\xeb\xaa\x8b\xe3\x6d\x76\x66\x9c\x0b\x75\x7e\xc7\x0b\x7d\x2b\x46\xde\x34\xbc\xc6\x2e\x3d\xa4\xbd\x27\xd9\xc5\x10\x73\x97\x46\x32\x50\xba\x8a\xb4\xf1\x29\xf8\x18\x73\xf4\x94\xd7\x87\xaa\x0f\xe4\xa6\x01\x8d\x84\x44\xe2\xbb\x41\x5c\x53\x78\x4f\x6d\xca\x54\x0f\xa6\x20\x79\x82\x9d\x9d\xcd\x4a\x2c\x5d\x5c\x35\x7d\x27\xd9\x6d\x97\x3b\xea\xe8\xda\x8f\xcf\x59\x0c\x29\xb5\xd6\x37\xcd\xfb\xfb\x7e\x1d\x17\xa0\xc0\x81\xb4\xbe\x8a\x5d\x99\x2b\xc0\x23\x91\x8a\xb9\xf9\xb1\x01\xbd\x8d\xa3\xef\xdc\x31\xb9\x52\xed\x59\x4f\xb1\xdb\x2d\xbb\x98\x71\x77\xb9\xcb\x2e\x00\xa9\x7e\xe9\x14\x90\x5f\xfd\x2b\xcc\x95\x4c\x3f\x58\x31\xd1\x52\x85\x6b\x0c\x56\xdd\xa6\xc1\x73\x3d\xdb\x0d\x47\xe6\xbf\x07\x27\x43\xe9\xc5\xff\x4d\xfc\xf8\xe0\xa4\x63\x28\xfb\x07\x13\x12\x94\xc3\x43\x71\xa0\x2c\x9e\x53\x3d\x9f\x6d\x4f\xcf\xa2\x20\x5e\x33\xce\x11\x7f\xbe\xde\x34\x61\xca\x40\x5b\x65\x2e\x5d\xb1\x9f\x36\x97\xea\xf2\x4e\xb5\x35\x77\xc6\x8e\xf4\x20\x28\xf1\x7d\x8e\x42\x40\x48\xe2\xd8\x84\x12\x92\x35\xb9\x0e\xf3\x40\x97\x69\xfa\x6b\xa2\x2a\xfd\xe7\xdc\xae\x45\xf4\x09\xea\x87\x71\x73\xee\xd6\x8c\xa5\xf4\x91\x73\x88\x39\x2e\xe8\xa7\x2a\x94\x26\x45\xbf\xa3\x50\xbe\x4e\x5a\x77\x08\x6e\x09\x4a\x96\xc8\xff\x33\x28\xaf\x19\xbf\xfc\xa9\xf6\x2b\x09\x2e\x47\xff\xcd\xf8\xa5\xf2\xc2\x2f\xfd\x52\x83\x5c\xc1\xb0\x5a\xef\x2a\x9d\x12\xd0\xf3\xf9\xfa\xb3\x00\x7b\x4d\x9e\x56\x37\x38\x1a\xe7\xdd\x34\xab\x2d\x3d\xbb\xe8\x63\x67\xc4\xbd\xe9\x51\xac\xbe\xf6\xac\x77\x75\x2f\x56\xa7\xc5\x5a\x57\xe5\x33\x6d\xda\xba\xe4\xc9\x62\xbb\xd6\xd9\xf2\x41\xb4\xd6\x41\xdd\x19\x7d\x7b\x36\xdf\xb8\x4a\xaa\x27\x5e\xbb\x25\x19\x97\xcb\x7a\xca\x99\x6a\xe8\xb4\x84\xe9\x71\x05\x03\xca\x98\xad\x67\xfc\x62\x4f\x39\xe1\x74\x94\x67\x67\xb7\xb4\xa2\xb9\xd3\xb9\x6f\xed\xa7\x7c\xf2\x16\x7b\x49\xa5\x5c\x25\x01\xfd\x8c\x02\x5e\xbc\x7a\xf3\xee\xed\xc7\x57\xa7\x2f\x9f\x9b\x2c\xf3\xfd\xe9\x2f\xef\x9e\xab\xf5\x7c\x7a\x5e\xfb\x87\xa2\xc3\xd4\x34\xfe\x30\x86\x17\x8b\xac\x9f\x80\x28\x09\x82\x43\xa0\x12\x5e\xbe\x3b\x7b\xab\x6f\xdb\x0a\x91\x84\xe8\xa7\x3d\x7e\x84\xfd\x61\xa1\xa2\x25\xd6\xed\x9a\x2f\xb5\x6e\x6e\xe6\xdd\xb6\xac\xd0\xf4\x5f\x51\xd9\xb1\x70\xb7\xe1\xdb\xda\xee\xc1\xe5\x3a\x1d\x4f\xff\xd0\xda\x4b\xfd\xf7\xa4\xf2\xa6\x16\x02\x17\xd4\x7d\xfd\xee\x6d\xce\xe5\x12\x81\x0d\x75\x4b\x8d\x86\xc0\x95\xde\x2d\x34\xd6\x1d\x14\x8b\x4b\x02\xdf\x69\x6c\x6b\xbc\x5b\x45\xbd\xc6\x14\x29\xc5\x6d\xcd\x11\x87\x72\x10\xd7\x53\xe9\x66\x87\x49\x2b\xe2\xea\x33\x6f\x39\x8a\xf9\xf5\xf2\x30\x16\xef\x90\x80\x55\xf6\xbb\x5d\x69\x58\xa5\xc3\xd6\xc9\x58\xa6\xa5\x29\x25\xdb\xf9\xc8\x9d\xd7\x74\xad\xa9\x23\x88\xb9\x81\xdb\x43\x59\xda\xf6\x77\x9e\xbf\x28\x9a\xb7\x86\xd1\xe8\xb8\xb3\x20\xa6\xe6\x6d\x0f\xa1\x63\x56\x74\x41\xe9\xe8\xd6\x7c\xb2\x45\x2f\x37\x45\x12\xc7\x8c\x4b\xf5\xbf\xfb\x43\x1d\xd8\x41\x24\x73\x21\xa9\xd4\x97\x8a\x40\xdc\x44\x92\x7c\x82\xeb\x15\x72\xcc\x7b\x64\xbb\x33\x1c\xe3\x80\xa4\x75\x42\xb9\x42\xb3\x53\x07\x6c\x61\x66\x0c\x22\x81\x27\x51\xe5\x8a\x59\xeb\xef\x30\xa6\xbf\x43\xe8\xa6\x88\x6e\x6a\xf2\xe5\xea\xe1\xf8\x68\x7c\x54\x3f\x90\x3e\xcc\x8e\xe8\x54\x8f\x9e\x8b\x18\xbd\x89\x91\x19\xaf\x64\x18\x1c\x34\xda\x67\x9f\x2b\x53\x4d\x1f\x86\x69\xbd\x6d\x36\x1b\x3b\xfe\x77\x78\x32\x1d\xce\x66\xba\x26\x77\x3a\xfa\x95\x8c\x3e\x8f\x2e\xee\x0f\x4f\xa6\xb3\xd9\xb8\xf2\xe8\xe0\x2f\x07\x07\x27\xfa\xf9\xfd\xd2\xf3\xd9\x6c\x34\x9b\x8d\x2f\xee\x1f\x9c\xec\x97\x7e\x8f\x71\xef\xcb\xde\xde\xff\x02\x00\x00\xff\xff\x20\xe8\xe8\x6f\x2f\x54\x00\x00")

func pkgManifestDataPackageManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_pkgManifestDataPackageManifestSchemaJson,
		"pkg/manifest/data/package-manifest.schema.json",
	)
}

func pkgManifestDataPackageManifestSchemaJson() (*asset, error) {
	bytes, err := pkgManifestDataPackageManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/manifest/data/package-manifest.schema.json", size: 21551, mode: os.FileMode(420), modTime: time.Unix(1496590633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/manifest/data/package-manifest.schema.json": pkgManifestDataPackageManifestSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"manifest": &bintree{nil, map[string]*bintree{
			"data": &bintree{nil, map[string]*bintree{
				"package-manifest.schema.json": &bintree{pkgManifestDataPackageManifestSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
