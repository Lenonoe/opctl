// Code generated by go-bindata.
// sources:
// github.com/opspec-io/spec/spec/op.yml.schema.json
// DO NOT EDIT!

package manifest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _githubComOpspecIoSpecSpecOpYmlSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6b\x6f\xdc\x36\xb3\xfe\xee\x5f\x41\xb8\xc6\xe9\xfa\xc4\xab\xb5\x73\x3b\xa7\x2e\x0a\xc3\xc8\x05\x27\x07\x6d\x12\x34\x4d\x5e\xa0\xf6\xa6\xe0\x4a\xb3\xbb\xac\x25\x51\x25\x29\x3b\x6e\xdf\xfc\xf7\x17\x24\x75\x17\xa9\x9b\xa5\xd8\xb9\xf8\x43\x1b\x8b\x9c\x11\xe7\xe1\xc3\xe1\x70\x48\xd1\xff\xec\x20\xb4\xbb\xc7\xdd\x2d\x04\x78\xf7\x18\xed\x6e\x85\x88\x8e\x17\x8b\x3f\x39\x0d\xe7\xfa\xa9\x43\xd9\x66\xe1\x31\xbc\x16\xf3\xc3\x87\x0b\xfd\xec\xbb\xdd\x03\x29\x47\xbc\x54\x84\x1f\x2f\x16\x34\xe2\x11\xb8\x0e\xa1\x8b\x43\xe7\xc8\x79\xb4\xa0\x91\x73\x1d\xf8\x4e\xa2\x45\x6a\xd4\x52\x82\x08\x1f\xa4\xa0\xae\xa0\x1f\x7a\xc0\x5d\x46\x22\x41\x68\x28\x8b\x9e\xc2\x9a\x84\xc0\x11\x0e\x11\x8d\x74\x8d\x88\xd1\x08\x98\x20\xc0\x77\x8f\x91\x6c\x36\x42\xbb\x21\x0e\x20\xfb\xad\xae\xe5\x25\x0e\x00\xd1\x35\x12\x5b\x48\xd5\xa8\x6a\xe2\x3a\x52\x0d\xe0\x82\x91\x70\xb3\xab\x1e\x7f\xd4\xa5\x15\x15\x36\xcd\x4f\xf3\x5f\xfb\xbe\x80\x84\x51\x2c\x78\x51\xf7\x1e\x83\xb5\xac\xfd\xdd\xc2\x93\x66\x13\xa9\x95\x2f\x22\xcc\x70\x50\x16\xa5\xb1\x18\x2c\xcb\xe2\xb0\x5d\x8e\xbb\x95\xc6\x5e\x02\xe3\xcd\x48\xbc\xd3\x35\x4c\x28\x58\xde\x01\xc1\x3b\x60\xc9\x6b\x76\x92\x57\xed\x32\xf8\x2b\x26\x0c\x24\xa1\xce\x0a\x7d\xbb\x83\xd0\x52\x95\x63\xcf\x53\xf2\xd8\x7f\x5d\xe4\xc1\x1a\xfb\x1c\x12\x02\x65\xaf\xc8\xf9\x81\x19\xc3\xd7\xaf\x15\x18\x05\x0b\x32\x02\x16\x8a\x0f\x2c\xe6\x9d\xca\x2a\x48\xe1\x09\x02\x98\x34\x33\xe7\x64\xa9\xaf\xe9\xea\x4f\x70\x45\xfe\xdc\xc0\xd7\xbc\x4d\xa5\x47\xf6\xca\x0d\x8c\xcc\x8a\x4d\x5c\x4b\x7f\x3e\x1e\x54\x55\xad\x71\xec\x8b\x26\x35\xba\x79\x8d\x5a\x08\x7f\x03\x2e\x03\xa3\x9a\x0a\x7c\x2f\x34\x2b\x94\x52\x44\x38\xe2\x5a\xf0\xc0\xf6\xf6\x15\xa5\x3e\xe0\xb0\xf9\xfd\x2e\x0d\xb9\x60\x98\x84\xa2\x8e\x96\x95\x76\xaa\x09\x4f\x0a\x92\xe5\x57\xec\x58\x5e\xd7\x48\xbc\x9d\xaa\x78\x26\xda\xca\x57\x55\xa9\x46\x7a\x94\x13\x24\xf9\x7d\x59\x1a\x8e\x35\x23\xac\xac\x2e\x56\x1a\x4c\xd5\x00\x7f\x78\x21\x20\xa8\xa2\x5c\xed\xe4\xff\x7f\xf3\xea\x25\x7a\xa3\xdc\x3c\x3a\x4b\x65\xd0\x05\x5c\x5f\x51\xe6\x2d\x67\xe9\xfc\x20\x28\xf5\xb9\x43\x40\xac\xd5\x94\xb2\x15\x81\x9f\xcc\x2b\x57\x8c\x6c\xb6\x62\x5e\x98\x74\xe6\x97\xd8\x27\x1e\x96\x6f\x98\x1f\x1e\x7e\xc7\xc1\x55\xff\x7c\xe4\x1c\x1d\xee\x97\xd8\x93\xd9\x44\x42\x01\x1b\x60\xe5\xc2\x80\x84\x24\x88\xe5\xe0\x3f\xdc\x31\x74\xaf\x2c\xef\x6f\x60\x22\x33\x95\x81\x47\x63\x1a\x48\xfa\x5a\x47\x46\x36\xed\x28\x33\xed\xb1\xf3\x43\xc5\x32\x1a\xc2\xab\x75\x89\xfb\xf2\xa7\xe3\x78\x96\xb0\xd8\x87\xf3\x41\xb3\x4a\x13\x2c\xc3\xdf\x56\x76\x1f\xe5\xdf\x96\xc6\x6e\xc9\xbd\x43\x6f\xfa\x55\x44\x27\xea\xaa\xda\x30\xeb\x09\x4b\xd1\xd8\x38\x24\x7f\xc5\xd0\xdb\xd0\x82\xd8\x54\x46\x3e\xb0\x0c\xb5\xda\x2c\xd4\xcf\xbf\x97\xe3\x49\xc2\xec\x01\x48\x56\x68\x0b\x3f\x9e\x12\x06\xae\xa0\x6c\xdc\x10\xc4\x23\xec\xee\x05\x20\xf5\x15\x80\xac\x89\x2e\xb1\x1f\xc3\x8f\xd2\x62\xbc\xe2\xd4\x8f\x05\xa0\x08\x8b\x2d\x5a\x33\x1a\x20\x46\xa9\x90\x78\x44\x17\x1b\x44\x19\x62\xe0\x63\x41\x2e\x93\x1a\xd2\x61\xb2\x88\x81\x00\x4f\xd7\x96\x91\x88\x47\x18\x22\x21\xba\xda\x12\x77\x9b\x04\xac\x32\x2e\x91\xd1\xb1\x35\x28\xe9\x62\x58\xff\x98\xc8\xcb\xba\x76\x70\x5c\x74\x87\x82\x16\x49\x29\x63\xc8\xb2\x26\x3e\xd8\x07\x40\x5e\x6a\x1b\x01\xcf\x89\x0f\xa3\x92\x5f\xbe\xf2\x1b\xfb\x6f\x9b\xfd\xb2\x17\xbe\x08\xe2\x2b\x3a\x19\x99\x1f\xc5\xbe\xff\x84\x81\x57\x8e\xd2\x2d\x6c\xad\xa0\x24\xe5\x20\x14\x04\xfb\x1c\xc5\x1c\x3c\xe4\xc5\xb2\x17\x10\x8e\xc5\x56\x3e\x77\xd5\x74\x86\xae\x88\xd0\xfd\xc8\x69\xcc\x5c\x48\x46\x07\x09\xf0\x06\x24\x23\xa2\x8b\x4d\xfb\x78\x88\x39\xb0\x4a\x1e\xc5\xd4\x22\xf8\x10\x31\xe0\x6a\xa9\xef\x52\x60\x2e\x59\xf9\x80\x04\x45\x9a\x1e\x9a\xa8\x5d\x42\x86\x5c\x8f\x39\x5a\x88\x30\xe7\x72\xae\xbf\xcd\xe6\xd4\xf8\x61\xee\xfa\x0c\x39\x53\xf3\x53\x4a\xf4\x8f\x18\xc2\x38\x58\x01\x6b\x5b\xe5\xd5\x6b\x0d\xcf\x48\xf8\xbe\x8a\xc3\xbb\xc7\xa0\x52\x60\xa2\xf5\xcf\xfd\xfb\x96\xa0\x4c\x2f\x8b\x4b\x45\xe6\x30\xde\xd2\xd3\x75\xc0\x8a\x5e\xc4\x1c\xa6\x87\xd7\x3d\x81\x91\x02\x53\x01\x63\x8b\x56\x6f\x01\x18\x08\xe3\xa0\x0f\x2e\xb2\xfe\x54\xb0\xd8\x12\x02\xdd\x61\x49\x25\x34\x10\xed\xd6\xaf\x29\x0b\x70\x75\xae\xeb\xba\x9a\xcd\x06\xb0\x69\x3d\x6f\x02\xf2\x57\xed\x7b\xb8\xf2\xf3\xba\x89\x68\x05\xca\xcf\xdb\x34\x54\xa6\xee\x5a\x79\xd2\x7d\x67\xf5\xd5\x6f\xaa\xb2\x52\xb2\xec\xb9\xbe\x0d\xf0\x87\x24\x2d\xd1\x27\x6f\x24\x45\xa6\x62\x89\x85\x24\xd5\x2e\xaf\x24\x87\x7a\x1b\xa1\x45\x26\x32\xe2\xe1\x10\x23\x62\x5f\x90\xc8\x87\x7e\x7e\x2c\x97\x9a\x2a\xcb\x35\xc0\x94\x90\xd6\xc6\x5c\x93\x0d\x21\x15\x53\x91\xe9\x51\xa7\xe4\x48\x83\x5f\x2d\x9a\x95\xfa\x8d\xce\x86\x29\x81\xa9\x4c\xb3\x71\xec\x53\x4d\x32\xbd\x42\x73\x43\xd8\x64\x5f\x6a\x16\xcb\x6d\x61\xf7\x4b\xed\x5e\xc7\x5c\x6e\x26\x8c\xbe\x73\x0b\x4e\xfb\xa4\x37\xc6\xf2\x2e\x99\xa7\x6e\x75\xc7\xa7\x91\x72\x77\x6b\x11\x59\xee\x84\xf2\x32\x52\x13\xad\x6d\x39\x50\xaf\x75\x93\x5d\x9f\xd7\x36\x7a\xb6\x4d\xe1\xb9\xe0\x54\x13\x87\x2d\x0a\x1e\xba\xff\x33\xd0\xd4\xa2\xe0\x54\xa6\xda\x7c\xf1\x20\x53\x0b\xc4\xeb\x6c\x65\x2a\x33\x95\x81\xd5\x79\x74\x78\xe8\x5e\x77\x86\xe6\xd0\xdd\xea\x77\x1b\x71\x88\x26\xef\xea\xc7\x16\x24\x2a\x63\x16\x35\xf8\x99\x4e\xd3\x70\xc3\x3e\x96\x05\x30\x2c\x04\xb0\x81\xa3\xa4\x26\x3c\x15\x7c\xff\x73\x57\xe1\xeb\xf0\xb2\x8e\xbb\x7d\xd3\x83\xf8\xbf\xc3\xb6\x67\xfb\x4c\xe4\xa3\xec\xed\xb6\xae\x3e\x3d\x88\x20\xf4\x20\x74\x7b\x82\x5d\x94\x9b\x0a\xe4\xcf\x62\x0f\xbc\x29\xc4\xec\xbf\xd9\xfd\x45\x26\x8b\xaa\xb9\x93\xdd\x30\xf6\xfd\x7a\x94\x9b\x38\xa0\xd2\xe3\x65\xbb\xd7\xf8\x2a\x12\xb2\xf5\x90\xb5\x1d\x98\xaf\x22\x21\x3b\x00\x98\xaf\x23\x89\x30\x00\x98\xcf\x2d\x69\xd4\x60\xe2\x0d\x72\x23\x5a\xab\x3d\x37\x52\x2c\xb7\xe5\x46\x5e\xa9\x3a\xa3\xe6\x46\x92\x7a\x77\x36\x37\x62\xf2\xde\x37\xcf\x8d\x68\xad\xb7\x9b\x1b\x69\x1c\x49\x77\x2b\x37\x52\xee\x84\x72\x6e\x84\x53\xf7\x02\x1a\x78\x5d\x2c\x6f\x65\x69\xa5\xb7\xde\x28\xd9\x46\xbe\xdb\x78\xad\x5f\x7b\x4b\xbc\xee\x4f\x48\xdd\xdc\x2f\xe2\x34\x46\x82\xbc\x99\x2c\x0a\xbc\xb6\x44\x5a\xbd\xd6\xb7\x7d\xf5\xe4\xb1\xe5\x7b\x8e\x1a\x60\xdf\xc2\xb8\xa1\xc0\x7c\x91\x4b\xa5\xce\xc9\x39\xf3\xbe\x7a\xd5\x2d\xc7\x11\x30\x0e\xea\xe0\x5b\x09\x0b\x2d\x3d\x09\x1a\xd5\xf4\x52\xdf\xad\x7e\x0f\x0b\x98\x0b\x12\x40\xeb\x66\x7f\x39\x1f\x91\x8a\x21\x6d\xdb\xb8\x36\x39\x0f\xaa\xbb\xb0\xa6\x4e\xeb\x71\x76\x20\xb7\xb2\x52\xb6\x6c\x9a\xaf\x1a\x50\x93\xbe\x9c\xcd\xd5\x69\xb6\xb9\x1c\x61\x6d\xe0\x9d\x22\x2d\x92\x1c\x80\x63\xb0\x06\x06\xa1\x0b\x08\x73\xa4\x06\x26\x78\x68\x75\x8d\xce\x36\x44\x6c\xe3\x95\xe3\xd2\x60\xa1\x05\x16\x1e\x91\xe6\xae\x62\xa9\x69\x91\xc9\xe5\x78\xb7\x48\x08\x06\x90\x16\x1c\x39\x47\x0f\x72\x15\xe3\x02\x5c\x05\x64\x1c\x9c\x21\xc0\xc4\x90\xba\x68\xf4\x3b\x52\x64\x2a\x56\xde\x1f\x15\x34\x6d\xdd\x38\x48\x6d\x29\x17\x95\x03\x7f\x1d\xc0\x4a\xa5\xa6\xc2\xeb\xc1\xa8\x78\x65\x36\x8e\x03\x19\x89\x2e\x1f\xf6\x83\x4b\x4a\x4c\x05\xd5\xc3\x51\xa1\x52\xb6\x8d\x06\xd3\xe3\xde\x30\x3d\x9e\x0a\xa6\x47\x63\xc3\xf4\x78\x24\x98\x62\x46\xfa\xa1\x14\x33\x32\x15\x48\x8f\x47\x05\x49\x5a\x36\x0e\x46\x1c\x82\xcb\x0e\xc7\x0a\x4f\x11\x87\x00\x87\x82\xb8\x28\xf9\xc8\xbb\x3a\x4d\x6a\x45\x12\x23\x8d\xdd\xf1\x62\x91\x3f\x5a\x8c\x6a\x7d\xd2\xe6\x66\x00\x76\x4c\x25\x95\x53\x87\x3f\x43\xb8\x11\xdb\x9e\x3b\xf9\x5a\x68\xa2\x38\xda\xb6\xb3\xdb\xb2\x89\x7f\x64\xb6\x30\x6d\xec\x5d\xb2\xd0\xb6\xf9\xda\x76\x4c\xe1\xa0\x6c\x40\x9a\x8d\x33\x1f\x5f\xf8\xdc\xf2\xb8\x0d\x8b\xbf\xaf\x2f\x6f\x3f\x60\x25\x9c\x1c\x1d\x18\x70\xda\x60\x22\x70\xaa\xbb\xe3\x0d\xce\x2e\x5f\xc8\xee\x32\xd8\xc0\x87\x51\x52\xf8\xfa\x3d\x0d\xa9\xce\x42\x79\xef\x54\xa7\xfe\x68\x66\x50\xaa\x53\x9b\x7f\x67\x53\xf8\x13\x65\x4c\x35\x60\xb7\x9a\xc2\x6f\x1c\x54\x77\x2c\x2b\x5b\xea\x84\xca\x57\x72\x55\x46\x57\x10\x7f\x3d\x64\xbf\xa9\xf1\xd0\xd2\xee\xd9\xfc\x0f\x07\xcf\xff\x3e\x9d\xff\x7e\x38\xff\x61\x79\x6f\xe0\x87\x1c\x0d\xd7\x8c\xbc\xce\xaf\xdf\xb1\x74\x79\x47\x6d\xd9\xf7\xe1\x23\xe8\xca\x3f\xb5\x1d\x41\x59\xf1\x30\xf5\x08\xea\x8a\xfb\x8f\x23\xa8\x2b\x6e\xfb\x8c\xa1\xae\xe0\x5a\xbb\x84\xa4\xc3\x9d\x7c\xf5\x40\x8f\xc9\xd1\x57\xeb\xd8\x9c\x7a\x3e\x70\x5c\x53\xed\x3a\xcb\xff\x69\x8f\x6a\xec\x97\xe8\x14\x90\xed\xa0\xa7\xdb\xa7\x11\x1d\x14\x35\x6d\x97\xf7\x52\xd4\x14\xaf\x19\xfd\x16\x77\x37\xe6\x79\xd8\xdd\x34\xcc\xb3\x58\xae\xb7\x5c\xec\xfb\x68\xc3\x70\xb4\xcd\x7c\xda\x8f\x88\x03\xa0\x34\x60\x81\xd0\xb9\x22\x17\x24\x02\x8f\xe8\xeb\xd7\xe4\x6f\x8b\x27\xd8\xf7\xff\x50\x62\x37\xec\x45\x97\x86\x02\x93\x10\x98\xd4\x38\x18\xf9\xe8\x26\xd2\xd2\xeb\xfb\x3e\xf8\x37\xd1\xc1\x81\x11\x5c\xd5\x60\xec\xab\xb2\xc1\xa6\x5e\x2b\xd7\x18\xbc\xe3\x97\xa9\xe9\x13\x10\xb9\x41\xf5\x50\xb6\x89\x3b\x4f\x68\x10\xe0\xd0\x43\x2c\x0e\xe5\xea\x1c\xa3\xec\x5d\x3f\x22\x7a\x09\x8c\x11\x4f\xdd\x97\x77\x8d\x38\x08\x84\x85\x8a\x53\x74\x22\xdc\x87\x4b\x30\x24\x78\xed\xd1\x3d\xb2\x47\xf8\xa6\xa6\xf5\xfe\x16\xbb\xb1\x5b\x4d\x5f\x64\x97\x3b\x37\xf9\xad\x1a\x0c\x12\x66\x8c\x9e\x1a\xce\x02\x9b\x8c\x49\x6f\x5c\x21\xc0\x11\x09\x15\x8a\x79\xaf\xd6\x84\xdb\x8e\x47\x27\xd5\xde\xcf\xce\x74\xc0\xb1\x3c\xde\x3f\x91\xe1\xc7\xf9\xf9\xa2\x10\x81\xec\x19\xa5\xac\xa1\x48\xfa\x63\x12\x31\x99\x34\xbb\x22\xbe\x8f\x56\x80\x56\x34\x0e\x3d\xd5\x33\x38\xc8\xae\x89\x40\xd1\xc5\xa6\x9e\xcc\xa9\xc1\xa7\xce\x37\x1a\x2b\x7d\x34\xcb\x76\x6d\x9d\x8d\x3d\x1e\x61\x9a\x3a\xe8\xbf\x16\x94\x21\xee\xd2\x48\xed\xe9\xa8\xf6\x83\x40\x71\x44\x43\x04\x1f\x48\xbd\x4b\xb3\x37\xf5\x25\x58\x62\x8f\xe1\xe9\xb2\xf6\xac\x5a\xab\x86\x42\xb7\x38\xdb\x20\xba\x0b\xe1\xe5\x3b\x3c\x0a\x99\x9f\x85\x97\x84\xd1\x30\x80\x50\xa0\x4b\xcc\x08\x5e\xf9\xa3\xd2\xfa\xec\xfd\x4f\xb7\xc0\x5e\x12\x16\xd8\x70\xb5\xd0\x6c\x0e\x71\x60\xd8\x6d\xab\x01\xf7\xc9\x69\xdc\xe2\x04\x13\x65\x9f\x29\x53\xe5\x9a\x62\x0c\x9e\x3e\x27\xe3\xf2\xf2\x9b\xbb\xb5\xb6\xce\xc6\x53\x75\x21\xcf\xd7\xe9\x6f\x55\x94\x34\x84\xc5\x0d\x51\x1d\xd2\xd9\x90\x6a\x6e\x37\x2b\xaa\x5d\xf2\x90\x9e\x55\x10\x34\xbb\xc2\xc7\x08\xf4\x00\x90\x0d\x8c\x31\x5e\x4e\xd4\xe1\x35\xb9\xd8\x80\x0e\x32\x26\x87\x4a\x60\x55\x9e\x2e\xc7\xeb\x63\xc3\x0d\x47\xc8\xd0\x0f\xea\xc6\xe8\x92\x13\x42\x2e\x0e\xe5\x60\xce\x8e\x74\xa8\xcd\x31\x75\xa3\x16\x15\x5b\xbd\xba\xd6\x35\x79\xeb\x8e\x58\x63\x0b\x23\xca\xcc\xe9\xbf\xea\xba\x5e\xd6\x4b\x7c\x4b\x76\xb1\x57\xde\x5c\x41\xd5\x83\x2d\xe5\x0d\x59\x49\x2b\xa1\xbb\xf9\xd7\x33\xe5\x46\x67\x73\xfd\xff\xfd\x93\x99\x70\xa3\x7f\xc7\x5e\xb4\x7f\xd2\x91\xee\xff\x47\xb9\x40\xd2\xe0\x19\xdf\x97\x2d\x5e\x11\xe5\x28\xcd\x84\x6f\xd9\x56\x44\xe5\xed\x82\x5a\xe3\x86\x30\x75\x30\xcd\x74\xe6\x69\xd0\x94\xd8\x15\xfb\x63\x7b\xea\x32\xab\x54\x5b\x3b\xa6\xec\x48\x8e\xfa\x62\xcf\x93\xde\x02\x05\x38\x8a\x40\x4d\x51\x38\x2d\x32\x1d\xb4\x42\x6d\x5c\x9e\x1a\x55\xe1\x3d\x63\xd5\x35\xf5\x98\xa0\xbe\x77\xec\x41\x81\x1d\x4b\xe1\x01\x63\x28\x62\xb0\x26\x1f\xca\x50\xea\x98\xef\x8e\x42\xf9\x2a\xee\xf2\xd1\xc3\xa7\x86\x92\xc6\xe2\x33\x83\xf2\x8a\xb2\x8b\xa7\xb5\x9b\x54\x4d\x86\xfe\x8b\xb2\x0b\x69\x85\x57\xb8\xcd\x55\x6c\xd1\xac\x9c\xb7\x29\x9c\xbd\x50\xd3\x7f\xfb\x09\x8b\x1d\x9b\xa5\xe5\x0d\x1f\xeb\xbc\x9b\x44\x3e\x85\x67\xcb\x31\x76\x8a\xcc\x9b\x40\x79\x58\xbf\x53\x79\x57\x8f\xef\x98\x22\x6b\x06\x2f\x29\x1a\x9c\xba\xa3\x51\x35\x67\xd7\xf4\x11\x79\x53\x3e\x2f\xba\xa8\xee\x87\xb6\xa9\x6b\x53\x89\x6e\x12\x4c\x96\x6e\x81\x34\xb6\xa8\x69\x62\xcd\xb7\xb2\x63\x46\xe6\x59\x10\xf4\x2d\xc8\x34\xbc\xbd\xfe\xa7\x3d\xb2\x92\xea\x36\xb2\x34\x15\xfb\xe4\x6f\xe0\xe8\xc5\xcb\xd7\x6f\x7f\xfb\xe3\xe5\xe9\x2f\xcf\x74\x38\xf7\xee\xf4\xe7\xb7\xcf\xe4\x42\x31\x39\xd0\xfe\x7d\x5e\xe1\x58\x17\x7e\xef\xa0\x17\xeb\xb4\x1e\x47\x72\xa9\x78\x80\x88\x40\xbf\xbc\x7d\xf3\x9b\xba\x1a\x8e\xf3\x38\x00\x2f\xa9\xf1\x13\xda\x9b\xe5\x2a\x1a\x9c\xca\x4d\x03\x93\xc6\x5d\xd5\xac\xda\xc0\x35\xf6\xf8\xeb\xe2\xcf\x74\xb1\x5a\xff\x1b\x30\x59\x51\x03\xc9\x72\x7a\xbd\x7a\xfb\x5b\xc6\xb7\x02\xc9\x34\xbd\x0a\x85\x9a\x64\xa5\xda\x0d\x54\x53\x15\x24\xd3\x0a\x02\xdf\xa8\x56\xd5\x68\x0b\x52\xd0\xad\x10\xcb\x1a\x2f\x74\x3c\x00\xd1\xec\x69\xe5\xac\x53\xf5\xb4\x4d\xc4\xee\xa9\xbe\xfd\xf3\x87\x4f\x13\xd5\xd0\xe8\x06\xe1\x4c\x69\x17\xd4\x14\xd4\x94\x2a\x0c\x0e\x6d\x52\x2d\xb6\x00\xe7\xc6\xc7\xfb\x5c\xdb\xc7\x5d\x1d\x41\xcc\x1a\x38\x1c\xca\xc2\x66\xb0\x71\x57\x3e\x2f\x1e\x0c\xa3\xd6\x71\x67\x41\x4c\x9a\x37\x1c\xc2\xc2\xd4\x67\x82\xb0\x50\x6c\x3b\xdf\x70\x1a\xea\xbf\xf4\x74\x90\xdc\xff\x77\x90\x7c\xeb\x7e\x80\x28\x4b\x56\x72\x0e\xd2\x87\x0d\x79\x36\x85\xe8\x8b\xea\xa9\x8f\x05\x78\x08\x0b\xc4\xe2\x50\x90\x00\x0e\x10\x83\xc8\xc7\xae\x5c\x37\xed\xcd\x7e\x7d\xf6\x7c\x5f\x2e\x8c\xc4\x36\x4d\x52\xd3\x35\xfa\xf5\xd9\x73\x47\xfe\x27\x9f\x8d\x92\xac\xf5\xde\x4c\xed\x06\x25\x57\xa0\xa3\x35\x47\x7b\xb3\x85\x5c\x72\xed\xcb\x85\xa4\x83\x5e\x02\x17\x52\x6f\x1c\xc9\x08\x99\x86\xc9\x16\x79\xa6\x87\xc7\x51\x44\x99\x00\xef\x00\x11\x07\x1c\x29\x9d\xa8\xdc\xaf\xd1\xe7\x2c\xed\xf9\xec\x16\xbf\x83\x9c\x52\x99\xcb\xaf\x9c\x1d\xd1\x7f\x02\xcd\x4c\x54\x55\x64\x43\xf8\xf2\xbe\x73\xe8\x1c\xd6\x8f\xee\xcf\xd2\xe3\x23\xe5\x43\xfa\x3c\x02\x77\xa1\x65\x9c\xad\x08\xfc\x7a\xf3\xab\xc1\x7f\x31\x93\xf6\x7e\x96\xe4\xd0\xce\xcf\x1d\xc3\x3f\x67\x27\xc7\xb3\xf3\x73\x95\x67\x3b\x9d\xff\x8e\xe7\x7f\xcf\x97\xf7\x66\x27\xc7\xe7\xe7\x4e\xe9\xd1\xfe\x7f\xef\xef\x9f\xa8\xe7\xf7\x0a\xcf\xcf\xcf\xe7\xe7\xe7\xce\xf2\xde\xfe\xc9\x5e\xe1\x4f\xc1\xed\x7c\xdc\xd9\xf9\x4f\x00\x00\x00\xff\xff\x1c\xaa\x62\xa3\x92\x70\x00\x00")

func githubComOpspecIoSpecSpecOpYmlSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_githubComOpspecIoSpecSpecOpYmlSchemaJson,
		"github.com/opspec-io/spec/spec/op.yml.schema.json",
	)
}

func githubComOpspecIoSpecSpecOpYmlSchemaJson() (*asset, error) {
	bytes, err := githubComOpspecIoSpecSpecOpYmlSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "github.com/opspec-io/spec/spec/op.yml.schema.json", size: 28818, mode: os.FileMode(420), modTime: time.Unix(1506683646, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github.com/opspec-io/spec/spec/op.yml.schema.json": githubComOpspecIoSpecSpecOpYmlSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"github.com": &bintree{nil, map[string]*bintree{
		"opspec-io": &bintree{nil, map[string]*bintree{
			"spec": &bintree{nil, map[string]*bintree{
				"spec": &bintree{nil, map[string]*bintree{
					"op.yml.schema.json": &bintree{githubComOpspecIoSpecSpecOpYmlSchemaJson, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
