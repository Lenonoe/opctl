// Code generated by go-bindata.
// sources:
// github.com/opspec-io/spec/spec/op.yml.schema.json
// DO NOT EDIT!

package dotyml

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _githubComOpspecIoSpecSpecOpYmlSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7b\x6f\xdc\x36\x90\xff\xdf\x9f\x82\xd8\x1a\xed\xee\xc5\xab\xb5\xf3\xf0\xb5\x2e\x8a\xc0\x4d\x9c\x6b\x0e\x4d\x62\xe4\x75\xb8\x7a\x9d\x86\x96\xc6\x5e\xd6\x92\xa8\x52\xd4\xda\x6e\x2f\xdf\xfd\x40\x52\x6f\x91\x7a\x59\x4a\x36\x0f\x03\x45\xb3\x22\x67\xc4\xf9\xcd\x90\x9c\x19\x3e\xf4\xef\x16\x42\x93\xed\xd0\x5e\x81\x87\x27\x07\x68\xb2\xe2\x3c\x38\x58\x2c\xfe\x0a\xa9\x3f\x57\x4f\x2d\xca\x2e\x16\x0e\xc3\xe7\x7c\xbe\x7b\x7f\xa1\x9e\x7d\x37\xd9\x91\x74\xc4\x49\x68\xc2\x83\xc5\x82\x06\x61\x00\xb6\x45\xe8\x62\xd7\xda\xb3\xf6\x17\x34\xb0\x6e\x3c\xd7\x8a\xd9\x08\x96\x8a\x8c\x13\xee\x82\x20\x54\x15\xd4\x43\x07\x42\x9b\x91\x80\x13\xea\x8b\xa2\xc7\x70\x4e\x7c\x08\x11\x46\xc1\xe5\x85\xaa\x11\x30\x1a\x00\xe3\x04\xc2\xc9\x01\x12\xed\x46\x68\xe2\x63\x0f\xd2\x5f\x55\x2e\xcf\xb1\x07\x88\x9e\x23\xbe\x82\x94\x8f\xac\xc7\x6f\x02\xd9\x82\x90\x33\xe2\x5f\x4c\xe4\xe3\x0f\xaa\xb4\xc4\xc3\xc4\xfa\x71\xf6\x53\xfb\x86\x6d\x06\xe7\xa2\xde\x77\x0b\x47\x88\x42\x44\xc5\x70\xe1\x61\x76\xe9\xd0\x2b\xbf\xf8\x46\xe2\x07\x11\x0f\xf3\x2f\xd3\x53\x07\x98\x61\xaf\x48\x4a\x23\xde\x9b\x96\x45\x7e\x33\x5d\x68\x97\xe0\x59\x03\x0b\xeb\xa1\x79\xab\x6a\x24\xb0\xd0\xa0\x09\x95\x10\xbc\xb7\xc0\x4a\x82\x49\x63\x6a\xf7\x96\x13\x55\xf9\x74\x5a\xb1\xc4\x19\x8a\x42\x70\xd0\xd9\x4d\x5b\x05\x15\x9a\xb2\x15\x37\x67\xc2\xe0\xef\x88\x30\x10\xd6\x7e\x92\x33\xbc\x2d\x84\x4e\x65\x39\x76\x1c\x49\x8f\xdd\xe3\xbc\x91\x9e\x63\x37\x84\xd8\xba\xd3\x57\x64\xc6\x8b\x19\xc3\x37\xc7\x52\x2f\x39\x31\xd3\xde\x91\x2b\xde\x31\x60\x70\x28\xaa\x20\xa9\x5a\xe0\xc0\x04\x16\xd8\x2f\x00\x9e\x18\x3a\x3d\xfb\x0b\x6c\x9e\x3d\xd7\x74\xa6\xac\x4d\x85\x47\xe6\xca\x35\xbd\x25\x2d\x6e\xd3\x0d\x92\xbf\x0f\x3b\x65\xd6\xe7\x38\x72\xb9\x8e\x6d\x22\x96\x6a\x6e\x2d\x17\x12\xbe\x02\x9b\x81\x96\x4d\x09\xce\xa7\xca\x60\x25\x53\x44\x42\x14\x2a\xc2\x1d\xd3\xdb\xcf\x28\x75\x01\x37\x48\x61\x53\x3f\xe4\x0c\x13\x9f\x57\xd1\x33\x02\x24\x9b\xf0\x28\x47\x59\x7c\xc5\x96\xe1\x75\xb5\x86\xb8\x55\x26\x4f\x49\x1b\xed\x57\x56\xaa\x74\x02\x94\x19\x4c\xfc\xfb\xb4\xd0\x85\x2b\x42\x18\xad\x3c\x5f\xa9\xbf\xe9\xa6\x42\x3c\xe5\xe0\x95\xc1\x2e\xeb\xfa\xbf\x5f\xbd\x78\x8e\x5e\xc9\xa9\x09\x9d\x94\x48\xd1\x25\xdc\x5c\x51\xe6\x64\x03\x0a\xa7\xd4\x0d\x2d\x02\xfc\x5c\x4e\x87\x2b\xee\xb9\xf1\x9c\x78\xc5\xc8\xc5\x8a\xcf\x73\x13\xe6\x7c\x8d\x5d\xe2\x60\xc1\x6f\xbe\xbb\xf7\x5d\x08\xb6\xfc\xe7\xbe\xb5\xb7\x3b\x2b\xd8\x92\x41\xf7\x42\x6e\xad\xea\x73\xaa\x9e\x90\xae\x22\x92\x11\x05\xfb\xa9\x24\x17\xf6\x6f\x5e\x9c\x17\xcc\x44\xfc\xb5\x34\x7d\xa3\xf8\x15\x6b\xd7\xb0\xd4\xc1\xd2\xff\x6d\xc5\x9e\x56\xfc\x75\xaa\x55\x8b\x87\xaf\x3b\x1b\x5f\x42\x33\xa0\x72\x76\x53\xe5\x3c\xa8\x5a\x5d\xd2\xaf\x88\xcf\xe1\x02\x58\xb1\xd0\x23\x3e\xf1\x22\x31\x21\xed\xea\x05\x24\x7e\x77\x01\x63\x9a\xb1\x04\xdc\x1b\x52\xc0\xc8\x27\x7f\x47\xd0\x59\xc6\x1c\xd9\x58\xa3\xc7\x3d\x83\x98\x95\x59\xa8\xdb\xf8\x5e\x18\xb2\x63\x5e\x66\xa7\xa4\x50\xc1\xe4\x96\xfc\xaa\x2a\x0d\xea\x98\x24\x52\x6e\xbc\x6b\x52\x0d\x64\x44\x4d\xb4\xc6\x6e\x04\x5d\x5d\x89\x0d\x9a\xe7\x4b\x0d\x2c\xce\xf4\x0e\x61\x66\x93\x49\x0b\x4d\xe6\xf2\x98\x30\xb0\x39\x65\xc3\x7a\xb2\x0e\x61\x9f\xb7\xb1\xfc\x2c\x10\xc0\x67\x21\x75\x23\x0e\x28\xc0\x7c\x85\xce\x19\xf5\x10\xa3\x94\x0b\x7c\x82\xcb\x0b\x44\x19\x62\xe0\x62\x4e\xd6\x71\x0d\x31\xe6\xb1\x80\x01\x07\x47\xd5\x16\x0e\xad\x43\x18\x22\x3e\xba\x5a\x11\x7b\x15\x87\x64\xc2\xbd\x15\xf1\x9f\xd1\x20\xf3\x91\xb1\x49\xb0\xee\xae\xb5\x93\xaa\xba\xb7\x7b\xbd\x41\x7d\x42\x98\x98\xb6\x3f\x9c\x13\x17\xcc\x1d\x22\x2b\x35\xf5\x88\x27\xc4\x85\x41\x3b\x83\x78\xe5\xb7\xde\xb0\x69\xbd\x41\x68\xe5\x8b\xe8\x08\xd2\xbc\xb4\x3d\x21\x88\x5c\xf7\x11\x03\xa7\x18\xfc\x19\xac\xb7\x84\x92\xa0\x03\x9f\x13\xec\x86\x2a\x8d\xe3\x44\x42\x0b\x08\x47\x7c\x25\x9e\xdb\xd2\x4b\x42\x57\x84\x2b\x3d\x86\x34\x62\x36\xc4\xbd\x85\x78\xf8\x02\x84\x45\x14\x92\x3e\xa6\xfe\x11\x85\xc0\x4a\xb9\x44\x5d\x8b\xe0\x3a\x60\x10\xca\xb4\x93\x4d\x81\xd9\xe4\xcc\x05\xc4\x29\x52\xe6\xa1\x99\xe3\x0d\x3d\x25\xe3\xa3\x8f\xee\x02\x1c\x86\xc2\x85\xfc\x94\xcd\xa9\xd8\x87\x5e\xf5\x29\x72\xba\xe6\x27\x26\xd1\xdd\x11\xf5\x23\xef\x0c\x58\x53\xf2\xa0\x5a\xab\x7f\xf6\xc0\x75\x65\xcc\xda\x3e\x67\x20\x08\x46\x0a\x69\xee\xde\x35\xf8\xfa\x2a\xdb\x52\x28\xd2\x87\xbc\x06\x4d\x57\x01\xcb\x8f\x22\x5a\x5b\x4c\x82\xf9\xf6\xc0\x08\x82\xb1\x80\x31\x05\x41\x9f\x00\x18\xf0\x23\xaf\x0b\x2e\xa2\xfe\x58\xb0\x98\x62\xfc\xf6\xb0\x24\x14\x0a\x88\x66\xe9\xcf\x29\xf3\x70\x79\xae\x9b\x50\x1f\xda\x64\x7e\xd2\x0e\xac\x0b\xd1\x75\x40\xbe\x54\x63\x4f\x28\xc7\x79\xd5\x44\x74\x06\x72\x9c\x37\x71\x28\x4d\xdd\x95\xf2\x58\x7d\x27\xa5\xe7\x28\x6b\x54\xa9\xe4\xd4\x38\xfd\x1a\x73\x41\x71\xa6\xa1\x4b\x2a\x48\x90\x8c\x65\x25\x06\x23\x29\xab\xbc\x94\xef\xe9\x2c\x84\x22\x19\x49\x88\xfb\x7d\x84\x88\x5c\x4e\x02\x17\xba\x8d\x63\x19\xd5\x58\x89\xab\x1e\xa2\xf8\xb4\xd2\xe7\xea\x64\xf0\x29\x1f\xcb\x98\x1e\xb4\x4a\x66\xd7\x8c\xab\x79\xb1\x92\x71\xa3\xb5\x60\x92\x60\x2c\xd1\x4c\x36\xf6\xb1\x26\x99\x4e\xae\xb9\xc6\x6d\x32\x87\x9e\xf9\x72\x93\xdb\xfd\x5c\x0d\xaf\x43\x86\x9f\xb1\x45\x6f\x7c\x00\x6a\x9e\x04\x87\x08\xf7\xe2\x79\xeb\x93\x2e\x2c\xd6\x9a\xe0\x66\x05\x95\x45\x25\x14\xc3\x4a\x65\x78\x4d\xe1\x41\xb5\xd6\x00\x8b\x8b\xc7\x26\xab\x6d\xb9\xc2\x98\xd1\x77\x19\xbe\x56\xd8\x77\x18\x5c\x85\x2d\x06\xb0\x7d\xeb\x81\xb5\x5f\x1a\xc1\xda\xfa\x65\x1d\xec\x6f\x90\xe5\xbc\x46\x27\xea\xeb\x08\xcb\xaa\x86\xfa\x2d\x2c\xeb\x0b\x8c\x03\x01\xf8\x0e\xf8\x76\xc7\x1e\x9a\xa7\x1b\xcb\xe1\x2b\x2f\x94\xb7\xec\x96\x1f\x77\xa1\xbc\x2e\xe7\xd9\x7d\x45\xfc\x8b\x8c\x92\xcb\x41\xe3\xc4\x8f\x5c\xb7\x3a\x9d\xc7\x93\x4b\xe1\xf1\x69\xa3\x01\x7b\xf8\xba\xdf\x1c\x53\x20\x1c\xcb\x84\x4d\x3d\xbd\xef\x6e\x82\x9e\xa2\xe6\x09\xc7\x12\xd5\x14\x06\xf4\x12\xf5\x73\x0b\xdc\x6a\x46\xde\xaf\x2f\x70\xeb\x31\x0d\x19\x83\x9b\x5a\x74\x82\xd1\x8d\xba\xec\x19\x1a\x1c\x61\xd4\xd2\xe9\xed\x33\x3b\x19\x00\xc3\x9c\x03\xeb\x39\x1e\x54\x88\xc7\x82\xef\x3f\x37\x15\xbe\x5c\x0c\xd5\x1a\xb5\x84\x66\x2c\xb0\xca\x23\x4d\xff\xac\x74\xd5\x17\x19\x24\x5d\xa2\xb4\x66\x4e\x97\xe4\xcb\x4d\xe9\x92\x17\xb2\xce\xa0\xe9\x92\xb8\xde\x67\x93\x2e\xd1\xf9\x39\xb7\x4f\x97\x28\xae\x9f\x36\x5d\x52\x3b\xf0\x6f\x56\xba\xa4\xa8\x84\x62\xba\x24\xa4\xf6\x25\xd4\xd8\x79\xbe\xbc\xd1\x6a\x4b\xda\x7a\x25\x69\x6b\xed\xdf\x64\xe7\xea\xb5\x1b\x62\xe7\xdd\x0d\x54\x35\xff\x8b\xd8\xc0\x11\x6b\x42\x6f\x3c\x72\xec\x6d\xca\xb5\x55\x6b\x7d\x5b\x8a\x8f\x1f\x1b\x4e\x1a\x55\x00\x6b\x9c\xe3\xbf\x8e\x9c\x4f\x0f\x60\xbe\xc8\x24\x43\xbd\xd3\xd3\xb8\x14\x5f\x1e\xa6\xa3\x00\x58\x08\x72\xaf\x5c\x01\x0b\x45\x3d\x0a\x1a\x65\x67\xb9\xeb\xee\x00\x07\x73\x98\x73\xe2\x69\xf6\x4d\xd7\x66\xf2\x12\x32\xa4\x64\x1b\x56\x26\xeb\x5e\x79\xe1\x56\xa7\xb4\x0e\xdb\x0d\x32\x29\x4b\x65\xa7\x75\xf3\x55\x0d\x6a\x62\x2c\x67\x73\xb9\x01\x6e\x2e\x7a\x58\x13\x78\x87\x48\x91\xc4\x7b\xe6\x18\x9c\x03\x03\xdf\x06\x84\x43\x24\x3b\xa6\x3a\x41\x79\x72\x41\xf8\x2a\x3a\xb3\x6c\xea\x2d\x14\xc1\xc2\x21\x42\xdc\xb3\x48\x70\x5a\xa4\x74\x19\xde\x0d\x14\x9c\x01\x24\x05\x7b\xd6\xde\xbd\x8c\xc5\xb0\x00\x97\x01\x19\x06\x67\xf0\x30\xd1\x24\xfd\x6a\xc7\x1d\x41\x32\x96\x55\xde\x1d\x14\x34\x25\xdd\x30\x48\xad\x68\xc8\x4b\x7b\x04\x5b\x80\x95\x50\x8d\x85\xd7\xbd\x41\xf1\x4a\x65\x1c\x06\x32\x12\xac\xef\x77\x83\x4b\x50\x8c\x05\xd5\xfd\x41\xa1\x92\xb2\x0d\x06\xd3\x7e\x67\x98\xf6\xc7\x82\xe9\xc1\xd0\x30\xed\x0f\x04\x53\xc4\x48\x37\x94\x22\x46\xc6\x02\x69\x7f\x50\x90\x84\x64\xc3\x60\x14\x82\xb7\x6e\xb1\x13\xf1\x10\x85\xe0\x61\x9f\x13\x1b\xc5\x37\x21\x94\xa7\x49\xc5\x48\x60\xa4\xb0\x3b\x58\x2c\xb2\x47\x8b\x41\xa5\x8f\xdb\x5c\x0f\xc0\x96\xae\xa4\xb4\xe0\xf4\x3b\xf8\x17\x7c\xd5\x71\xb1\x49\x11\x8d\xe4\x47\x9b\xf2\xd4\x0d\x8b\x2f\x7b\x7a\x09\x89\xdf\x43\xc2\x84\x68\x24\x09\x4d\xa9\xe4\xa6\xe5\xa5\x9d\xa2\x00\x49\x76\xee\xcb\x58\x76\xaa\x09\xfe\xbe\xbe\x65\xa7\x1e\x91\x70\xbc\x10\xd2\x63\xed\x64\x24\x70\x7e\x34\x60\xa3\x19\xec\xb2\x40\x76\xc2\xe0\x02\xae\x07\x39\xd1\xac\xde\x53\x93\xfa\xcc\x95\x77\x4e\x7d\xaa\x73\x36\xbd\x52\x9f\x4a\xfc\xcd\x48\x7d\xb6\x48\xf1\x8f\x73\x00\x2e\x3e\xa8\xf4\x49\x53\xfc\xb5\x9d\x6c\xc3\xb2\xb4\x05\x25\x94\x0e\xda\x95\x2d\xbc\x84\xf8\x71\x9f\xf5\xa9\xda\x25\xd9\xc9\xc9\xfc\x4f\x0b\xcf\xff\x39\x9c\xff\xb1\x3b\xff\xe9\xf4\x4e\xcf\xb3\x20\x35\x17\xe0\x1c\x67\x77\x56\x19\x54\xde\x92\x5b\xe1\xd6\x82\x01\xf8\xa5\x47\xda\x07\xe0\x95\x9d\x06\x1e\x80\x59\x7e\x7f\xf7\x00\xec\xf2\xeb\x9f\x03\xb0\xcb\x2f\x33\x0d\xc1\x2e\x37\x74\xb7\x71\x79\xfb\x4f\x22\xe5\xd5\x78\xdd\x44\x52\xae\x63\x9a\x34\xb2\x8e\x68\xeb\x6a\x57\xef\xce\x19\x6a\x86\xa8\xdf\xfc\x98\x96\x0d\x3a\xff\xef\xb7\xc9\x95\xd6\x8e\xe9\x09\xbe\x9d\xc4\x91\x44\x9b\x26\x88\xaa\xdb\x4d\x8e\x9b\x60\x58\x31\x1e\x58\x77\x6b\xe4\xd0\x44\x98\x55\x17\x36\x2e\xd0\xef\x0e\xad\x8d\xbd\x27\x57\x8c\x70\x78\xe1\xbb\xe5\x0b\xe6\x1a\x71\x48\x09\x07\xde\x2a\xbf\xb7\x5b\x9b\x05\x6c\x5e\xb6\xd5\xf9\xe0\xff\x36\x47\x39\xe6\xeb\xdd\xba\xf1\x69\x77\xba\xaa\x05\xa3\x76\xbb\xfd\x5a\x30\xaa\x8b\xdf\xb4\x7e\x4b\x68\x5f\xe8\xfd\x72\xfb\xc2\x38\x84\x9e\xbc\xe2\x98\x13\x1b\xd9\xd8\x75\xd1\x05\xc3\xc1\x2a\xb3\x0b\xf0\xad\x2b\x72\x49\x02\x70\x88\xba\xba\x54\xfc\x5a\x3c\xc2\xae\xfb\xa7\xac\x39\xd3\xf8\x3f\x55\x4f\xa5\x85\xa4\x36\xf5\x39\x26\x3e\x30\xc1\xbb\x37\xee\xc1\x6d\xa8\x85\xcf\xe7\xba\xe0\xde\x86\x47\x08\x8c\xe0\x32\x07\xad\xa6\x8a\x02\xeb\x74\x56\xac\xd1\x7b\xfd\x3f\x65\xd3\x25\x3c\xb2\xbd\xf2\xd6\x37\x9d\xe5\x3c\xa2\x9e\x87\x7d\x07\xb1\xc8\x47\x67\x37\x08\xa3\xf4\x5d\x3f\x23\xba\x06\xc6\x88\x03\x21\xc2\xfe\x0d\x0a\x81\x23\xcc\x65\x94\xa2\x96\xc5\x5c\x58\x83\x66\xb9\xc7\x1c\xeb\x23\x73\xbc\xaf\x6b\x5a\xe7\xcb\x1c\x6a\xd5\xaa\xbb\xd2\xa1\xa8\xdc\xf8\x57\x39\x14\x24\x4c\x1b\x3b\xd5\xec\x73\xd4\x09\x93\x5c\xe9\x44\x20\x44\xc4\x97\x28\x66\x5a\xad\x10\x37\x6d\xfd\x8c\xab\xbd\x9b\x9e\xa8\x70\xe3\xf4\x60\xf6\x50\x04\x1f\xcb\xe5\x22\x17\x7f\x6c\x6b\xa9\x8c\x81\x48\xf2\xa7\x23\xd1\x89\x34\xbd\x22\xae\x8b\xce\x00\x9d\xd1\xc8\x77\xa4\x66\xb0\x97\xde\x33\x83\x82\xcb\x8b\xea\x4c\x52\x81\x4f\x9e\x13\xd0\x56\xfa\xa0\xa7\x6d\xdb\x3a\x93\xf5\x38\x84\x29\xd3\x41\xdf\x2f\x28\x43\xa1\x4d\x03\xb9\xc2\x2b\xdb\x0f\x1c\x45\x01\xf5\x11\x5c\x93\xaa\x4a\xd3\x37\x75\x35\xb0\x58\x1e\xcd\xd3\xd3\xca\xb3\x72\xad\x0a\x0a\xed\xa2\x6c\x0d\xe9\x04\xfc\xf5\x5b\x3c\x88\x31\x1f\xf9\x6b\xc2\xa8\xef\x81\xcf\xd1\x1a\x33\x82\xcf\xdc\x41\xcd\xfa\xe4\xdd\x2f\x9f\xc0\x7a\x89\x9f\xb3\x86\xab\x85\xb2\x66\x1f\x7b\x9a\xb5\xf7\x0a\x70\x1f\xdd\x8c\x1b\x06\xc1\x98\xd9\x67\x6a\xa9\xe7\xc4\xd5\xda\x46\x57\x3b\x7d\x42\x86\xb5\xcb\x6f\xc3\xad\xb1\x75\x26\x3b\x95\x37\x7a\x7d\x9d\xe3\xad\xf4\x92\xfa\x58\x71\x8d\x57\x87\x54\x2e\xb4\xbc\xd2\x93\x16\x55\x6e\x89\x49\x76\x2e\x71\x9a\xde\x01\xa6\x05\xba\x07\xc8\x1a\x8b\xd1\xde\x6e\xd6\xe2\x35\x19\x59\x0f\x05\x69\x53\xc3\x05\xb0\xca\x31\xf9\x70\x3a\xd6\x5c\x91\x86\x34\x7a\x90\x9f\x5d\x28\x0c\x42\xc8\xc6\xbe\xe8\xcc\xe9\x06\x2f\xb9\x54\x2e\xaf\xe4\xa3\x7c\xa5\x72\x61\xaa\x66\x78\xbb\x2c\x4b\x40\x99\x3e\xf9\x5f\xce\xc2\x89\x7a\xf1\xd8\x92\xde\x0c\x98\x35\x97\x53\xf9\x60\x45\xc3\x9a\x35\x09\xa3\x41\xb7\x1b\x5f\x4f\xe4\x30\x3a\x9d\xab\xff\xcf\x1e\x4e\xb9\x1d\xfc\x5f\xe4\x04\xb3\x87\x2d\xcd\xfd\x37\x1a\x72\x24\x04\x9e\x86\x33\xd1\xe2\x33\x22\x07\x4a\xbd\xc1\x37\x6c\x32\xc8\x37\x5c\x86\xd8\xa5\xc6\xf5\xb1\xd4\xde\x66\xa6\xf2\xc4\xbd\xa6\xc4\xb6\xd8\x1f\x98\x17\x2e\xd2\x4a\x95\xd8\x31\xb1\x8e\x78\xe3\x3f\x76\x1c\x31\x5a\x20\x0f\x07\x01\xc8\x29\x0a\x27\x45\xba\x6d\x97\xa8\xc9\x96\xc7\x46\x95\x3b\x47\xac\x1c\x53\x0f\x09\xea\x3b\xcb\xec\x14\x98\xb1\xe4\x0e\x30\x86\x02\x06\xe7\xe4\xba\x08\xa5\xf2\xf9\x46\x84\xd2\x81\x80\x81\x8d\xb9\x1c\x4c\x39\x8b\x60\x50\xb0\x5f\x44\x6d\x0e\x4d\x7d\x6c\xb0\x69\xc4\xbf\x38\xb0\xaf\x28\xbb\x7c\x5c\xb9\xee\x59\x07\xc5\xff\x50\x76\x29\xe4\x74\x72\x57\x4e\xf3\x15\x9a\x16\x73\x3f\xb9\xdd\x5c\xd2\x85\xe8\x9a\xf9\xdf\x32\x34\xd5\x3c\x77\xc7\xde\x53\xee\xd9\xe9\x10\x6b\xcd\xfa\x65\xe4\x2c\x34\xd8\x2a\xbd\xab\xc3\xc9\xc9\xc0\x98\x05\x8c\x8b\x7a\xa7\xff\x68\x50\xce\xfb\xd5\x1d\xb2\xad\xcb\x09\x06\x97\xe5\x1d\x16\x4d\xec\x9a\x58\xa2\xdb\x38\xa4\x85\xab\x68\xb5\x2d\xaa\x9b\x9c\xb3\xcd\x31\x11\x23\xf3\xd4\x91\xfa\xe6\xa8\x6a\xde\x5e\xfd\xa2\x56\x5a\x52\xde\x88\x22\x44\xc5\x2e\xf9\x07\x42\xf4\xf4\xf9\xf1\x9b\xd7\x7f\x3e\x3f\x7c\x76\xa4\x5c\xc2\xb7\x87\xbf\xbf\x39\x12\xc1\x66\x7c\x44\xe6\x87\xac\xc2\x81\x2a\xfc\xc1\x42\x4f\xcf\x93\x7a\x21\x12\xe1\xe6\x0e\x22\x1c\x3d\x7b\xf3\xea\xb5\xbc\x9f\x32\x0c\x23\x0f\x9c\xb8\xc6\x2f\x68\x7b\x9a\xb1\xa8\x19\x54\x6e\xeb\xdc\xd4\xee\xcb\x48\xab\xf5\x8c\xd3\x87\x8f\xad\x3f\xd3\x80\xb7\xfa\xe9\xb5\xb4\xa8\xc6\xc8\x32\xf3\x7a\xf1\xe6\x75\x6a\x6f\x39\x23\x53\xe6\x95\x2b\x54\x46\x56\xa8\x5d\x63\x6a\xb2\x82\xb0\xb4\x1c\xc1\x37\x53\x2b\x73\x34\xb9\x31\xe8\x93\x18\x56\x0f\x7f\x41\x4c\x25\x1f\xc7\x5b\xa0\xc1\x2d\xdc\x84\xc2\x0a\xa5\xce\x59\x28\x54\xe8\xed\x32\x24\x5c\x4c\x8e\xc3\xad\x37\xe2\xda\xad\xef\x9e\xd0\x83\x98\x36\xb0\x3f\x94\xb9\x85\x5a\xed\x7a\x79\x56\xdc\x1b\x46\xc5\x63\x63\x41\x8c\x9b\xd7\x1f\x42\x29\xc1\x51\x36\xaf\x98\x77\x4b\x66\x95\xe2\xef\x44\xc0\x1a\xbb\x11\xe6\x10\xc6\xa9\xc5\x22\x18\x4d\x3b\x08\x86\x82\x50\x3f\x27\x36\xef\x42\x31\xba\xa5\x4a\x38\x07\x52\x77\xb2\x20\x5f\x2e\xb7\xdd\xfa\x5b\x02\x1a\xc7\xb4\x65\xab\xda\x61\x9e\x6b\x93\x6e\x0b\x79\xdd\xae\x94\xa3\x9a\xcf\x1c\x14\xb7\x3a\xc4\x1b\x7f\x86\x30\x15\x94\x6c\x22\x6a\xbb\xc3\xcf\xfc\x59\xaf\x81\x94\x9b\xb4\x68\xa3\xb4\xab\x69\xd4\x78\xea\x55\xdb\xa6\x06\xd1\x6e\x7c\x49\x6d\x57\xe5\xd6\x5c\xf1\x7d\x3b\xdd\xc6\x77\x0c\x6f\x94\x6a\x2b\x6d\x1a\x4f\xb3\x6a\xa6\x1b\x66\x88\x57\xbc\xa4\xf3\x1d\x30\xba\x26\x0e\x38\x08\x87\x59\xc9\x0e\x8a\xe7\xd1\x1b\xb9\x6c\x1e\xa2\xef\x15\xd8\x21\x4a\x96\x2e\xd5\xe7\x87\xa8\x2b\x93\x5e\x5d\xe7\x0a\x6d\xb2\xa3\xd1\x2b\x37\xe5\x05\x6b\x5c\xf0\x0e\xf9\x80\x8e\xeb\x63\x6d\x52\x24\x47\x7f\x47\x64\x8d\x5d\xf0\xb9\x80\x7d\x39\x39\x7e\xf9\xe2\xf8\xe8\xe5\xeb\xff\x5d\x4e\x0e\xd0\x72\xb2\x3d\x4d\x7e\xcf\x96\x93\xfa\xdc\x89\x3e\x48\x28\xbb\xe9\xe6\xb3\x91\x7d\x0e\x77\x0c\x36\xdd\xc6\x77\x5d\x6d\x52\xb7\xd5\x34\x6a\xbc\x7e\x9b\x49\x61\xee\xb0\xef\xb7\xa7\x4f\x1f\x1f\x3d\x7f\xfd\xf4\xc9\xd3\xa3\x97\xb3\xf7\x3b\xa8\xf0\xc0\x7a\xf5\xe6\x57\x2b\x35\x96\x72\xe9\xe2\xf8\xf0\xf5\x6f\xe2\x29\x65\xa2\x20\xfe\x89\xa6\x57\x2b\x60\x90\x7e\x43\xec\xfd\xe2\x3d\x62\x20\xda\x0c\x3e\x0f\xe5\xde\xa9\x38\x57\x4a\xfc\x0b\xf4\x5e\x7d\xae\xfe\xfd\xcc\x42\xcf\x21\xe4\xe2\x51\x14\x08\xa8\xa8\x1f\xef\x0e\x94\x07\x99\xa2\x20\xa0\x8c\x83\xb3\x83\x88\x05\x96\x7c\xdb\xf6\xf4\xe5\xd1\x93\xd9\xec\x7d\xe5\x64\x8d\x10\xeb\xdd\x72\xb9\xbd\x5c\x4e\xad\x3b\xcb\xe5\x6c\xbb\xea\xbb\xeb\xbe\x50\x5f\x41\xb7\xff\xfc\x55\x52\x69\xdb\xf9\xab\x1c\x3f\x0f\x36\x7f\xc5\xeb\x10\x03\x75\x04\xad\xad\xc1\x10\xb8\x15\x9b\xd5\x04\x5b\xcd\x2e\x70\x6d\x1f\x31\xa0\x59\x7b\xb8\xe9\xf6\x8c\x2a\x6e\x51\x4f\x3e\x95\x49\xb8\x27\x9f\xae\x83\x48\xfc\xed\x7e\x7d\x74\x2c\x8b\x76\x0c\xda\x3e\x59\xdf\xb5\x76\xad\xdd\xca\xd1\x7e\xdd\x01\xfe\x30\x00\x7b\xa1\xea\x5b\x2b\xee\xb9\x33\x63\x9f\xd5\xf6\xf6\x69\xbc\xa2\xbe\x5c\x5a\x9a\x7f\x4e\x1f\x1e\x4c\x97\x4b\xb9\xea\x7e\x38\xff\x03\xcf\xff\x99\x9f\xde\x99\x3e\x3c\x58\x2e\xad\xc2\xa3\xd9\x7f\xcc\x66\x0f\xe5\xf3\x3b\xb9\xe7\xcb\xe5\x7c\xb9\xb4\x4e\xef\xcc\x1e\x6e\x17\xc7\x8b\xf4\x14\xa8\x0e\x9a\xb4\xd0\x04\xce\xb3\xb8\x02\x22\x3e\x3a\x59\xef\x5a\x77\x7f\x44\x8f\xa8\xe7\x51\x5f\x14\xa0\xf0\xc6\xe7\xf8\x3a\x03\x2a\x00\xdb\xb2\x65\xb1\x60\x2c\x11\x13\x24\x8b\x19\x22\xbe\xed\x46\x8e\xe8\xdd\xff\xf5\xe4\x19\xe2\x58\xf4\x6e\xb8\xe6\xe0\x4b\xdd\xd6\x0f\x7c\x5b\xe2\xbf\x0f\xff\x1f\x00\x00\xff\xff\x46\xc1\x36\x79\xad\x84\x00\x00")

func githubComOpspecIoSpecSpecOpYmlSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_githubComOpspecIoSpecSpecOpYmlSchemaJson,
		"github.com/opspec-io/spec/spec/op.yml.schema.json",
	)
}

func githubComOpspecIoSpecSpecOpYmlSchemaJson() (*asset, error) {
	bytes, err := githubComOpspecIoSpecSpecOpYmlSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "github.com/opspec-io/spec/spec/op.yml.schema.json", size: 33965, mode: os.FileMode(420), modTime: time.Unix(1521234632, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github.com/opspec-io/spec/spec/op.yml.schema.json": githubComOpspecIoSpecSpecOpYmlSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"github.com": &bintree{nil, map[string]*bintree{
		"opspec-io": &bintree{nil, map[string]*bintree{
			"spec": &bintree{nil, map[string]*bintree{
				"spec": &bintree{nil, map[string]*bintree{
					"op.yml.schema.json": &bintree{githubComOpspecIoSpecSpecOpYmlSchemaJson, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
