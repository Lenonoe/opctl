// Code generated by go-bindata.
// sources:
// github.com/opctl/specs/opspec/opfile/jsonschema.json
// DO NOT EDIT!

package dotyml

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _githubComOpctlSpecsOpspecOpfileJsonschemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3d\x6b\x73\xdb\xb6\xb2\xdf\xf3\x2b\x76\xd4\xf4\xd6\xbe\x89\x24\x3b\x6d\xd2\xd6\x9d\x8c\xc7\xcd\xe3\xde\xdc\x69\x1e\xd3\x3c\xee\x4c\x2d\x27\x03\x91\x90\x85\x9a\x04\x18\x10\xf4\xa3\xe7\xe4\xbf\x9f\x01\x40\x91\x14\x05\x80\x10\x25\x5a\x76\x22\x7f\x49\x44\x2e\x96\x8b\x7d\x63\xb1\x04\xff\x75\x07\xa0\x77\x37\x0d\xa6\x38\x46\xbd\x03\xe8\x4d\x85\x48\x0e\x86\xc3\xbf\x53\x46\xfb\xfa\xea\x80\xf1\xd3\x61\xc8\xd1\x44\xf4\xf7\x7e\x1e\xea\x6b\xdf\xf5\xee\xab\x71\x24\x9c\x8d\x49\x0f\x86\x43\x96\xa4\x09\x0e\x06\x84\x0d\xf7\x06\xfb\x83\x9f\x87\x2c\x19\x5c\xc5\xd1\x20\x47\x23\x51\xea\x61\x82\x88\x08\xcb\x81\xaf\x13\x78\x4e\x22\xac\xaf\x86\x38\x0d\x38\x49\x04\x61\x54\xde\x7b\x8a\x27\x84\xe2\x14\x10\x05\x96\x68\x88\x84\xb3\x04\x73\x41\x70\xda\x3b\x00\x49\x38\x40\x8f\xa2\x18\x17\xbf\x16\xb1\xbc\x42\x31\x06\x36\x01\x31\xc5\x33\x34\x0a\x4c\x5c\x25\x8a\x82\x54\x70\x42\x4f\x7b\xea\xf2\x17\x7d\xb7\x86\xc2\x86\xf9\x69\xf9\xd3\xf4\x80\xbb\x1c\x4f\x24\xd8\x77\xc3\x92\xea\x21\xa1\x49\x26\xd2\x61\x82\x84\xc0\x9c\xbe\x29\x6f\x7c\xff\xf0\xf7\xfe\xa7\x01\xea\xff\x73\xd4\xff\x6b\xaf\xff\xeb\xf7\x0f\x9f\x7e\xff\xe0\xf7\xea\xc8\x90\xf0\xb9\x9f\x15\x5a\xe6\x68\xd7\x4f\xa8\x92\x8d\xc2\x90\x48\x38\x14\xbd\xa9\xb2\x6f\x82\xa2\x14\xdf\xb7\xcc\xed\x0d\xe2\x28\xc6\x02\x73\x39\xb3\x52\x00\x0a\x74\x81\xf8\xca\xc3\x00\x7a\xc7\xd5\x79\x9c\xdc\x9b\xbb\x09\xd0\x63\x14\xbf\x96\x7c\x39\xae\x5c\x84\x39\x10\x05\xc6\xf1\xe7\x8c\x70\x1c\x2e\x40\xea\x29\x71\x8e\xae\x7a\xb5\xeb\x27\x73\xbf\xbf\xdc\x5f\xe5\x01\x63\xc6\x22\x8c\x68\x97\x8f\x08\x09\xef\x12\xfd\x44\x9a\x55\x87\xf8\x69\x16\x8f\x71\xa7\x33\x60\xe3\xbf\x71\x20\xba\x7c\x42\xca\x82\x33\xdc\xed\x13\x2a\xde\xc5\xfa\x84\xca\xaf\x93\xea\xd3\x4c\xee\xae\xb8\xa7\x4d\xa0\x7e\xd9\xd3\xdc\x0b\xe0\xc2\x11\x2b\x74\xca\xea\x7b\x0b\x40\x35\xdf\x70\x24\x41\x21\xb1\x7b\x08\x1f\xfa\x0d\x88\x17\x01\xae\xdf\x8b\xce\xc9\xa5\x3e\x1f\x45\xf1\x04\x65\x91\xb0\x51\x3b\x0b\x2a\x46\xff\x64\xc6\x48\xd2\xb7\x38\xe0\xd8\x8a\xb2\xc6\xfc\x17\x3a\xd0\xa8\x07\x00\x49\x21\xd5\x83\x17\x11\x57\xa8\xb1\x38\x33\x33\x3d\x01\xa3\xa9\xe0\x88\x50\x61\x16\xda\x82\xd2\x3c\xa9\x0c\x70\x92\x91\xdb\xb3\x11\xa6\x41\x53\x60\x5e\xb1\x5f\x08\x1c\xdb\x01\x17\x99\xf6\x7f\x6f\x5f\xbf\x82\xb7\x2a\x09\x81\xe3\x1a\x1a\x38\xc3\x57\x17\x8c\x87\x27\x3b\xb3\x24\x46\x30\x16\xa5\x03\x82\xc5\x44\x25\x3e\x53\x11\x47\x79\xf6\x73\xc1\xc9\xe9\x54\xf4\x2b\xa9\x51\xff\x1c\x45\x24\x44\x12\x5f\x7f\x6f\xff\xbb\x14\x07\xea\xbf\x8f\x06\xfb\x7b\xbb\xc6\x99\x42\x07\x4a\xad\x19\x5b\xbd\x52\x11\x62\xf5\x72\xe5\xbf\x46\x2f\x61\xa4\xd7\xa0\x24\x6a\x12\x64\x15\x21\x90\x0e\x59\xff\xab\x83\xf3\x88\x5e\x19\xb2\x8f\xea\x9f\x6d\x3a\xb7\x4f\x70\x0e\xe1\x35\x4e\xb4\x49\xb8\xb7\x95\x1f\xf3\xd1\xd6\xef\xce\xc9\x52\x66\x11\xa3\xcb\x95\xdc\xd3\x6c\xfc\x1a\x8d\x63\xaf\x30\x8e\x87\x6e\xbf\x34\xf3\xd4\x84\x0a\x7c\x8a\xb9\x1d\x30\x26\x94\xc4\x59\xdc\x3b\x80\xbd\xe5\x98\x43\xe8\x6a\xcc\xc9\xc7\x77\xc5\x9c\xfd\x4d\x32\x27\xa3\xe4\x73\x86\x57\xe2\x4f\x05\x45\x57\x71\xed\x47\x0f\x16\x59\x13\x0e\xb0\x98\x99\x91\x25\xce\x4c\x76\x31\x97\xb9\xd3\x80\xb2\x9e\x87\xb8\xb2\xfc\x62\x06\x6b\xcb\xaf\x73\x84\x7e\x19\xf6\xef\x1a\x78\x9b\x63\x7b\x24\xc4\x4f\x35\x34\x9c\xa3\x28\xc3\x6d\xf3\xe0\xb5\xea\x8e\x5c\xd8\xaf\x4d\x6f\x42\xc2\xfd\x74\xe6\x29\xe1\x38\x10\x8c\x5f\xdb\xca\xac\x20\x31\x46\xfc\x2c\x64\x17\xd4\xcc\xfc\x1a\x99\x2f\x73\x60\x20\x14\x8e\xcf\xf7\x06\x0f\x7e\x81\x27\x2c\x8e\x19\x95\x37\x20\xbd\xa2\x02\x5d\x6a\x97\x75\x30\x1c\xaa\x62\x62\xa0\x6e\xcb\x87\x28\xb7\x25\x87\x0c\x77\x81\xd0\x20\xca\x42\x42\x4f\xe1\x7f\x9e\xbf\x04\x81\xc6\x11\x06\x7c\x29\x30\x4d\x09\xb3\x50\x62\xaa\xf8\x39\xe4\x08\x2b\xea\xe2\x6f\x92\xf7\x68\x9c\xb2\x28\x13\x18\x12\x24\xa6\xc0\x19\x13\x38\x04\x24\x20\x24\x1c\x02\x46\x05\x22\x54\xce\x41\xd7\x49\x81\xf1\xfb\x80\x80\xe3\x08\x09\x72\x9e\x8f\x91\xe1\x86\x27\x1c\xcb\x81\x13\xce\x62\xb8\x98\x62\x8e\xf3\x6a\xa3\x5a\x01\x0a\xc4\x05\x0e\xd7\x37\xe7\x76\x2b\xd2\xb0\xd0\xbf\x95\x57\xa5\x6b\xb5\x46\x55\x07\x5b\x9b\x39\x4a\x6c\x7e\xf6\xf8\x9c\x44\x78\xeb\xc0\xb7\x46\x63\x9e\x74\x6e\x34\x52\x9d\x6e\x98\xbd\xe4\x75\xdd\xb5\x59\x8c\xc6\xe7\x67\x33\xaf\x14\xec\xd6\x6a\x5c\x6a\x60\xae\xbb\xaf\x53\x29\xf5\x13\x36\x5e\x5c\xd4\x64\x5c\x5f\x75\x31\x8a\x54\x65\xa8\x5d\x4d\x51\x0e\xee\x68\x51\xfa\xe0\x81\xc7\x8a\x4b\x17\x9c\xad\x60\xcd\xe5\x9c\x75\x5b\x83\x96\x9e\xa5\x94\x63\xab\xcf\x98\x2b\x30\xb6\xf5\xf2\xac\x96\xd7\x4e\x62\x72\x70\x57\x12\xf3\x59\x23\x7f\x8b\x12\xc3\x54\x95\x45\x5a\x09\x4c\x8e\xed\x4a\x5e\x3e\x35\xb1\xd5\xe5\xd5\xe4\xc1\x73\xde\x2d\xc5\xd1\x09\xe3\x31\xb2\xf9\x77\x05\x61\xde\x6f\xaf\xfe\x39\x0b\xc1\x85\x3b\x6e\x2a\x7b\x81\x41\x80\x7f\xea\xbd\xd1\xb4\x1a\x56\xc6\x58\x86\x74\x2f\x6c\xb5\x3c\xcc\x09\x9b\xab\x96\x7d\x96\x0a\x6a\xf6\x58\x07\x94\xb9\xda\x0b\xeb\xac\x0f\xe7\xd5\xc1\xb6\xe5\x61\x39\xbc\x2b\x4b\xf0\x30\x04\x97\xfa\x3a\xea\xbe\x2b\x4d\x5a\x0f\xef\x68\xd2\x3f\x75\x35\xe9\x2c\x12\x24\x89\x70\xfb\x20\x55\x62\xe8\xaa\xe0\xdd\xd1\xd4\x29\x73\xfa\x24\xd7\x9c\x29\x13\x5d\x29\xf7\xc3\xeb\xdb\x92\x6d\x11\x4c\x6d\xbc\x9c\x39\xf0\x56\xdc\x54\x83\xbb\xe2\xa7\x8f\xe1\x7c\xd5\x69\x8e\xe1\xea\x8d\xdb\xc9\xc8\x61\xd6\xb6\x9e\xd7\xf8\xfc\xd6\xf3\xaf\x15\xec\x76\x3d\xef\xb1\x6e\xed\x70\x3d\xaf\x9f\xb0\xf1\xf5\xbc\x26\x63\x03\xdd\x42\x96\x46\x55\x37\xef\x2c\x2d\x43\x25\xae\x65\x9c\xea\x14\xd1\x90\xe3\x8b\xd4\xc3\xad\x3e\x1a\x3c\x1c\x3c\x72\xf8\xd5\x55\xd3\x79\x9f\x1d\x5a\x58\xa1\x71\xe4\xd6\x75\x84\xac\x27\xab\xdf\x56\x8f\xae\x4f\xec\xdb\xea\xd1\xb7\x29\xb1\x10\x27\x98\x86\x98\x06\x2b\x78\xf2\x2a\x8e\xae\xd6\x54\xae\xfe\xc3\x15\xdd\xf7\xed\xf3\xae\xdd\xf6\x1f\x36\xed\xd4\x55\x08\xe9\x38\x00\x6c\x4b\x9b\x0d\xd5\xb7\x1e\xcd\xa2\xc8\x5d\xc3\xb3\xa5\xc2\xb3\x3f\x5b\x69\x6e\x39\x37\x12\xa3\xcb\xd5\x33\xc2\x39\x24\x5d\x39\x12\x9f\x40\xd0\x65\xab\xe6\x1a\xd8\x54\x45\xd2\x15\x9b\x7c\xca\x10\x9d\xb1\xe9\x9b\xaf\x74\xb5\x08\xfc\xdb\x4a\xd7\x4d\x95\xcc\xb2\xbe\xd4\x63\x21\xde\x20\xb6\xa4\x73\xf7\xe0\x5a\x4d\x7b\x14\x1b\xa0\x45\x31\xa1\x5a\xf6\x90\x8f\x68\x2a\x7a\x98\xf9\x54\xbe\x83\x1b\xf8\x8d\x6f\x7e\xb9\xc5\x9d\x75\xf9\x0a\xd4\x42\x70\x13\x78\x63\x6a\x5e\xdc\x5b\xab\x0a\x3c\x72\xed\x72\x54\x68\xf3\xcf\x25\xc1\x9d\xd8\xce\xf0\xe5\x1a\xb0\x22\x5b\x14\x9a\xaf\x83\x21\x1a\xdf\xaa\xfc\xb8\x4a\xd6\xcb\x8e\x87\x83\x07\x4b\xf1\xc3\xbd\xc5\x9c\xc3\xba\x83\xc1\x1c\xa8\x1f\x7b\x5d\x1b\xd3\xfa\xaf\x59\x00\x17\x9c\x08\xfc\x9a\x46\xa6\xd7\x86\x0d\xe0\x2e\x29\x14\xa8\xd6\x5c\xfe\xdc\xdf\x1b\x38\xb2\xde\x0a\x71\xde\x85\xcc\x9c\x39\xce\xfb\xae\xbb\x4e\xb6\x5e\xef\xeb\x71\x4a\xa9\x96\x8c\xe7\x37\x6c\x0a\xad\x76\xdf\x6e\xd8\x1c\x5a\xe5\x55\x37\x6c\x0e\xda\xe9\xb4\x99\x43\xc7\xab\x73\xf7\xe1\x22\x35\x60\x67\x62\x59\x47\xd4\x55\x7e\xf9\xf3\x46\xf2\xcb\x5b\x56\x09\x5c\x4e\x09\x2a\x67\x6a\xb4\x92\xfd\x6c\x7c\x57\x22\x77\x2d\xaf\xd7\xdf\x2f\xe8\x4e\x10\x6e\x71\x6b\x42\x7e\xfc\xca\xda\x5a\x13\x34\x3e\xbf\xd6\x84\xb7\x0a\xf6\x1b\x6d\x4d\x68\xd7\x47\xa0\xd9\x7b\xc3\x5e\x57\xc9\x8d\x63\x7d\x3a\xa4\xf0\x79\xea\x90\x82\xfd\x46\x75\xc8\xb3\xbd\xa5\xfb\x77\xa8\xf4\x13\x36\xde\xde\xa2\xc9\xd8\xbe\xae\x72\x3b\x1b\x0e\x5a\xe5\xc3\xdb\x86\x83\x02\xec\xab\x94\xd8\x76\x4f\xb7\x75\xfa\xd9\xfa\x75\x95\x7a\x88\xcd\x12\xcc\x53\x2c\x64\x68\x9d\xe3\xaf\xc6\xd4\x09\x87\x5d\x0b\xba\x75\xbd\x4d\x13\x22\x81\xfb\x82\xc4\xe6\x13\x2b\x6c\xdc\x98\xaf\x97\xcf\x50\x80\xe6\xc5\x7a\x79\x30\xf8\xb1\xa9\x4a\xdc\xc1\xeb\x39\x25\x57\x1c\x70\x8e\x17\x74\x5a\x36\x9b\x94\x52\x91\x19\x2e\xef\x93\x18\x9d\xe2\xbe\x74\x57\xcb\x08\xe7\x08\xf4\x70\x50\xc3\x81\xe3\x09\xe6\x98\x06\x18\x50\x0a\xa1\x3a\xca\x36\x84\xf1\x15\x1c\x9f\x12\x31\xcd\xc6\x83\x80\xc5\x43\x3d\x60\x18\x12\xc9\xc2\x71\x26\x31\x0d\x8b\x71\xa5\x3c\x1b\x46\x08\x8e\xf1\xec\xc6\xfe\x60\xff\xc7\x12\xc5\xf5\x0b\xb0\xce\xc0\xcd\xc8\x11\xc7\x88\x34\xf4\x9a\x38\x7d\xb7\x1c\xde\x95\x55\x39\xd2\x23\xe8\x46\x28\x9a\x1b\x9b\x91\xc4\x94\xa5\x42\x1d\xd0\xdc\x5a\x18\x33\x0c\x5d\xc9\xa3\x61\xbb\xa1\x03\x79\x14\x3c\xd9\x8c\x48\x48\x72\xfe\x53\x7b\x71\xc8\xd1\x5d\x89\xc2\xd1\x65\x01\xdd\x88\x42\xf1\x62\x63\x62\x78\xb4\x92\x18\x1e\x75\x25\x06\x47\x75\x13\x3a\x13\xc3\xa3\x0d\x89\x21\xe3\xa4\xbd\x14\x32\x4e\xba\x12\x82\xa3\x6b\x05\xba\x11\x82\xe4\xc4\x66\x64\x90\xe2\xf8\x7c\xc9\x37\xcb\x8f\x20\xc5\x31\xa2\x82\x04\x70\x8e\x79\x4a\x18\xad\xa7\x59\x1a\xa9\x94\x41\x79\x9c\x58\x71\x69\x78\xed\xdc\xcd\xe7\xd8\x8e\xc1\x96\x3b\x4b\xbf\x78\xfe\x07\xa6\xa7\x62\xba\x42\xcf\xab\x46\xd0\xd1\xba\xd6\xa7\x51\x6b\x89\x3e\xce\xfd\xe5\xb8\x43\xe8\x8a\xdc\x99\x21\xe8\x88\x3b\x3e\xdb\x8c\xcb\x74\xb9\x5a\x61\xca\xc2\xee\xb6\x13\xb6\xeb\x8a\xd4\xb6\x13\xf6\xa6\x4a\xa6\x65\xdf\xc2\x8a\xdd\x0a\x1d\x49\xed\x17\x0f\xa1\x35\x84\xba\xb2\x74\xd7\xe3\xf8\x14\x5f\xde\xa6\xb3\x7d\xef\x58\x46\x5a\x47\xcd\x46\x14\xd0\x46\xc8\xd9\x17\x77\x58\x26\xea\x9f\xdc\x71\xe8\xef\xfc\x58\x9e\xd1\x55\x3f\xd5\x73\x04\x29\xa1\xa7\x11\x06\xca\xc2\xe2\x4b\x47\xc7\x01\x8a\x22\x38\xe5\x28\x99\x96\xba\x84\xe9\xe0\x82\x9c\x91\x04\x87\x44\x7f\xd3\x49\xfe\x1a\x3e\x41\x51\xf4\x49\x41\x96\x5a\x62\xa8\x73\x56\xd5\xda\xfe\xd1\x93\x5e\x7e\x3e\xe3\x7c\xaa\x53\x26\x2a\x15\xfe\x7b\x22\x64\xc9\xba\x30\x25\x88\xa3\x28\xc2\xd1\xba\xf0\xa5\x98\x13\x64\xc3\x96\xff\xaf\xf8\x9e\x8b\x6d\x53\xaf\xc2\xb0\xda\x87\x92\x8a\xf4\xb8\x80\x90\x92\xea\xb9\x14\x78\xee\x9e\xeb\xe3\x31\x41\x6c\xea\xad\xa9\x6b\xd6\x13\x16\xc7\x88\x86\xc0\x33\x2a\x53\x6a\x04\x05\x25\xbf\x01\x3b\xc7\x9c\x93\x50\x7d\x9e\xeb\x0a\x52\x2c\x00\x09\xa5\x79\xba\xfa\x19\xe1\x73\xbc\x58\x81\x6b\x88\x10\x8e\xc8\x50\x27\xed\xd9\x65\xc2\x71\xaa\xf2\xfe\x80\x61\x1e\x90\x71\x84\x41\xb0\xd9\x66\xb0\xed\x30\x68\xb3\x61\xf2\x8c\xce\xf5\x42\x25\x2b\x44\x1d\x65\x38\xc3\xfd\xba\x7b\x9c\xf7\x60\x86\x13\xa3\x4d\xd3\x6e\xda\x2c\xb6\x1d\x01\x4d\x70\x0a\x84\x2a\x69\x94\xda\xb5\xd8\x92\xe0\xd5\x69\xd7\xfb\xb8\x73\xac\xe7\x78\x72\xb0\x7b\x78\xdc\xff\x34\x18\x8d\x86\x95\xcf\x7b\xdd\xb5\x6d\x8c\xbb\x77\x4a\x7c\x83\xe4\xce\x05\x89\x22\x18\x63\x18\xb3\x8c\x86\x4a\xc2\x28\x2e\x0e\x79\x05\x96\x78\x1d\x60\x14\x59\xca\x9f\x96\x60\xee\x4b\x9c\x4d\x09\x43\xc2\xb5\x06\xc2\x7f\x0d\x19\x87\x34\x60\x89\xda\x0f\x50\xe4\x63\x01\x59\xc2\x28\xe0\x4b\xe2\x68\x08\xdc\x94\x9e\xe6\x7c\x31\x5c\x5d\x5c\x6c\x36\x47\x65\xef\x20\x5f\x37\x08\x4c\xcf\x3f\x20\xb3\x4d\xd8\xf5\xca\xa8\x86\xcb\x74\x01\x81\xbf\x59\x28\xd0\x8f\xc7\x1f\x1f\xdb\x2d\xa0\x81\x5a\x17\xd5\xc5\xf0\x46\x6b\x20\xb4\xa2\x5e\x17\x43\x6d\x1d\x14\xc5\xbe\x5b\x3f\x76\xdb\x80\x15\x2a\x3b\xeb\x71\xd6\x15\x84\x3e\xe6\x50\xb8\xba\xb9\x7e\x73\x67\x9d\x7d\xc9\xc2\x8a\x77\x72\xdb\xe2\x6c\x1f\x9f\x86\xa7\x3f\x8b\x2d\x45\xc1\x00\xf9\x7c\xf1\xc0\x91\xd4\x57\x56\x2c\xbd\x8f\xa3\xd1\xdd\xd1\x68\x67\x70\x6f\x34\xda\xbd\xdb\xdc\xb1\x77\xd2\x14\x88\x9e\xd1\x73\xc2\x19\x8d\x31\x15\x70\x8e\x38\x41\xe3\xc8\x14\x92\x9c\x2e\x60\x42\x22\xa3\xed\x2d\x1b\x14\x9f\x13\xe3\xb3\xb7\xe1\x70\xf1\xaf\xa3\x70\xa8\x0e\x39\xbf\x86\x78\xb8\xa4\x03\xd8\x78\x90\x53\x99\x72\x1b\x0d\x6f\x6a\x26\xd5\xbc\x5a\xde\xa3\x50\x9d\xbc\x9b\xdd\xc5\xe6\x32\x12\x53\x67\x66\x92\x45\xd1\x13\x8e\x43\x6b\x5f\xe6\xf2\xe4\x96\x28\x5b\x28\x81\xfb\x2b\xa0\x86\x4e\x88\x45\x1f\xda\x5a\x8f\x6a\x1f\x40\x2e\xae\x9b\x3e\x84\x3c\xe7\x04\x21\x40\x54\x3a\x93\xa2\x5f\x44\xed\x9c\xa8\xef\x25\x30\x31\xc5\xbc\x84\x5c\x6c\x66\xb5\xbf\x0d\x69\x2d\xff\x15\xbd\xb7\x86\x5b\xf9\x21\xa3\x86\x3b\xd6\x46\x59\xbf\x6f\xab\xd6\x78\x95\x30\x6e\xec\xe5\x5d\x78\xf7\x5a\xc2\xe5\x5e\x56\x31\x64\x9e\x71\x82\xa9\x0b\x53\x96\x1a\xcc\xb3\xd1\x7c\xfd\x22\xcd\xb1\x0a\x28\x3b\x7d\xfd\xef\xee\xe1\x8e\x08\x92\x7f\x67\x61\xb2\x7b\xe8\x69\xdc\xff\xcb\x52\x01\x72\xc2\x3b\xe9\xae\xa4\x78\x4c\x54\xc8\x70\x66\x0c\xe6\xf0\xe4\x2e\x0e\x3a\x4e\x88\x5d\xd0\x72\xa8\x65\x1e\xf5\x49\xb6\xb1\xbd\xd6\x86\xa3\x5f\x68\x68\x95\x64\xf8\xca\xf0\xc0\xfe\x25\xec\x02\x68\xa1\xea\x32\xd3\xb2\xfc\x85\x0b\x14\x86\x32\xae\x42\x8c\x92\x04\x87\x3a\xf7\xcb\x6f\xd9\x7a\xd4\x9a\xdb\xef\xbb\xe3\xea\x05\xe3\x67\x4f\xcd\x9f\xc0\xaa\xcd\xf4\xff\x19\x3f\x93\x0b\x80\xb0\xf2\xe9\x2a\x31\x85\x9d\xf9\xda\x52\x65\x53\x57\x85\xa7\xc5\x14\xc7\x39\x5b\x7b\xf5\xd7\x5e\xd9\xd3\x61\xb0\x72\x6d\xfe\xb3\xcc\x5e\xac\xa9\x3c\xab\x17\x31\x96\xd4\xcb\x7b\xae\xf2\xdc\x84\x19\xd9\xd7\x14\xf7\x31\x0a\x6c\xdb\x97\x75\xd6\x7f\x50\xe9\x98\x74\x0a\x18\x24\x75\x38\x54\x15\xbd\x36\xbe\xc1\xb5\xdb\xe3\x7e\xf1\xd1\xd1\x5a\x6c\x48\xc4\x0c\x11\xe0\x0c\xdb\x5e\x65\x5f\x9c\xaf\x5e\x85\x80\xe4\x11\x10\x81\xb9\xda\x26\x49\x01\xa5\x29\x0b\x08\x12\xfa\x65\x41\x98\xe5\xd7\x31\x0a\x31\xa0\x73\x44\x22\x35\x4a\x4c\x39\xcb\x4e\xa7\x2d\x6d\xcd\x40\xb9\x5e\xbb\xad\x8f\x76\x9d\x5e\x77\x42\xfd\x8a\xb9\x8f\x52\xca\xc6\xe4\x67\x99\x57\xbe\x08\x0d\xf1\xa5\xcb\x69\x1b\xdd\x40\x0d\x49\x46\x05\x89\x3c\x7c\xd4\x8b\x89\x72\x42\x09\xc7\x21\x09\x90\xc0\x80\x25\xab\x91\xc0\xa9\x5a\xda\xa8\x32\x92\xca\x05\xa4\x15\x69\x01\xc8\x95\xcc\x00\xde\xcc\x46\xa4\x80\x78\x39\x2c\x84\x31\x9e\x30\x75\x01\xf3\xab\x52\x9a\x83\x75\x16\xcb\x7d\x92\x5f\x32\x19\x6a\x0c\x75\xf9\x7a\x7a\x4f\xeb\xde\x59\xc5\xef\x91\xfa\x3a\xa4\x35\x77\xd5\x76\xd6\x0e\xe3\x30\x52\xce\x74\xd4\x2b\x39\xb7\x5b\xa8\x7d\x7a\x46\x64\x84\x1c\x98\xf7\x48\x16\xd9\x68\x61\xa1\x21\x20\x6b\x7f\x0f\x17\x53\x12\x4c\xe7\x69\x14\x3c\xc3\xc0\xb8\xa6\xb5\x26\x24\xeb\xa2\xdf\xb8\x66\x73\x18\x91\x34\xa3\xcf\x8b\xa6\x59\x77\x92\x0b\xa6\xd9\xe6\x39\x97\x24\x35\xed\x89\x77\xf1\x2c\x6a\x58\x99\x77\xf2\x1c\x26\x9e\xf9\x4e\x6b\xee\xf7\x49\x7d\xf5\xe0\x0a\xc0\x52\x44\x3e\x5b\x57\xef\xa4\xc6\x90\x09\x48\x8d\xd6\x9f\x41\x57\xfe\xe1\x73\x86\x4c\x2d\xeb\x8d\x4d\x15\xce\x76\x8a\xb5\x55\x62\x37\xb9\xfc\x6f\x0c\x40\xb9\xce\x2e\xc3\x7c\x1d\x2f\xf5\x40\xb8\x18\x96\x4b\x60\x97\x08\xac\xab\x20\xef\x5a\xea\x22\xed\xd4\x9c\x05\x58\x95\x86\x5e\x95\x4a\x43\x7f\x10\x5b\xbd\x59\x41\x6f\x4a\xbf\xb0\x8c\x08\x28\xdb\x98\xf6\x38\x33\x1a\x7b\x0a\xf5\xc5\x18\x9c\x17\x97\x24\x6d\xbb\x09\xf2\xc6\x16\x8f\x64\x8a\x12\x41\x50\x44\xfe\xc1\x29\xbc\x78\xf5\xe6\xfd\xbb\x4f\xaf\x8e\x5e\x3e\xd3\x05\x96\x0f\x47\x7f\xbc\x7f\x06\x84\xe6\x0d\xd5\xf0\x43\x09\x70\xa0\x6f\xfe\x30\x80\x17\x93\x19\x5c\x0a\x34\x8b\xa2\xfb\x40\x04\xbc\x7c\xff\xf6\x9d\xfa\xac\x54\x9a\x66\x31\x0e\x73\x88\xc7\x8f\xe1\xee\x4e\x89\xc3\xb1\x6a\x5c\x75\x8d\x5f\x55\x4a\xfb\x2a\xbf\xe5\x06\xc0\x75\x56\xed\x0d\xe9\x8d\x6b\x97\x09\x1a\xd7\x86\xd0\xb4\x3e\x04\x77\x59\xb0\x00\xb1\x96\x07\x0b\x88\x86\x13\x76\x1a\xcf\x59\xf3\xdf\xf2\xbb\xd6\x3d\x82\xc5\xde\xb2\xe2\x96\xc3\xb6\x4a\xab\x7a\xfd\xfe\x5d\x61\x66\x15\xdb\xd2\x56\x55\xb9\xa9\x6d\x6b\x0e\xda\x61\x61\x0a\xe0\xf1\xe3\x2a\xfc\xd6\xbc\x6a\x18\x5d\xea\xb6\x71\xb5\x72\x6d\x9f\x2c\xbb\xc1\x2a\xf1\x60\x2a\x75\x2f\x85\x2c\xc5\x21\x84\x99\x4a\x0a\x50\x26\xa6\xf2\x7a\x80\xf4\xda\x89\x88\x69\x7e\x8c\x4c\xc6\x03\x9c\x9f\x95\xa2\xbb\xc5\x18\x6f\x75\x68\x4a\x96\x62\x6e\xd9\xfc\x30\x11\x7a\x2b\x93\x18\x63\xba\x90\xa6\x17\x8c\xdb\x4e\xc7\xfa\x2a\xa6\xdd\xa8\xfa\xee\xa2\x53\xa1\x19\x2e\xf6\xd5\x6e\xad\x71\x47\xce\xbc\x01\xdb\xb4\xf9\x6a\x32\x81\x86\xe4\xb1\xd2\x95\x9d\x71\xd2\x2f\xf3\xd0\x79\xf2\xee\x58\x48\x75\x94\xc0\x6b\x5b\x96\x2b\x16\xc0\x8b\xd6\x5b\x5b\x8f\xeb\x0c\xc0\xde\xe2\xea\x5f\xbe\xb1\xa9\x6d\x73\x4a\x9c\x77\xf4\xda\x88\xd4\xb7\x37\x40\xe2\x9d\x1a\xa9\x95\xde\x60\x34\x8b\x5b\xb3\x8e\xf2\xfc\x75\xb8\x6a\x57\x79\xbd\x9e\x9c\xbf\x30\x97\xb7\x8a\x57\xd4\xce\x4c\x17\x4b\xd2\x04\x07\xb5\x9e\x77\x7d\xcd\xeb\x21\xc7\x1a\xb8\xec\x43\xd7\xbf\x07\x84\xed\xea\x80\x31\xbe\x5a\x20\xa4\xfa\x6e\xe0\x87\x4a\xe6\x67\x33\x88\xb9\x35\xd4\x4e\xbe\x9b\x38\x1a\x0d\x0c\xff\xdd\x39\x3c\xd8\x19\x8d\xd4\x8e\xe3\x51\xff\x2f\xd4\xff\xa7\x7f\x72\x6f\xe7\xf0\x60\x34\x1a\xcc\x5d\xda\xfd\xef\xdd\xdd\x43\x75\xfd\x5e\xe5\xfa\x68\xd4\x1f\x8d\x06\x27\xf7\x76\x0f\xf3\xd5\x99\x94\x8d\x62\xca\xa2\x2d\xf5\x66\xbd\x27\xca\x78\xdc\x46\xf3\xe5\x3f\x01\x00\x00\xff\xff\xb2\x6c\x3d\xa6\x86\x99\x00\x00")

func githubComOpctlSpecsOpspecOpfileJsonschemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_githubComOpctlSpecsOpspecOpfileJsonschemaJson,
		"github.com/opctl/specs/opspec/opfile/jsonschema.json",
	)
}

func githubComOpctlSpecsOpspecOpfileJsonschemaJson() (*asset, error) {
	bytes, err := githubComOpctlSpecsOpspecOpfileJsonschemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "github.com/opctl/specs/opspec/opfile/jsonschema.json", size: 39302, mode: os.FileMode(420), modTime: time.Unix(1561493458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github.com/opctl/specs/opspec/opfile/jsonschema.json": githubComOpctlSpecsOpspecOpfileJsonschemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"github.com": &bintree{nil, map[string]*bintree{
		"opctl": &bintree{nil, map[string]*bintree{
			"specs": &bintree{nil, map[string]*bintree{
				"opspec": &bintree{nil, map[string]*bintree{
					"opfile": &bintree{nil, map[string]*bintree{
						"jsonschema.json": &bintree{githubComOpctlSpecsOpspecOpfileJsonschemaJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
