// This file was generated by counterfeiter
package core

import (
  "sync"
)

type FakeContainerEngine struct {
  StartContainerStub                func(opRunArgs map[string]string, opBundlePath string, opName string, opRunId string, eventPublisher EventPublisher, rootOpRunId string) (err error)
  startContainerMutex               sync.RWMutex
  startContainerArgsForCall         []struct {
    opRunArgs      map[string]string
    opBundlePath   string
    opName         string
    opRunId        string
    eventPublisher EventPublisher
    rootOpRunId    string
  }
  startContainerReturns             struct {
                                      result1 error
                                    }
  EnsureContainerRemovedStub        func(opBundlePath string, opRunId string)
  ensureContainerRemovedMutex       sync.RWMutex
  ensureContainerRemovedArgsForCall []struct {
    opBundlePath string
    opRunId      string
  }
  invocations                       map[string][][]interface{}
  invocationsMutex                  sync.RWMutex
}

func (fake *FakeContainerEngine) StartContainer(opRunArgs map[string]string, opBundlePath string, opName string, opRunId string, eventPublisher EventPublisher, rootOpRunId string) (err error) {
  fake.startContainerMutex.Lock()
  fake.startContainerArgsForCall = append(fake.startContainerArgsForCall, struct {
    opRunArgs      map[string]string
    opBundlePath   string
    opName         string
    opRunId        string
    eventPublisher EventPublisher
    rootOpRunId    string
  }{opRunArgs, opBundlePath, opName, opRunId, eventPublisher, rootOpRunId})
  fake.recordInvocation("StartContainer", []interface{}{opRunArgs, opBundlePath, opName, opRunId, eventPublisher, rootOpRunId})
  fake.startContainerMutex.Unlock()
  if fake.StartContainerStub != nil {
    return fake.StartContainerStub(opRunArgs, opBundlePath, opName, opRunId, eventPublisher, rootOpRunId)
  } else {
    return fake.startContainerReturns.result1
  }
}

func (fake *FakeContainerEngine) StartContainerCallCount() int {
  fake.startContainerMutex.RLock()
  defer fake.startContainerMutex.RUnlock()
  return len(fake.startContainerArgsForCall)
}

func (fake *FakeContainerEngine) StartContainerArgsForCall(i int) (map[string]string, string, string, string, EventPublisher, string) {
  fake.startContainerMutex.RLock()
  defer fake.startContainerMutex.RUnlock()
  return fake.startContainerArgsForCall[i].opRunArgs, fake.startContainerArgsForCall[i].opBundlePath, fake.startContainerArgsForCall[i].opName, fake.startContainerArgsForCall[i].opRunId, fake.startContainerArgsForCall[i].eventPublisher, fake.startContainerArgsForCall[i].rootOpRunId
}

func (fake *FakeContainerEngine) StartContainerReturns(result1 error) {
  fake.StartContainerStub = nil
  fake.startContainerReturns = struct {
    result1 error
  }{result1}
}

func (fake *FakeContainerEngine) EnsureContainerRemoved(opBundlePath string, opRunId string) {
  fake.ensureContainerRemovedMutex.Lock()
  fake.ensureContainerRemovedArgsForCall = append(fake.ensureContainerRemovedArgsForCall, struct {
    opBundlePath string
    opRunId      string
  }{opBundlePath, opRunId})
  fake.recordInvocation("EnsureContainerRemoved", []interface{}{opBundlePath, opRunId})
  fake.ensureContainerRemovedMutex.Unlock()
  if fake.EnsureContainerRemovedStub != nil {
    fake.EnsureContainerRemovedStub(opBundlePath, opRunId)
  }
}

func (fake *FakeContainerEngine) EnsureContainerRemovedCallCount() int {
  fake.ensureContainerRemovedMutex.RLock()
  defer fake.ensureContainerRemovedMutex.RUnlock()
  return len(fake.ensureContainerRemovedArgsForCall)
}

func (fake *FakeContainerEngine) EnsureContainerRemovedArgsForCall(i int) (string, string) {
  fake.ensureContainerRemovedMutex.RLock()
  defer fake.ensureContainerRemovedMutex.RUnlock()
  return fake.ensureContainerRemovedArgsForCall[i].opBundlePath, fake.ensureContainerRemovedArgsForCall[i].opRunId
}

func (fake *FakeContainerEngine) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.startContainerMutex.RLock()
  defer fake.startContainerMutex.RUnlock()
  fake.ensureContainerRemovedMutex.RLock()
  defer fake.ensureContainerRemovedMutex.RUnlock()
  return fake.invocations
}

func (fake *FakeContainerEngine) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ContainerEngine = new(FakeContainerEngine)
