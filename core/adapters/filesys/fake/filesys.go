// This file was generated by counterfeiter
package core

import (
  "sync"
  "github.com/dev-op-spec/engine/core/ports"
)

func New() ports.Filesys {

  return new(filesys)

}

type filesys struct {
  CreateDevOpDirStub                 func(devOpName string) (err error)
  createDevOpDirMutex                sync.RWMutex
  createDevOpDirArgsForCall          []struct {
    devOpName string
  }
  createDevOpDirReturns              struct {
                                       result1 error
                                     }
  CreatePipelineDirStub              func(pipelineName string) (err error)
  createPipelineDirMutex             sync.RWMutex
  createPipelineDirArgsForCall       []struct {
    pipelineName string
  }
  createPipelineDirReturns           struct {
                                       result1 error
                                     }
  ListNamesOfDevOpDirsStub           func() (namesOfDevOpDirs []string, err error)
  listNamesOfDevOpDirsMutex          sync.RWMutex
  listNamesOfDevOpDirsArgsForCall    []struct{}
  listNamesOfDevOpDirsReturns        struct {
                                       result1 []string
                                       result2 error
                                     }
  ListNamesOfPipelineDirsStub        func() (namesOfPipelineDirs []string, err error)
  listNamesOfPipelineDirsMutex       sync.RWMutex
  listNamesOfPipelineDirsArgsForCall []struct{}
  listNamesOfPipelineDirsReturns     struct {
                                       result1 []string
                                       result2 error
                                     }
  ReadDevOpFileStub                  func(devOpName string) (file []byte, err error)
  readDevOpFileMutex                 sync.RWMutex
  readDevOpFileArgsForCall           []struct {
    devOpName string
  }
  readDevOpFileReturns               struct {
                                       result1 []byte
                                       result2 error
                                     }
  ReadPipelineFileStub               func(pipelineName string) (file []byte, err error)
  readPipelineFileMutex              sync.RWMutex
  readPipelineFileArgsForCall        []struct {
    pipelineName string
  }
  readPipelineFileReturns            struct {
                                       result1 []byte
                                       result2 error
                                     }
  SaveDevOpFileStub                  func(devOpName string, data []byte) (err error)
  saveDevOpFileMutex                 sync.RWMutex
  saveDevOpFileArgsForCall           []struct {
    devOpName string
    data      []byte
  }
  saveDevOpFileReturns               struct {
                                       result1 error
                                     }
  SavePipelineFileStub               func(pipelineName string, data []byte) (err error)
  savePipelineFileMutex              sync.RWMutex
  savePipelineFileArgsForCall        []struct {
    pipelineName string
    data         []byte
  }
  savePipelineFileReturns            struct {
                                       result1 error
                                     }
}

func (fake *filesys) CreateDevOpDir(devOpName string) (err error) {
  fake.createDevOpDirMutex.Lock()
  fake.createDevOpDirArgsForCall = append(fake.createDevOpDirArgsForCall, struct {
    devOpName string
  }{devOpName})
  fake.createDevOpDirMutex.Unlock()
  if fake.CreateDevOpDirStub != nil {
    return fake.CreateDevOpDirStub(devOpName)
  } else {
    return fake.createDevOpDirReturns.result1
  }
}

func (fake *filesys) CreateDevOpDirCallCount() int {
  fake.createDevOpDirMutex.RLock()
  defer fake.createDevOpDirMutex.RUnlock()
  return len(fake.createDevOpDirArgsForCall)
}

func (fake *filesys) CreateDevOpDirArgsForCall(i int) string {
  fake.createDevOpDirMutex.RLock()
  defer fake.createDevOpDirMutex.RUnlock()
  return fake.createDevOpDirArgsForCall[i].devOpName
}

func (fake *filesys) CreateDevOpDirReturns(result1 error) {
  fake.CreateDevOpDirStub = nil
  fake.createDevOpDirReturns = struct {
    result1 error
  }{result1}
}

func (fake *filesys) CreatePipelineDir(pipelineName string) (err error) {
  fake.createPipelineDirMutex.Lock()
  fake.createPipelineDirArgsForCall = append(fake.createPipelineDirArgsForCall, struct {
    pipelineName string
  }{pipelineName})
  fake.createPipelineDirMutex.Unlock()
  if fake.CreatePipelineDirStub != nil {
    return fake.CreatePipelineDirStub(pipelineName)
  } else {
    return fake.createPipelineDirReturns.result1
  }
}

func (fake *filesys) CreatePipelineDirCallCount() int {
  fake.createPipelineDirMutex.RLock()
  defer fake.createPipelineDirMutex.RUnlock()
  return len(fake.createPipelineDirArgsForCall)
}

func (fake *filesys) CreatePipelineDirArgsForCall(i int) string {
  fake.createPipelineDirMutex.RLock()
  defer fake.createPipelineDirMutex.RUnlock()
  return fake.createPipelineDirArgsForCall[i].pipelineName
}

func (fake *filesys) CreatePipelineDirReturns(result1 error) {
  fake.CreatePipelineDirStub = nil
  fake.createPipelineDirReturns = struct {
    result1 error
  }{result1}
}

func (fake *filesys) ListNamesOfDevOpDirs() (namesOfDevOpDirs []string, err error) {
  fake.listNamesOfDevOpDirsMutex.Lock()
  fake.listNamesOfDevOpDirsArgsForCall = append(fake.listNamesOfDevOpDirsArgsForCall, struct{}{})
  fake.listNamesOfDevOpDirsMutex.Unlock()
  if fake.ListNamesOfDevOpDirsStub != nil {
    return fake.ListNamesOfDevOpDirsStub()
  } else {
    return fake.listNamesOfDevOpDirsReturns.result1, fake.listNamesOfDevOpDirsReturns.result2
  }
}

func (fake *filesys) ListNamesOfDevOpDirsCallCount() int {
  fake.listNamesOfDevOpDirsMutex.RLock()
  defer fake.listNamesOfDevOpDirsMutex.RUnlock()
  return len(fake.listNamesOfDevOpDirsArgsForCall)
}

func (fake *filesys) ListNamesOfDevOpDirsReturns(result1 []string, result2 error) {
  fake.ListNamesOfDevOpDirsStub = nil
  fake.listNamesOfDevOpDirsReturns = struct {
    result1 []string
    result2 error
  }{result1, result2}
}

func (fake *filesys) ListNamesOfPipelineDirs() (namesOfPipelineDirs []string, err error) {
  fake.listNamesOfPipelineDirsMutex.Lock()
  fake.listNamesOfPipelineDirsArgsForCall = append(fake.listNamesOfPipelineDirsArgsForCall, struct{}{})
  fake.listNamesOfPipelineDirsMutex.Unlock()
  if fake.ListNamesOfPipelineDirsStub != nil {
    return fake.ListNamesOfPipelineDirsStub()
  } else {
    return fake.listNamesOfPipelineDirsReturns.result1, fake.listNamesOfPipelineDirsReturns.result2
  }
}

func (fake *filesys) ListNamesOfPipelineDirsCallCount() int {
  fake.listNamesOfPipelineDirsMutex.RLock()
  defer fake.listNamesOfPipelineDirsMutex.RUnlock()
  return len(fake.listNamesOfPipelineDirsArgsForCall)
}

func (fake *filesys) ListNamesOfPipelineDirsReturns(result1 []string, result2 error) {
  fake.ListNamesOfPipelineDirsStub = nil
  fake.listNamesOfPipelineDirsReturns = struct {
    result1 []string
    result2 error
  }{result1, result2}
}

func (fake *filesys) ReadDevOpFile(devOpName string) (file []byte, err error) {
  fake.readDevOpFileMutex.Lock()
  fake.readDevOpFileArgsForCall = append(fake.readDevOpFileArgsForCall, struct {
    devOpName string
  }{devOpName})
  fake.readDevOpFileMutex.Unlock()
  if fake.ReadDevOpFileStub != nil {
    return fake.ReadDevOpFileStub(devOpName)
  } else {
    return fake.readDevOpFileReturns.result1, fake.readDevOpFileReturns.result2
  }
}

func (fake *filesys) ReadDevOpFileCallCount() int {
  fake.readDevOpFileMutex.RLock()
  defer fake.readDevOpFileMutex.RUnlock()
  return len(fake.readDevOpFileArgsForCall)
}

func (fake *filesys) ReadDevOpFileArgsForCall(i int) string {
  fake.readDevOpFileMutex.RLock()
  defer fake.readDevOpFileMutex.RUnlock()
  return fake.readDevOpFileArgsForCall[i].devOpName
}

func (fake *filesys) ReadDevOpFileReturns(result1 []byte, result2 error) {
  fake.ReadDevOpFileStub = nil
  fake.readDevOpFileReturns = struct {
    result1 []byte
    result2 error
  }{result1, result2}
}

func (fake *filesys) ReadPipelineFile(pipelineName string) (file []byte, err error) {
  fake.readPipelineFileMutex.Lock()
  fake.readPipelineFileArgsForCall = append(fake.readPipelineFileArgsForCall, struct {
    pipelineName string
  }{pipelineName})
  fake.readPipelineFileMutex.Unlock()
  if fake.ReadPipelineFileStub != nil {
    return fake.ReadPipelineFileStub(pipelineName)
  } else {
    return fake.readPipelineFileReturns.result1, fake.readPipelineFileReturns.result2
  }
}

func (fake *filesys) ReadPipelineFileCallCount() int {
  fake.readPipelineFileMutex.RLock()
  defer fake.readPipelineFileMutex.RUnlock()
  return len(fake.readPipelineFileArgsForCall)
}

func (fake *filesys) ReadPipelineFileArgsForCall(i int) string {
  fake.readPipelineFileMutex.RLock()
  defer fake.readPipelineFileMutex.RUnlock()
  return fake.readPipelineFileArgsForCall[i].pipelineName
}

func (fake *filesys) ReadPipelineFileReturns(result1 []byte, result2 error) {
  fake.ReadPipelineFileStub = nil
  fake.readPipelineFileReturns = struct {
    result1 []byte
    result2 error
  }{result1, result2}
}

func (fake *filesys) SaveDevOpFile(devOpName string, data []byte) (err error) {
  fake.saveDevOpFileMutex.Lock()
  fake.saveDevOpFileArgsForCall = append(fake.saveDevOpFileArgsForCall, struct {
    devOpName string
    data      []byte
  }{devOpName, data})
  fake.saveDevOpFileMutex.Unlock()
  if fake.SaveDevOpFileStub != nil {
    return fake.SaveDevOpFileStub(devOpName, data)
  } else {
    return fake.saveDevOpFileReturns.result1
  }
}

func (fake *filesys) SaveDevOpFileCallCount() int {
  fake.saveDevOpFileMutex.RLock()
  defer fake.saveDevOpFileMutex.RUnlock()
  return len(fake.saveDevOpFileArgsForCall)
}

func (fake *filesys) SaveDevOpFileArgsForCall(i int) (string, []byte) {
  fake.saveDevOpFileMutex.RLock()
  defer fake.saveDevOpFileMutex.RUnlock()
  return fake.saveDevOpFileArgsForCall[i].devOpName, fake.saveDevOpFileArgsForCall[i].data
}

func (fake *filesys) SaveDevOpFileReturns(result1 error) {
  fake.SaveDevOpFileStub = nil
  fake.saveDevOpFileReturns = struct {
    result1 error
  }{result1}
}

func (fake *filesys) SavePipelineFile(pipelineName string, data []byte) (err error) {
  fake.savePipelineFileMutex.Lock()
  fake.savePipelineFileArgsForCall = append(fake.savePipelineFileArgsForCall, struct {
    pipelineName string
    data         []byte
  }{pipelineName, data})
  fake.savePipelineFileMutex.Unlock()
  if fake.SavePipelineFileStub != nil {
    return fake.SavePipelineFileStub(pipelineName, data)
  } else {
    return fake.savePipelineFileReturns.result1
  }
}

func (fake *filesys) SavePipelineFileCallCount() int {
  fake.savePipelineFileMutex.RLock()
  defer fake.savePipelineFileMutex.RUnlock()
  return len(fake.savePipelineFileArgsForCall)
}

func (fake *filesys) SavePipelineFileArgsForCall(i int) (string, []byte) {
  fake.savePipelineFileMutex.RLock()
  defer fake.savePipelineFileMutex.RUnlock()
  return fake.savePipelineFileArgsForCall[i].pipelineName, fake.savePipelineFileArgsForCall[i].data
}

func (fake *filesys) SavePipelineFileReturns(result1 error) {
  fake.SavePipelineFileStub = nil
  fake.savePipelineFileReturns = struct {
    result1 error
  }{result1}
}
