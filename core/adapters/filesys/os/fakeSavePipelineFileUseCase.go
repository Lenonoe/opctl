// This file was generated by counterfeiter
package os

import "sync"

type FakeSavePipelineFileUseCase struct {
  ExecuteStub        func(pipelineName string, data []byte) (err error)
  executeMutex       sync.RWMutex
  executeArgsForCall []struct {
    pipelineName string
    data         []byte
  }
  executeReturns     struct {
                       result1 error
                     }
}

func (fake *FakeSavePipelineFileUseCase) Execute(pipelineName string, data []byte) (err error) {
  fake.executeMutex.Lock()
  fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
    pipelineName string
    data         []byte
  }{pipelineName, data})
  fake.executeMutex.Unlock()
  if fake.ExecuteStub != nil {
    return fake.ExecuteStub(pipelineName, data)
  } else {
    return fake.executeReturns.result1
  }
}

func (fake *FakeSavePipelineFileUseCase) ExecuteCallCount() int {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return len(fake.executeArgsForCall)
}

func (fake *FakeSavePipelineFileUseCase) ExecuteArgsForCall(i int) (string, []byte) {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return fake.executeArgsForCall[i].pipelineName, fake.executeArgsForCall[i].data
}

func (fake *FakeSavePipelineFileUseCase) ExecuteReturns(result1 error) {
  fake.ExecuteStub = nil
  fake.executeReturns = struct {
    result1 error
  }{result1}
}
