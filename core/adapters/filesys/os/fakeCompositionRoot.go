// This file was generated by counterfeiter
package os

import (
  "sync"
)

type fakeCompositionRoot struct {
  ListNamesOfChildDirsUseCaseStub        func() listNamesOfChildDirsUseCase
  listNamesOfChildDirsUseCaseMutex       sync.RWMutex
  listNamesOfChildDirsUseCaseArgsForCall []struct{}
  listNamesOfChildDirsUseCaseReturns     struct {
                                           result1 listNamesOfChildDirsUseCase
                                         }
  GetBytesOfFileUseCaseStub              func() getBytesOfFileUseCase
  getBytesOfFileUseCaseMutex             sync.RWMutex
  getBytesOfFileUseCaseArgsForCall       []struct{}
  getBytesOfFileUseCaseReturns           struct {
                                           result1 getBytesOfFileUseCase
                                         }
  SaveFileUseCaseStub                    func() saveFileUseCase
  saveFileUseCaseMutex                   sync.RWMutex
  saveFileUseCaseArgsForCall             []struct{}
  saveFileUseCaseReturns                 struct {
                                           result1 saveFileUseCase
                                         }
  CreateDirUseCaseStub                   func() createDirUseCase
  createDirUseCaseMutex                  sync.RWMutex
  createDirUseCaseArgsForCall            []struct{}
  createDirUseCaseReturns                struct {
                                           result1 createDirUseCase
                                         }
}

func (fake *fakeCompositionRoot) ListNamesOfChildDirsUseCase() listNamesOfChildDirsUseCase {
  fake.listNamesOfChildDirsUseCaseMutex.Lock()
  fake.listNamesOfChildDirsUseCaseArgsForCall = append(fake.listNamesOfChildDirsUseCaseArgsForCall, struct{}{})
  fake.listNamesOfChildDirsUseCaseMutex.Unlock()
  if fake.ListNamesOfChildDirsUseCaseStub != nil {
    return fake.ListNamesOfChildDirsUseCaseStub()
  } else {
    return fake.listNamesOfChildDirsUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) ListNamesOfChildDirsUseCaseCallCount() int {
  fake.listNamesOfChildDirsUseCaseMutex.RLock()
  defer fake.listNamesOfChildDirsUseCaseMutex.RUnlock()
  return len(fake.listNamesOfChildDirsUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) ListNamesOfChildDirsUseCaseReturns(result1 listNamesOfChildDirsUseCase) {
  fake.ListNamesOfChildDirsUseCaseStub = nil
  fake.listNamesOfChildDirsUseCaseReturns = struct {
    result1 listNamesOfChildDirsUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) GetBytesOfFileUseCase() getBytesOfFileUseCase {
  fake.getBytesOfFileUseCaseMutex.Lock()
  fake.getBytesOfFileUseCaseArgsForCall = append(fake.getBytesOfFileUseCaseArgsForCall, struct{}{})
  fake.getBytesOfFileUseCaseMutex.Unlock()
  if fake.GetBytesOfFileUseCaseStub != nil {
    return fake.GetBytesOfFileUseCaseStub()
  } else {
    return fake.getBytesOfFileUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) GetBytesOfFileUseCaseCallCount() int {
  fake.getBytesOfFileUseCaseMutex.RLock()
  defer fake.getBytesOfFileUseCaseMutex.RUnlock()
  return len(fake.getBytesOfFileUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) GetBytesOfFileUseCaseReturns(result1 getBytesOfFileUseCase) {
  fake.GetBytesOfFileUseCaseStub = nil
  fake.getBytesOfFileUseCaseReturns = struct {
    result1 getBytesOfFileUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) SaveFileUseCase() saveFileUseCase {
  fake.saveFileUseCaseMutex.Lock()
  fake.saveFileUseCaseArgsForCall = append(fake.saveFileUseCaseArgsForCall, struct{}{})
  fake.saveFileUseCaseMutex.Unlock()
  if fake.SaveFileUseCaseStub != nil {
    return fake.SaveFileUseCaseStub()
  } else {
    return fake.saveFileUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) SaveFileUseCaseCallCount() int {
  fake.saveFileUseCaseMutex.RLock()
  defer fake.saveFileUseCaseMutex.RUnlock()
  return len(fake.saveFileUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) SaveFileUseCaseReturns(result1 saveFileUseCase) {
  fake.SaveFileUseCaseStub = nil
  fake.saveFileUseCaseReturns = struct {
    result1 saveFileUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) CreateDirUseCase() createDirUseCase {
  fake.createDirUseCaseMutex.Lock()
  fake.createDirUseCaseArgsForCall = append(fake.createDirUseCaseArgsForCall, struct{}{})
  fake.createDirUseCaseMutex.Unlock()
  if fake.CreateDirUseCaseStub != nil {
    return fake.CreateDirUseCaseStub()
  } else {
    return fake.createDirUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) CreateDirUseCaseCallCount() int {
  fake.createDirUseCaseMutex.RLock()
  defer fake.createDirUseCaseMutex.RUnlock()
  return len(fake.createDirUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) CreateDirUseCaseReturns(result1 createDirUseCase) {
  fake.CreateDirUseCaseStub = nil
  fake.createDirUseCaseReturns = struct {
    result1 createDirUseCase
  }{result1}
}
