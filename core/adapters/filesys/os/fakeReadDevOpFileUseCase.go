// This file was generated by counterfeiter
package os

import "sync"

type FakeReadDevOpFileUseCase struct {
  ExecuteStub        func(devOpName string) (devOpFile []byte, err error)
  executeMutex       sync.RWMutex
  executeArgsForCall []struct {
    devOpName string
  }
  executeReturns     struct {
                       result1 []byte
                       result2 error
                     }
}

func (fake *FakeReadDevOpFileUseCase) Execute(devOpName string) (devOpFile []byte, err error) {
  fake.executeMutex.Lock()
  fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
    devOpName string
  }{devOpName})
  fake.executeMutex.Unlock()
  if fake.ExecuteStub != nil {
    return fake.ExecuteStub(devOpName)
  } else {
    return fake.executeReturns.result1, fake.executeReturns.result2
  }
}

func (fake *FakeReadDevOpFileUseCase) ExecuteCallCount() int {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return len(fake.executeArgsForCall)
}

func (fake *FakeReadDevOpFileUseCase) ExecuteArgsForCall(i int) string {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return fake.executeArgsForCall[i].devOpName
}

func (fake *FakeReadDevOpFileUseCase) ExecuteReturns(result1 []byte, result2 error) {
  fake.ExecuteStub = nil
  fake.executeReturns = struct {
    result1 []byte
    result2 error
  }{result1, result2}
}
