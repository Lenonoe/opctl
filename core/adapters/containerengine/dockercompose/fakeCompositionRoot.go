// This file was generated by counterfeiter
package dockercompose

import (
	"sync"
)

type fakeCompositionRoot struct {
	InitDevOpUseCaseStub        func() initDevOpUseCase
	initDevOpUseCaseMutex       sync.RWMutex
	initDevOpUseCaseArgsForCall []struct{}
	initDevOpUseCaseReturns     struct {
		result1 initDevOpUseCase
	}
	RunDevOpUseCaseStub        func() runDevOpUseCase
	runDevOpUseCaseMutex       sync.RWMutex
	runDevOpUseCaseArgsForCall []struct{}
	runDevOpUseCaseReturns     struct {
		result1 runDevOpUseCase
	}
}

func (fake *fakeCompositionRoot) InitDevOpUseCase() initDevOpUseCase {
	fake.initDevOpUseCaseMutex.Lock()
	fake.initDevOpUseCaseArgsForCall = append(fake.initDevOpUseCaseArgsForCall, struct{}{})
	fake.initDevOpUseCaseMutex.Unlock()
	if fake.InitDevOpUseCaseStub != nil {
		return fake.InitDevOpUseCaseStub()
	} else {
		return fake.initDevOpUseCaseReturns.result1
	}
}

func (fake *fakeCompositionRoot) InitDevOpUseCaseCallCount() int {
	fake.initDevOpUseCaseMutex.RLock()
	defer fake.initDevOpUseCaseMutex.RUnlock()
	return len(fake.initDevOpUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) InitDevOpUseCaseReturns(result1 initDevOpUseCase) {
	fake.InitDevOpUseCaseStub = nil
	fake.initDevOpUseCaseReturns = struct {
		result1 initDevOpUseCase
	}{result1}
}

func (fake *fakeCompositionRoot) RunDevOpUseCase() runDevOpUseCase {
	fake.runDevOpUseCaseMutex.Lock()
	fake.runDevOpUseCaseArgsForCall = append(fake.runDevOpUseCaseArgsForCall, struct{}{})
	fake.runDevOpUseCaseMutex.Unlock()
	if fake.RunDevOpUseCaseStub != nil {
		return fake.RunDevOpUseCaseStub()
	} else {
		return fake.runDevOpUseCaseReturns.result1
	}
}

func (fake *fakeCompositionRoot) RunDevOpUseCaseCallCount() int {
	fake.runDevOpUseCaseMutex.RLock()
	defer fake.runDevOpUseCaseMutex.RUnlock()
	return len(fake.runDevOpUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) RunDevOpUseCaseReturns(result1 runDevOpUseCase) {
	fake.RunDevOpUseCaseStub = nil
	fake.runDevOpUseCaseReturns = struct {
		result1 runDevOpUseCase
	}{result1}
}
