// This file was generated by counterfeiter
package dockercompose

import (
	"sync"

	"github.com/dev-op-spec/engine/core/models"
)

type fakeRunOpUseCase struct {
	ExecuteStub        func(pathToOpDir string, opName string) (exitCode int, logChannel chan *models.LogEntry, err error)
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		pathToOpDir string
		opName      string
	}
	executeReturns struct {
		result1 int
		result2 chan *models.LogEntry
		result3 error
	}
}

func (fake *fakeRunOpUseCase) Execute(pathToOpDir string, opName string) (exitCode int, logChannel chan *models.LogEntry, err error) {
	fake.executeMutex.Lock()
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		pathToOpDir string
		opName      string
	}{pathToOpDir, opName})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(pathToOpDir, opName)
	} else {
		return fake.executeReturns.result1, fake.executeReturns.result2, fake.executeReturns.result3
	}
}

func (fake *fakeRunOpUseCase) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *fakeRunOpUseCase) ExecuteArgsForCall(i int) (string, string) {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.executeArgsForCall[i].pathToOpDir, fake.executeArgsForCall[i].opName
}

func (fake *fakeRunOpUseCase) ExecuteReturns(result1 int, result2 chan *models.LogEntry, result3 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 int
		result2 chan *models.LogEntry
		result3 error
	}{result1, result2, result3}
}
