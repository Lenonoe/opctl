// This file was generated by counterfeiter
package fake

import (
	"sync"

	"github.com/opctl/engine/core/logging"
	"github.com/opctl/engine/core/ports"
)

type FakeContainerEngine struct {
	InitOpStub        func(opBundlePath string, name string) (err error)
	initOpMutex       sync.RWMutex
	initOpArgsForCall []struct {
		opBundlePath string
		name         string
	}
	initOpReturns struct {
		result1 error
	}
	RunOpStub        func(correlationId string, opArgs map[string]string, opBundlePath string, opName string, opNamespace string, logger logging.Logger) (exitCode int, err error)
	runOpMutex       sync.RWMutex
	runOpArgsForCall []struct {
		correlationId string
		opArgs        map[string]string
		opBundlePath  string
		opName        string
		opNamespace   string
		logger        logging.Logger
	}
	runOpReturns struct {
		result1 int
		result2 error
	}
	KillOpRunStub        func(correlationId string, opBundlePath string, opNamespace string, logger logging.Logger) (err error)
	killOpRunMutex       sync.RWMutex
	killOpRunArgsForCall []struct {
		correlationId string
		opBundlePath  string
		opNamespace   string
		logger        logging.Logger
	}
	killOpRunReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainerEngine) InitOp(opBundlePath string, name string) (err error) {
	fake.initOpMutex.Lock()
	fake.initOpArgsForCall = append(fake.initOpArgsForCall, struct {
		opBundlePath string
		name         string
	}{opBundlePath, name})
	fake.recordInvocation("InitOp", []interface{}{opBundlePath, name})
	fake.initOpMutex.Unlock()
	if fake.InitOpStub != nil {
		return fake.InitOpStub(opBundlePath, name)
	} else {
		return fake.initOpReturns.result1
	}
}

func (fake *FakeContainerEngine) InitOpCallCount() int {
	fake.initOpMutex.RLock()
	defer fake.initOpMutex.RUnlock()
	return len(fake.initOpArgsForCall)
}

func (fake *FakeContainerEngine) InitOpArgsForCall(i int) (string, string) {
	fake.initOpMutex.RLock()
	defer fake.initOpMutex.RUnlock()
	return fake.initOpArgsForCall[i].opBundlePath, fake.initOpArgsForCall[i].name
}

func (fake *FakeContainerEngine) InitOpReturns(result1 error) {
	fake.InitOpStub = nil
	fake.initOpReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerEngine) RunOp(correlationId string, opArgs map[string]string, opBundlePath string, opName string, opNamespace string, logger logging.Logger) (exitCode int, err error) {
	fake.runOpMutex.Lock()
	fake.runOpArgsForCall = append(fake.runOpArgsForCall, struct {
		correlationId string
		opArgs        map[string]string
		opBundlePath  string
		opName        string
		opNamespace   string
		logger        logging.Logger
	}{correlationId, opArgs, opBundlePath, opName, opNamespace, logger})
	fake.recordInvocation("RunOp", []interface{}{correlationId, opArgs, opBundlePath, opName, opNamespace, logger})
	fake.runOpMutex.Unlock()
	if fake.RunOpStub != nil {
		return fake.RunOpStub(correlationId, opArgs, opBundlePath, opName, opNamespace, logger)
	} else {
		return fake.runOpReturns.result1, fake.runOpReturns.result2
	}
}

func (fake *FakeContainerEngine) RunOpCallCount() int {
	fake.runOpMutex.RLock()
	defer fake.runOpMutex.RUnlock()
	return len(fake.runOpArgsForCall)
}

func (fake *FakeContainerEngine) RunOpArgsForCall(i int) (string, map[string]string, string, string, string, logging.Logger) {
	fake.runOpMutex.RLock()
	defer fake.runOpMutex.RUnlock()
	return fake.runOpArgsForCall[i].correlationId, fake.runOpArgsForCall[i].opArgs, fake.runOpArgsForCall[i].opBundlePath, fake.runOpArgsForCall[i].opName, fake.runOpArgsForCall[i].opNamespace, fake.runOpArgsForCall[i].logger
}

func (fake *FakeContainerEngine) RunOpReturns(result1 int, result2 error) {
	fake.RunOpStub = nil
	fake.runOpReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerEngine) KillOpRun(correlationId string, opBundlePath string, opNamespace string, logger logging.Logger) (err error) {
	fake.killOpRunMutex.Lock()
	fake.killOpRunArgsForCall = append(fake.killOpRunArgsForCall, struct {
		correlationId string
		opBundlePath  string
		opNamespace   string
		logger        logging.Logger
	}{correlationId, opBundlePath, opNamespace, logger})
	fake.recordInvocation("KillOpRun", []interface{}{correlationId, opBundlePath, opNamespace, logger})
	fake.killOpRunMutex.Unlock()
	if fake.KillOpRunStub != nil {
		return fake.KillOpRunStub(correlationId, opBundlePath, opNamespace, logger)
	} else {
		return fake.killOpRunReturns.result1
	}
}

func (fake *FakeContainerEngine) KillOpRunCallCount() int {
	fake.killOpRunMutex.RLock()
	defer fake.killOpRunMutex.RUnlock()
	return len(fake.killOpRunArgsForCall)
}

func (fake *FakeContainerEngine) KillOpRunArgsForCall(i int) (string, string, string, logging.Logger) {
	fake.killOpRunMutex.RLock()
	defer fake.killOpRunMutex.RUnlock()
	return fake.killOpRunArgsForCall[i].correlationId, fake.killOpRunArgsForCall[i].opBundlePath, fake.killOpRunArgsForCall[i].opNamespace, fake.killOpRunArgsForCall[i].logger
}

func (fake *FakeContainerEngine) KillOpRunReturns(result1 error) {
	fake.KillOpRunStub = nil
	fake.killOpRunReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerEngine) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.initOpMutex.RLock()
	defer fake.initOpMutex.RUnlock()
	fake.runOpMutex.RLock()
	defer fake.runOpMutex.RUnlock()
	fake.killOpRunMutex.RLock()
	defer fake.killOpRunMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeContainerEngine) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ports.ContainerEngine = new(FakeContainerEngine)
