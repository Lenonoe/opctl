// This file was generated by counterfeiter
package fake

import (
  "sync"

  "github.com/dev-op-spec/engine/core/models"
  "github.com/dev-op-spec/engine/core/ports"
)

func New() ports.ContainerEngine {

  return new(containerEngine)

}

type containerEngine struct {
  InitOperationStub        func(operationName string) (err error)
  initOperationMutex       sync.RWMutex
  initOperationArgsForCall []struct {
    operationName string
  }
  initOperationReturns     struct {
                         result1 error
                       }
  RunOperationStub         func(operationName string) (operationRun models.OperationRunView, err error)
  runOperationMutex        sync.RWMutex
  runOperationArgsForCall  []struct {
    operationName string
  }
  runOperationReturns      struct {
                         result1 models.OperationRunView
                         result2 error
                       }
}

func (fake *containerEngine) InitOperation(operationName string) (err error) {
  fake.initOperationMutex.Lock()
  fake.initOperationArgsForCall = append(fake.initOperationArgsForCall, struct {
    operationName string
  }{operationName})
  fake.initOperationMutex.Unlock()
  if fake.InitOperationStub != nil {
    return fake.InitOperationStub(operationName)
  } else {
    return fake.initOperationReturns.result1
  }
}

func (fake *containerEngine) InitOperationCallCount() int {
  fake.initOperationMutex.RLock()
  defer fake.initOperationMutex.RUnlock()
  return len(fake.initOperationArgsForCall)
}

func (fake *containerEngine) InitOperationArgsForCall(i int) string {
  fake.initOperationMutex.RLock()
  defer fake.initOperationMutex.RUnlock()
  return fake.initOperationArgsForCall[i].operationName
}

func (fake *containerEngine) InitOperationReturns(result1 error) {
  fake.InitOperationStub = nil
  fake.initOperationReturns = struct {
    result1 error
  }{result1}
}

func (fake *containerEngine) RunOperation(operationName string) (operationRun models.OperationRunView, err error) {
  fake.runOperationMutex.Lock()
  fake.runOperationArgsForCall = append(fake.runOperationArgsForCall, struct {
    operationName string
  }{operationName})
  fake.runOperationMutex.Unlock()
  if fake.RunOperationStub != nil {
    return fake.RunOperationStub(operationName)
  } else {
    return fake.runOperationReturns.result1, fake.runOperationReturns.result2
  }
}

func (fake *containerEngine) RunOperationCallCount() int {
  fake.runOperationMutex.RLock()
  defer fake.runOperationMutex.RUnlock()
  return len(fake.runOperationArgsForCall)
}

func (fake *containerEngine) RunOperationArgsForCall(i int) string {
  fake.runOperationMutex.RLock()
  defer fake.runOperationMutex.RUnlock()
  return fake.runOperationArgsForCall[i].operationName
}

func (fake *containerEngine) RunOperationReturns(result1 models.OperationRunView, result2 error) {
  fake.RunOperationStub = nil
  fake.runOperationReturns = struct {
    result1 models.OperationRunView
    result2 error
  }{result1, result2}
}

var _ ports.ContainerEngine = new(containerEngine)
