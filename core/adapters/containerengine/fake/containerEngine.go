// This file was generated by counterfeiter
package fake

import (
  "sync"

  "github.com/dev-op-spec/engine/core/models"
  "github.com/dev-op-spec/engine/core/ports"
)

func New() ports.ContainerEngine {

  return new(containerEngine)

}

type containerEngine struct {
  InitDevOpStub        func(devOpName string) (err error)
  initDevOpMutex       sync.RWMutex
  initDevOpArgsForCall []struct {
    devOpName string
  }
  initDevOpReturns     struct {
                         result1 error
                       }
  RunDevOpStub         func(devOpName string) (devOpRun models.DevOpRunView, err error)
  runDevOpMutex        sync.RWMutex
  runDevOpArgsForCall  []struct {
    devOpName string
  }
  runDevOpReturns      struct {
                         result1 models.DevOpRunView
                         result2 error
                       }
}

func (fake *containerEngine) InitDevOp(devOpName string) (err error) {
  fake.initDevOpMutex.Lock()
  fake.initDevOpArgsForCall = append(fake.initDevOpArgsForCall, struct {
    devOpName string
  }{devOpName})
  fake.initDevOpMutex.Unlock()
  if fake.InitDevOpStub != nil {
    return fake.InitDevOpStub(devOpName)
  } else {
    return fake.initDevOpReturns.result1
  }
}

func (fake *containerEngine) InitDevOpCallCount() int {
  fake.initDevOpMutex.RLock()
  defer fake.initDevOpMutex.RUnlock()
  return len(fake.initDevOpArgsForCall)
}

func (fake *containerEngine) InitDevOpArgsForCall(i int) string {
  fake.initDevOpMutex.RLock()
  defer fake.initDevOpMutex.RUnlock()
  return fake.initDevOpArgsForCall[i].devOpName
}

func (fake *containerEngine) InitDevOpReturns(result1 error) {
  fake.InitDevOpStub = nil
  fake.initDevOpReturns = struct {
    result1 error
  }{result1}
}

func (fake *containerEngine) RunDevOp(devOpName string) (devOpRun models.DevOpRunView, err error) {
  fake.runDevOpMutex.Lock()
  fake.runDevOpArgsForCall = append(fake.runDevOpArgsForCall, struct {
    devOpName string
  }{devOpName})
  fake.runDevOpMutex.Unlock()
  if fake.RunDevOpStub != nil {
    return fake.RunDevOpStub(devOpName)
  } else {
    return fake.runDevOpReturns.result1, fake.runDevOpReturns.result2
  }
}

func (fake *containerEngine) RunDevOpCallCount() int {
  fake.runDevOpMutex.RLock()
  defer fake.runDevOpMutex.RUnlock()
  return len(fake.runDevOpArgsForCall)
}

func (fake *containerEngine) RunDevOpArgsForCall(i int) string {
  fake.runDevOpMutex.RLock()
  defer fake.runDevOpMutex.RUnlock()
  return fake.runDevOpArgsForCall[i].devOpName
}

func (fake *containerEngine) RunDevOpReturns(result1 models.DevOpRunView, result2 error) {
  fake.RunDevOpStub = nil
  fake.runDevOpReturns = struct {
    result1 models.DevOpRunView
    result2 error
  }{result1, result2}
}

var _ ports.ContainerEngine = new(containerEngine)
