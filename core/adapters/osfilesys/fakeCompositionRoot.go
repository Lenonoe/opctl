// This file was generated by counterfeiter
package osfilesys

import (
  "sync"
)

type fakeCompositionRoot struct {
  ListNamesOfDevOpDirsUcExecuterStub           func() listNamesOfDevOpDirsUcExecuter
  listNamesOfDevOpDirsUcExecuterMutex          sync.RWMutex
  listNamesOfDevOpDirsUcExecuterArgsForCall    []struct{}
  listNamesOfDevOpDirsUcExecuterReturns        struct {
                                                 result1 listNamesOfDevOpDirsUcExecuter
                                               }
  ListNamesOfPipelineDirsUcExecuterStub        func() listNamesOfPipelineDirsUcExecuter
  listNamesOfPipelineDirsUcExecuterMutex       sync.RWMutex
  listNamesOfPipelineDirsUcExecuterArgsForCall []struct{}
  listNamesOfPipelineDirsUcExecuterReturns     struct {
                                                 result1 listNamesOfPipelineDirsUcExecuter
                                               }
  ReadDevOpFileUcExecuterStub                  func() readDevOpFileUcExecuter
  readDevOpFileUcExecuterMutex                 sync.RWMutex
  readDevOpFileUcExecuterArgsForCall           []struct{}
  readDevOpFileUcExecuterReturns               struct {
                                                 result1 readDevOpFileUcExecuter
                                               }
  ReadPipelineFileUcExecuterStub               func() readPipelineFileUcExecuter
  readPipelineFileUcExecuterMutex              sync.RWMutex
  readPipelineFileUcExecuterArgsForCall        []struct{}
  readPipelineFileUcExecuterReturns            struct {
                                                 result1 readPipelineFileUcExecuter
                                               }
  SaveDevOpFileUcExecuterStub                  func() saveDevOpFileUcExecuter
  saveDevOpFileUcExecuterMutex                 sync.RWMutex
  saveDevOpFileUcExecuterArgsForCall           []struct{}
  saveDevOpFileUcExecuterReturns               struct {
                                                 result1 saveDevOpFileUcExecuter
                                               }
  SavePipelineFileUcExecuterStub               func() savePipelineFileUcExecuter
  savePipelineFileUcExecuterMutex              sync.RWMutex
  savePipelineFileUcExecuterArgsForCall        []struct{}
  savePipelineFileUcExecuterReturns            struct {
                                                 result1 savePipelineFileUcExecuter
                                               }
  CreateDevOpDirUcExecuterStub                 func() createDevOpDirUcExecuter
  createDevOpDirUcExecuterMutex                sync.RWMutex
  createDevOpDirUcExecuterArgsForCall          []struct{}
  createDevOpDirUcExecuterReturns              struct {
                                                 result1 createDevOpDirUcExecuter
                                               }
  CreatePipelineDirUcExecuterStub              func() createPipelineDirUcExecuter
  createPipelineDirUcExecuterMutex             sync.RWMutex
  createPipelineDirUcExecuterArgsForCall       []struct{}
  createPipelineDirUcExecuterReturns           struct {
                                                 result1 createPipelineDirUcExecuter
                                               }
}

func (fake *fakeCompositionRoot) ListNamesOfDevOpDirsUcExecuter() listNamesOfDevOpDirsUcExecuter {
  fake.listNamesOfDevOpDirsUcExecuterMutex.Lock()
  fake.listNamesOfDevOpDirsUcExecuterArgsForCall = append(fake.listNamesOfDevOpDirsUcExecuterArgsForCall, struct{}{})
  fake.listNamesOfDevOpDirsUcExecuterMutex.Unlock()
  if fake.ListNamesOfDevOpDirsUcExecuterStub != nil {
    return fake.ListNamesOfDevOpDirsUcExecuterStub()
  } else {
    return fake.listNamesOfDevOpDirsUcExecuterReturns.result1
  }
}

func (fake *fakeCompositionRoot) ListNamesOfDevOpDirsUcExecuterCallCount() int {
  fake.listNamesOfDevOpDirsUcExecuterMutex.RLock()
  defer fake.listNamesOfDevOpDirsUcExecuterMutex.RUnlock()
  return len(fake.listNamesOfDevOpDirsUcExecuterArgsForCall)
}

func (fake *fakeCompositionRoot) ListNamesOfDevOpDirsUcExecuterReturns(result1 listNamesOfDevOpDirsUcExecuter) {
  fake.ListNamesOfDevOpDirsUcExecuterStub = nil
  fake.listNamesOfDevOpDirsUcExecuterReturns = struct {
    result1 listNamesOfDevOpDirsUcExecuter
  }{result1}
}

func (fake *fakeCompositionRoot) ListNamesOfPipelineDirsUcExecuter() listNamesOfPipelineDirsUcExecuter {
  fake.listNamesOfPipelineDirsUcExecuterMutex.Lock()
  fake.listNamesOfPipelineDirsUcExecuterArgsForCall = append(fake.listNamesOfPipelineDirsUcExecuterArgsForCall, struct{}{})
  fake.listNamesOfPipelineDirsUcExecuterMutex.Unlock()
  if fake.ListNamesOfPipelineDirsUcExecuterStub != nil {
    return fake.ListNamesOfPipelineDirsUcExecuterStub()
  } else {
    return fake.listNamesOfPipelineDirsUcExecuterReturns.result1
  }
}

func (fake *fakeCompositionRoot) ListNamesOfPipelineDirsUcExecuterCallCount() int {
  fake.listNamesOfPipelineDirsUcExecuterMutex.RLock()
  defer fake.listNamesOfPipelineDirsUcExecuterMutex.RUnlock()
  return len(fake.listNamesOfPipelineDirsUcExecuterArgsForCall)
}

func (fake *fakeCompositionRoot) ListNamesOfPipelineDirsUcExecuterReturns(result1 listNamesOfPipelineDirsUcExecuter) {
  fake.ListNamesOfPipelineDirsUcExecuterStub = nil
  fake.listNamesOfPipelineDirsUcExecuterReturns = struct {
    result1 listNamesOfPipelineDirsUcExecuter
  }{result1}
}

func (fake *fakeCompositionRoot) ReadDevOpFileUcExecuter() readDevOpFileUcExecuter {
  fake.readDevOpFileUcExecuterMutex.Lock()
  fake.readDevOpFileUcExecuterArgsForCall = append(fake.readDevOpFileUcExecuterArgsForCall, struct{}{})
  fake.readDevOpFileUcExecuterMutex.Unlock()
  if fake.ReadDevOpFileUcExecuterStub != nil {
    return fake.ReadDevOpFileUcExecuterStub()
  } else {
    return fake.readDevOpFileUcExecuterReturns.result1
  }
}

func (fake *fakeCompositionRoot) ReadDevOpFileUcExecuterCallCount() int {
  fake.readDevOpFileUcExecuterMutex.RLock()
  defer fake.readDevOpFileUcExecuterMutex.RUnlock()
  return len(fake.readDevOpFileUcExecuterArgsForCall)
}

func (fake *fakeCompositionRoot) ReadDevOpFileUcExecuterReturns(result1 readDevOpFileUcExecuter) {
  fake.ReadDevOpFileUcExecuterStub = nil
  fake.readDevOpFileUcExecuterReturns = struct {
    result1 readDevOpFileUcExecuter
  }{result1}
}

func (fake *fakeCompositionRoot) ReadPipelineFileUcExecuter() readPipelineFileUcExecuter {
  fake.readPipelineFileUcExecuterMutex.Lock()
  fake.readPipelineFileUcExecuterArgsForCall = append(fake.readPipelineFileUcExecuterArgsForCall, struct{}{})
  fake.readPipelineFileUcExecuterMutex.Unlock()
  if fake.ReadPipelineFileUcExecuterStub != nil {
    return fake.ReadPipelineFileUcExecuterStub()
  } else {
    return fake.readPipelineFileUcExecuterReturns.result1
  }
}

func (fake *fakeCompositionRoot) ReadPipelineFileUcExecuterCallCount() int {
  fake.readPipelineFileUcExecuterMutex.RLock()
  defer fake.readPipelineFileUcExecuterMutex.RUnlock()
  return len(fake.readPipelineFileUcExecuterArgsForCall)
}

func (fake *fakeCompositionRoot) ReadPipelineFileUcExecuterReturns(result1 readPipelineFileUcExecuter) {
  fake.ReadPipelineFileUcExecuterStub = nil
  fake.readPipelineFileUcExecuterReturns = struct {
    result1 readPipelineFileUcExecuter
  }{result1}
}

func (fake *fakeCompositionRoot) SaveDevOpFileUcExecuter() saveDevOpFileUcExecuter {
  fake.saveDevOpFileUcExecuterMutex.Lock()
  fake.saveDevOpFileUcExecuterArgsForCall = append(fake.saveDevOpFileUcExecuterArgsForCall, struct{}{})
  fake.saveDevOpFileUcExecuterMutex.Unlock()
  if fake.SaveDevOpFileUcExecuterStub != nil {
    return fake.SaveDevOpFileUcExecuterStub()
  } else {
    return fake.saveDevOpFileUcExecuterReturns.result1
  }
}

func (fake *fakeCompositionRoot) SaveDevOpFileUcExecuterCallCount() int {
  fake.saveDevOpFileUcExecuterMutex.RLock()
  defer fake.saveDevOpFileUcExecuterMutex.RUnlock()
  return len(fake.saveDevOpFileUcExecuterArgsForCall)
}

func (fake *fakeCompositionRoot) SaveDevOpFileUcExecuterReturns(result1 saveDevOpFileUcExecuter) {
  fake.SaveDevOpFileUcExecuterStub = nil
  fake.saveDevOpFileUcExecuterReturns = struct {
    result1 saveDevOpFileUcExecuter
  }{result1}
}

func (fake *fakeCompositionRoot) SavePipelineFileUcExecuter() savePipelineFileUcExecuter {
  fake.savePipelineFileUcExecuterMutex.Lock()
  fake.savePipelineFileUcExecuterArgsForCall = append(fake.savePipelineFileUcExecuterArgsForCall, struct{}{})
  fake.savePipelineFileUcExecuterMutex.Unlock()
  if fake.SavePipelineFileUcExecuterStub != nil {
    return fake.SavePipelineFileUcExecuterStub()
  } else {
    return fake.savePipelineFileUcExecuterReturns.result1
  }
}

func (fake *fakeCompositionRoot) SavePipelineFileUcExecuterCallCount() int {
  fake.savePipelineFileUcExecuterMutex.RLock()
  defer fake.savePipelineFileUcExecuterMutex.RUnlock()
  return len(fake.savePipelineFileUcExecuterArgsForCall)
}

func (fake *fakeCompositionRoot) SavePipelineFileUcExecuterReturns(result1 savePipelineFileUcExecuter) {
  fake.SavePipelineFileUcExecuterStub = nil
  fake.savePipelineFileUcExecuterReturns = struct {
    result1 savePipelineFileUcExecuter
  }{result1}
}

func (fake *fakeCompositionRoot) CreateDevOpDirUcExecuter() createDevOpDirUcExecuter {
  fake.createDevOpDirUcExecuterMutex.Lock()
  fake.createDevOpDirUcExecuterArgsForCall = append(fake.createDevOpDirUcExecuterArgsForCall, struct{}{})
  fake.createDevOpDirUcExecuterMutex.Unlock()
  if fake.CreateDevOpDirUcExecuterStub != nil {
    return fake.CreateDevOpDirUcExecuterStub()
  } else {
    return fake.createDevOpDirUcExecuterReturns.result1
  }
}

func (fake *fakeCompositionRoot) CreateDevOpDirUcExecuterCallCount() int {
  fake.createDevOpDirUcExecuterMutex.RLock()
  defer fake.createDevOpDirUcExecuterMutex.RUnlock()
  return len(fake.createDevOpDirUcExecuterArgsForCall)
}

func (fake *fakeCompositionRoot) CreateDevOpDirUcExecuterReturns(result1 createDevOpDirUcExecuter) {
  fake.CreateDevOpDirUcExecuterStub = nil
  fake.createDevOpDirUcExecuterReturns = struct {
    result1 createDevOpDirUcExecuter
  }{result1}
}

func (fake *fakeCompositionRoot) CreatePipelineDirUcExecuter() createPipelineDirUcExecuter {
  fake.createPipelineDirUcExecuterMutex.Lock()
  fake.createPipelineDirUcExecuterArgsForCall = append(fake.createPipelineDirUcExecuterArgsForCall, struct{}{})
  fake.createPipelineDirUcExecuterMutex.Unlock()
  if fake.CreatePipelineDirUcExecuterStub != nil {
    return fake.CreatePipelineDirUcExecuterStub()
  } else {
    return fake.createPipelineDirUcExecuterReturns.result1
  }
}

func (fake *fakeCompositionRoot) CreatePipelineDirUcExecuterCallCount() int {
  fake.createPipelineDirUcExecuterMutex.RLock()
  defer fake.createPipelineDirUcExecuterMutex.RUnlock()
  return len(fake.createPipelineDirUcExecuterArgsForCall)
}

func (fake *fakeCompositionRoot) CreatePipelineDirUcExecuterReturns(result1 createPipelineDirUcExecuter) {
  fake.CreatePipelineDirUcExecuterStub = nil
  fake.createPipelineDirUcExecuterReturns = struct {
    result1 createPipelineDirUcExecuter
  }{result1}
}
