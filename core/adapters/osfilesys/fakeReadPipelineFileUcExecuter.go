// This file was generated by counterfeiter
package osfilesys

import "sync"

type FakeReadPipelineFileUcExecuter struct {
  ExecuteStub        func(pipelineName string) (pipelineFile []byte, err error)
  executeMutex       sync.RWMutex
  executeArgsForCall []struct {
    pipelineName string
  }
  executeReturns     struct {
                       result1 []byte
                       result2 error
                     }
}

func (fake *FakeReadPipelineFileUcExecuter) Execute(pipelineName string) (pipelineFile []byte, err error) {
  fake.executeMutex.Lock()
  fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
    pipelineName string
  }{pipelineName})
  fake.executeMutex.Unlock()
  if fake.ExecuteStub != nil {
    return fake.ExecuteStub(pipelineName)
  } else {
    return fake.executeReturns.result1, fake.executeReturns.result2
  }
}

func (fake *FakeReadPipelineFileUcExecuter) ExecuteCallCount() int {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return len(fake.executeArgsForCall)
}

func (fake *FakeReadPipelineFileUcExecuter) ExecuteArgsForCall(i int) string {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return fake.executeArgsForCall[i].pipelineName
}

func (fake *FakeReadPipelineFileUcExecuter) ExecuteReturns(result1 []byte, result2 error) {
  fake.ExecuteStub = nil
  fake.executeReturns = struct {
    result1 []byte
    result2 error
  }{result1, result2}
}
