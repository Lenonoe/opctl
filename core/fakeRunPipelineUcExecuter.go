// This file was generated by counterfeiter
package core

import (
  "sync"
  "github.com/dev-op-spec/engine/core/models"
)

type fakeRunPipelineUcExecuter struct {
  ExecuteStub        func(pipelineName string, namesOfAlreadyRunPipelines []string) (pipelineRun models.PipelineRunView, err error)
  executeMutex       sync.RWMutex
  executeArgsForCall []struct {
    pipelineName               string
    namesOfAlreadyRunPipelines []string
  }
  executeReturns     struct {
                       result1 models.PipelineRunView
                       result2 error
                     }
}

func (fake *fakeRunPipelineUcExecuter) Execute(pipelineName string, namesOfAlreadyRunPipelines []string) (pipelineRun models.PipelineRunView, err error) {
  fake.executeMutex.Lock()
  fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
    pipelineName               string
    namesOfAlreadyRunPipelines []string
  }{pipelineName, namesOfAlreadyRunPipelines})
  fake.executeMutex.Unlock()
  if fake.ExecuteStub != nil {
    return fake.ExecuteStub(pipelineName, namesOfAlreadyRunPipelines)
  } else {
    return fake.executeReturns.result1, fake.executeReturns.result2
  }
}

func (fake *fakeRunPipelineUcExecuter) ExecuteCallCount() int {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return len(fake.executeArgsForCall)
}

func (fake *fakeRunPipelineUcExecuter) ExecuteArgsForCall(i int) (string, []string) {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return fake.executeArgsForCall[i].pipelineName, fake.executeArgsForCall[i].namesOfAlreadyRunPipelines
}

func (fake *fakeRunPipelineUcExecuter) ExecuteReturns(result1 models.PipelineRunView, result2 error) {
  fake.ExecuteStub = nil
  fake.executeReturns = struct {
    result1 models.PipelineRunView
    result2 error
  }{result1, result2}
}
