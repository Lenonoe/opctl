// This file was generated by counterfeiter
package core

import (
  "sync"

  "github.com/dev-op-spec/engine/core/models"
)

type FakeRunOpUseCase struct {
  ExecuteStub        func(req models.RunOpReq, ancestors []*models.OpRunStartedEvent) (opRunId string, err error)
  executeMutex       sync.RWMutex
  executeArgsForCall []struct {
    req       models.RunOpReq
    ancestors []*models.OpRunStartedEvent
  }
  executeReturns     struct {
                       result1 string
                       result2 error
                     }
}

func (fake *FakeRunOpUseCase) Execute(req models.RunOpReq, ancestors []*models.OpRunStartedEvent) (opRunId string, err error) {
  fake.executeMutex.Lock()
  fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
    req       models.RunOpReq
    ancestors []*models.OpRunStartedEvent
  }{req, ancestors})
  fake.executeMutex.Unlock()
  if fake.ExecuteStub != nil {
    return fake.ExecuteStub(req, ancestors)
  } else {
    return fake.executeReturns.result1, fake.executeReturns.result2
  }
}

func (fake *FakeRunOpUseCase) ExecuteCallCount() int {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return len(fake.executeArgsForCall)
}

func (fake *FakeRunOpUseCase) ExecuteArgsForCall(i int) (models.RunOpReq, []*models.OpRunStartedEvent) {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return fake.executeArgsForCall[i].req, fake.executeArgsForCall[i].ancestors
}

func (fake *FakeRunOpUseCase) ExecuteReturns(result1 string, result2 error) {
  fake.ExecuteStub = nil
  fake.executeReturns = struct {
    result1 string
    result2 error
  }{result1, result2}
}
