// This file was generated by counterfeiter
package core

import (
	"sync"

	"github.com/open-devops/engine/core/models"
)

type fakeListOpsUseCase struct {
	ExecuteStub        func(projectUrl *models.Url) (ops []models.OpDetailedView, err error)
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		projectUrl *models.Url
	}
	executeReturns struct {
		result1 []models.OpDetailedView
		result2 error
	}
}

func (fake *fakeListOpsUseCase) Execute(projectUrl *models.Url) (ops []models.OpDetailedView, err error) {
	fake.executeMutex.Lock()
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		projectUrl *models.Url
	}{projectUrl})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(projectUrl)
	} else {
		return fake.executeReturns.result1, fake.executeReturns.result2
	}
}

func (fake *fakeListOpsUseCase) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *fakeListOpsUseCase) ExecuteArgsForCall(i int) *models.Url {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.executeArgsForCall[i].projectUrl
}

func (fake *fakeListOpsUseCase) ExecuteReturns(result1 []models.OpDetailedView, result2 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 []models.OpDetailedView
		result2 error
	}{result1, result2}
}
