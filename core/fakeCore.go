// This file was generated by counterfeiter
package core

import (
  "sync"

  "github.com/opspec-io/sdk-golang/pkg/models"
)

type FakeCore struct {
  GetEventStreamStub        func(eventChannel chan models.Event) (err error)
  getEventStreamMutex       sync.RWMutex
  getEventStreamArgsForCall []struct {
    eventChannel chan models.Event
  }
  getEventStreamReturns     struct {
                              result1 error
                            }
  KillOpRunStub             func(req models.KillOpRunReq) (err error)
  killOpRunMutex            sync.RWMutex
  killOpRunArgsForCall      []struct {
    req models.KillOpRunReq
  }
  killOpRunReturns          struct {
                              result1 error
                            }
  StartOpRunStub            func(req models.StartOpRunReq) (opRunId string, err error)
  startOpRunMutex           sync.RWMutex
  startOpRunArgsForCall     []struct {
    req models.StartOpRunReq
  }
  startOpRunReturns         struct {
                              result1 string
                              result2 error
                            }
  invocations               map[string][][]interface{}
  invocationsMutex          sync.RWMutex
}

func (fake *FakeCore) GetEventStream(eventChannel chan models.Event) (err error) {
  fake.getEventStreamMutex.Lock()
  fake.getEventStreamArgsForCall = append(fake.getEventStreamArgsForCall, struct {
    eventChannel chan models.Event
  }{eventChannel})
  fake.recordInvocation("GetEventStream", []interface{}{eventChannel})
  fake.getEventStreamMutex.Unlock()
  if fake.GetEventStreamStub != nil {
    return fake.GetEventStreamStub(eventChannel)
  } else {
    return fake.getEventStreamReturns.result1
  }
}

func (fake *FakeCore) GetEventStreamCallCount() int {
  fake.getEventStreamMutex.RLock()
  defer fake.getEventStreamMutex.RUnlock()
  return len(fake.getEventStreamArgsForCall)
}

func (fake *FakeCore) GetEventStreamArgsForCall(i int) chan models.Event {
  fake.getEventStreamMutex.RLock()
  defer fake.getEventStreamMutex.RUnlock()
  return fake.getEventStreamArgsForCall[i].eventChannel
}

func (fake *FakeCore) GetEventStreamReturns(result1 error) {
  fake.GetEventStreamStub = nil
  fake.getEventStreamReturns = struct {
    result1 error
  }{result1}
}

func (fake *FakeCore) KillOpRun(req models.KillOpRunReq) (err error) {
  fake.killOpRunMutex.Lock()
  fake.killOpRunArgsForCall = append(fake.killOpRunArgsForCall, struct {
    req models.KillOpRunReq
  }{req})
  fake.recordInvocation("KillOpRun", []interface{}{req})
  fake.killOpRunMutex.Unlock()
  if fake.KillOpRunStub != nil {
    return fake.KillOpRunStub(req)
  } else {
    return fake.killOpRunReturns.result1
  }
}

func (fake *FakeCore) KillOpRunCallCount() int {
  fake.killOpRunMutex.RLock()
  defer fake.killOpRunMutex.RUnlock()
  return len(fake.killOpRunArgsForCall)
}

func (fake *FakeCore) KillOpRunArgsForCall(i int) models.KillOpRunReq {
  fake.killOpRunMutex.RLock()
  defer fake.killOpRunMutex.RUnlock()
  return fake.killOpRunArgsForCall[i].req
}

func (fake *FakeCore) KillOpRunReturns(result1 error) {
  fake.KillOpRunStub = nil
  fake.killOpRunReturns = struct {
    result1 error
  }{result1}
}

func (fake *FakeCore) StartOpRun(req models.StartOpRunReq) (opRunId string, err error) {
  fake.startOpRunMutex.Lock()
  fake.startOpRunArgsForCall = append(fake.startOpRunArgsForCall, struct {
    req models.StartOpRunReq
  }{req})
  fake.recordInvocation("StartOpRun", []interface{}{req})
  fake.startOpRunMutex.Unlock()
  if fake.StartOpRunStub != nil {
    return fake.StartOpRunStub(req)
  } else {
    return fake.startOpRunReturns.result1, fake.startOpRunReturns.result2
  }
}

func (fake *FakeCore) StartOpRunCallCount() int {
  fake.startOpRunMutex.RLock()
  defer fake.startOpRunMutex.RUnlock()
  return len(fake.startOpRunArgsForCall)
}

func (fake *FakeCore) StartOpRunArgsForCall(i int) models.StartOpRunReq {
  fake.startOpRunMutex.RLock()
  defer fake.startOpRunMutex.RUnlock()
  return fake.startOpRunArgsForCall[i].req
}

func (fake *FakeCore) StartOpRunReturns(result1 string, result2 error) {
  fake.StartOpRunStub = nil
  fake.startOpRunReturns = struct {
    result1 string
    result2 error
  }{result1, result2}
}

func (fake *FakeCore) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.getEventStreamMutex.RLock()
  defer fake.getEventStreamMutex.RUnlock()
  fake.killOpRunMutex.RLock()
  defer fake.killOpRunMutex.RUnlock()
  fake.startOpRunMutex.RLock()
  defer fake.startOpRunMutex.RUnlock()
  return fake.invocations
}

func (fake *FakeCore) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Core = new(FakeCore)
