// This file was generated by counterfeiter
package dockercompose

import "sync"

type fakeEnsureContainerRemovedUseCase struct {
  ExecuteStub        func(opBundlePath string, opRunId string)
  executeMutex       sync.RWMutex
  executeArgsForCall []struct {
    opBundlePath string
    opRunId      string
  }
  invocations        map[string][][]interface{}
  invocationsMutex   sync.RWMutex
}

func (fake *fakeEnsureContainerRemovedUseCase) Execute(opBundlePath string, opRunId string) {
  fake.executeMutex.Lock()
  fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
    opBundlePath string
    opRunId      string
  }{opBundlePath, opRunId})
  fake.recordInvocation("Execute", []interface{}{opBundlePath, opRunId})
  fake.executeMutex.Unlock()
  if fake.ExecuteStub != nil {
    fake.ExecuteStub(opBundlePath, opRunId)
  }
}

func (fake *fakeEnsureContainerRemovedUseCase) ExecuteCallCount() int {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return len(fake.executeArgsForCall)
}

func (fake *fakeEnsureContainerRemovedUseCase) ExecuteArgsForCall(i int) (string, string) {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return fake.executeArgsForCall[i].opBundlePath, fake.executeArgsForCall[i].opRunId
}

func (fake *fakeEnsureContainerRemovedUseCase) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return fake.invocations
}

func (fake *fakeEnsureContainerRemovedUseCase) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
