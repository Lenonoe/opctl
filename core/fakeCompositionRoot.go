// This file was generated by counterfeiter
package core

import (
  "sync"
)

type fakeCompositionRoot struct {
  AddDevOpUseCaseStub                        func() addDevOpUseCase
  addDevOpUseCaseMutex                       sync.RWMutex
  addDevOpUseCaseArgsForCall                 []struct{}
  addDevOpUseCaseReturns                     struct {
                                                  result1 addDevOpUseCase
                                                }
  AddPipelineUseCaseStub                     func() addPipelineUseCase
  addPipelineUseCaseMutex                    sync.RWMutex
  addPipelineUseCaseArgsForCall              []struct{}
  addPipelineUseCaseReturns                  struct {
                                                  result1 addPipelineUseCase
                                                }
  AddStageToPipelineUseCaseStub              func() addStageToPipelineUseCase
  addStageToPipelineUseCaseMutex             sync.RWMutex
  addStageToPipelineUseCaseArgsForCall       []struct{}
  addStageToPipelineUseCaseReturns           struct {
                                                  result1 addStageToPipelineUseCase
                                                }
  ListDevOpsUseCaseStub                      func() listDevOpsUseCase
  listDevOpsUseCaseMutex                     sync.RWMutex
  listDevOpsUseCaseArgsForCall               []struct{}
  listDevOpsUseCaseReturns                   struct {
                                                  result1 listDevOpsUseCase
                                                }
  ListPipelinesUseCaseStub                   func() listPipelinesUseCase
  listPipelinesUseCaseMutex                  sync.RWMutex
  listPipelinesUseCaseArgsForCall            []struct{}
  listPipelinesUseCaseReturns                struct {
                                                  result1 listPipelinesUseCase
                                                }
  RunDevOpUseCaseStub                        func() runDevOpUseCase
  runDevOpUseCaseMutex                       sync.RWMutex
  runDevOpUseCaseArgsForCall                 []struct{}
  runDevOpUseCaseReturns                     struct {
                                                  result1 runDevOpUseCase
                                                }
  RunPipelineUseCaseStub                     func() runPipelineUseCase
  runPipelineUseCaseMutex                    sync.RWMutex
  runPipelineUseCaseArgsForCall              []struct{}
  runPipelineUseCaseReturns                  struct {
                                                  result1 runPipelineUseCase
                                                }
  SetDescriptionOfDevOpUseCaseStub           func() setDescriptionOfDevOpUseCase
  setDescriptionOfDevOpUseCaseMutex          sync.RWMutex
  setDescriptionOfDevOpUseCaseArgsForCall    []struct{}
  setDescriptionOfDevOpUseCaseReturns        struct {
                                                  result1 setDescriptionOfDevOpUseCase
                                                }
  SetDescriptionOfPipelineUseCaseStub        func() setDescriptionOfPipelineUseCase
  setDescriptionOfPipelineUseCaseMutex       sync.RWMutex
  setDescriptionOfPipelineUseCaseArgsForCall []struct{}
  setDescriptionOfPipelineUseCaseReturns     struct {
                                                  result1 setDescriptionOfPipelineUseCase
                                                }
}

func (fake *fakeCompositionRoot) AddDevOpUseCase() addDevOpUseCase {
  fake.addDevOpUseCaseMutex.Lock()
  fake.addDevOpUseCaseArgsForCall = append(fake.addDevOpUseCaseArgsForCall, struct{}{})
  fake.addDevOpUseCaseMutex.Unlock()
  if fake.AddDevOpUseCaseStub != nil {
    return fake.AddDevOpUseCaseStub()
  } else {
    return fake.addDevOpUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) AddDevOpUseCaseCallCount() int {
  fake.addDevOpUseCaseMutex.RLock()
  defer fake.addDevOpUseCaseMutex.RUnlock()
  return len(fake.addDevOpUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) AddDevOpUseCaseReturns(result1 addDevOpUseCase) {
  fake.AddDevOpUseCaseStub = nil
  fake.addDevOpUseCaseReturns = struct {
    result1 addDevOpUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) AddPipelineUseCase() addPipelineUseCase {
  fake.addPipelineUseCaseMutex.Lock()
  fake.addPipelineUseCaseArgsForCall = append(fake.addPipelineUseCaseArgsForCall, struct{}{})
  fake.addPipelineUseCaseMutex.Unlock()
  if fake.AddPipelineUseCaseStub != nil {
    return fake.AddPipelineUseCaseStub()
  } else {
    return fake.addPipelineUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) AddPipelineUseCaseCallCount() int {
  fake.addPipelineUseCaseMutex.RLock()
  defer fake.addPipelineUseCaseMutex.RUnlock()
  return len(fake.addPipelineUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) AddPipelineUseCaseReturns(result1 addPipelineUseCase) {
  fake.AddPipelineUseCaseStub = nil
  fake.addPipelineUseCaseReturns = struct {
    result1 addPipelineUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) AddStageToPipelineUseCase() addStageToPipelineUseCase {
  fake.addStageToPipelineUseCaseMutex.Lock()
  fake.addStageToPipelineUseCaseArgsForCall = append(fake.addStageToPipelineUseCaseArgsForCall, struct{}{})
  fake.addStageToPipelineUseCaseMutex.Unlock()
  if fake.AddStageToPipelineUseCaseStub != nil {
    return fake.AddStageToPipelineUseCaseStub()
  } else {
    return fake.addStageToPipelineUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) AddStageToPipelineUseCaseCallCount() int {
  fake.addStageToPipelineUseCaseMutex.RLock()
  defer fake.addStageToPipelineUseCaseMutex.RUnlock()
  return len(fake.addStageToPipelineUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) AddStageToPipelineUseCaseReturns(result1 addStageToPipelineUseCase) {
  fake.AddStageToPipelineUseCaseStub = nil
  fake.addStageToPipelineUseCaseReturns = struct {
    result1 addStageToPipelineUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) ListDevOpsUseCase() listDevOpsUseCase {
  fake.listDevOpsUseCaseMutex.Lock()
  fake.listDevOpsUseCaseArgsForCall = append(fake.listDevOpsUseCaseArgsForCall, struct{}{})
  fake.listDevOpsUseCaseMutex.Unlock()
  if fake.ListDevOpsUseCaseStub != nil {
    return fake.ListDevOpsUseCaseStub()
  } else {
    return fake.listDevOpsUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) ListDevOpsUseCaseCallCount() int {
  fake.listDevOpsUseCaseMutex.RLock()
  defer fake.listDevOpsUseCaseMutex.RUnlock()
  return len(fake.listDevOpsUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) ListDevOpsUseCaseReturns(result1 listDevOpsUseCase) {
  fake.ListDevOpsUseCaseStub = nil
  fake.listDevOpsUseCaseReturns = struct {
    result1 listDevOpsUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) ListPipelinesUseCase() listPipelinesUseCase {
  fake.listPipelinesUseCaseMutex.Lock()
  fake.listPipelinesUseCaseArgsForCall = append(fake.listPipelinesUseCaseArgsForCall, struct{}{})
  fake.listPipelinesUseCaseMutex.Unlock()
  if fake.ListPipelinesUseCaseStub != nil {
    return fake.ListPipelinesUseCaseStub()
  } else {
    return fake.listPipelinesUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) ListPipelinesUseCaseCallCount() int {
  fake.listPipelinesUseCaseMutex.RLock()
  defer fake.listPipelinesUseCaseMutex.RUnlock()
  return len(fake.listPipelinesUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) ListPipelinesUseCaseReturns(result1 listPipelinesUseCase) {
  fake.ListPipelinesUseCaseStub = nil
  fake.listPipelinesUseCaseReturns = struct {
    result1 listPipelinesUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) RunDevOpUseCase() runDevOpUseCase {
  fake.runDevOpUseCaseMutex.Lock()
  fake.runDevOpUseCaseArgsForCall = append(fake.runDevOpUseCaseArgsForCall, struct{}{})
  fake.runDevOpUseCaseMutex.Unlock()
  if fake.RunDevOpUseCaseStub != nil {
    return fake.RunDevOpUseCaseStub()
  } else {
    return fake.runDevOpUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) RunDevOpUseCaseCallCount() int {
  fake.runDevOpUseCaseMutex.RLock()
  defer fake.runDevOpUseCaseMutex.RUnlock()
  return len(fake.runDevOpUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) RunDevOpUseCaseReturns(result1 runDevOpUseCase) {
  fake.RunDevOpUseCaseStub = nil
  fake.runDevOpUseCaseReturns = struct {
    result1 runDevOpUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) RunPipelineUseCase() runPipelineUseCase {
  fake.runPipelineUseCaseMutex.Lock()
  fake.runPipelineUseCaseArgsForCall = append(fake.runPipelineUseCaseArgsForCall, struct{}{})
  fake.runPipelineUseCaseMutex.Unlock()
  if fake.RunPipelineUseCaseStub != nil {
    return fake.RunPipelineUseCaseStub()
  } else {
    return fake.runPipelineUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) RunPipelineUseCaseCallCount() int {
  fake.runPipelineUseCaseMutex.RLock()
  defer fake.runPipelineUseCaseMutex.RUnlock()
  return len(fake.runPipelineUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) RunPipelineUseCaseReturns(result1 runPipelineUseCase) {
  fake.RunPipelineUseCaseStub = nil
  fake.runPipelineUseCaseReturns = struct {
    result1 runPipelineUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) SetDescriptionOfDevOpUseCase() setDescriptionOfDevOpUseCase {
  fake.setDescriptionOfDevOpUseCaseMutex.Lock()
  fake.setDescriptionOfDevOpUseCaseArgsForCall = append(fake.setDescriptionOfDevOpUseCaseArgsForCall, struct{}{})
  fake.setDescriptionOfDevOpUseCaseMutex.Unlock()
  if fake.SetDescriptionOfDevOpUseCaseStub != nil {
    return fake.SetDescriptionOfDevOpUseCaseStub()
  } else {
    return fake.setDescriptionOfDevOpUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) SetDescriptionOfDevOpUseCaseCallCount() int {
  fake.setDescriptionOfDevOpUseCaseMutex.RLock()
  defer fake.setDescriptionOfDevOpUseCaseMutex.RUnlock()
  return len(fake.setDescriptionOfDevOpUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) SetDescriptionOfDevOpUseCaseReturns(result1 setDescriptionOfDevOpUseCase) {
  fake.SetDescriptionOfDevOpUseCaseStub = nil
  fake.setDescriptionOfDevOpUseCaseReturns = struct {
    result1 setDescriptionOfDevOpUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) SetDescriptionOfPipelineUseCase() setDescriptionOfPipelineUseCase {
  fake.setDescriptionOfPipelineUseCaseMutex.Lock()
  fake.setDescriptionOfPipelineUseCaseArgsForCall = append(fake.setDescriptionOfPipelineUseCaseArgsForCall, struct{}{})
  fake.setDescriptionOfPipelineUseCaseMutex.Unlock()
  if fake.SetDescriptionOfPipelineUseCaseStub != nil {
    return fake.SetDescriptionOfPipelineUseCaseStub()
  } else {
    return fake.setDescriptionOfPipelineUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) SetDescriptionOfPipelineUseCaseCallCount() int {
  fake.setDescriptionOfPipelineUseCaseMutex.RLock()
  defer fake.setDescriptionOfPipelineUseCaseMutex.RUnlock()
  return len(fake.setDescriptionOfPipelineUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) SetDescriptionOfPipelineUseCaseReturns(result1 setDescriptionOfPipelineUseCase) {
  fake.SetDescriptionOfPipelineUseCaseStub = nil
  fake.setDescriptionOfPipelineUseCaseReturns = struct {
    result1 setDescriptionOfPipelineUseCase
  }{result1}
}
