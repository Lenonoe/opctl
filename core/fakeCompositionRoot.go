// This file was generated by counterfeiter
package core

import (
  "sync"
)

type fakeCompositionRoot struct {
  AddOperationUseCaseStub                     func() addOperationUseCase
  addOperationUseCaseMutex                    sync.RWMutex
  addOperationUseCaseArgsForCall              []struct{}
  addOperationUseCaseReturns                  struct {
                                                result1 addOperationUseCase
                                              }
  AddSubOperationUseCaseStub                  func() addSubOperationUseCase
  addSubOperationUseCaseMutex                 sync.RWMutex
  addSubOperationUseCaseArgsForCall           []struct{}
  addSubOperationUseCaseReturns               struct {
                                                result1 addSubOperationUseCase
                                              }
  ListOperationsUseCaseStub                   func() listOperationsUseCase
  listOperationsUseCaseMutex                  sync.RWMutex
  listOperationsUseCaseArgsForCall            []struct{}
  listOperationsUseCaseReturns                struct {
                                                result1 listOperationsUseCase
                                              }
  RunOperationUseCaseStub                     func() runOperationUseCase
  runOperationUseCaseMutex                    sync.RWMutex
  runOperationUseCaseArgsForCall              []struct{}
  runOperationUseCaseReturns                  struct {
                                                result1 runOperationUseCase
                                              }
  SetDescriptionOfOperationUseCaseStub        func() setDescriptionOfOperationUseCase
  setDescriptionOfOperationUseCaseMutex       sync.RWMutex
  setDescriptionOfOperationUseCaseArgsForCall []struct{}
  setDescriptionOfOperationUseCaseReturns     struct {
                                                result1 setDescriptionOfOperationUseCase
                                              }
}

func (fake *fakeCompositionRoot) AddOperationUseCase() addOperationUseCase {
  fake.addOperationUseCaseMutex.Lock()
  fake.addOperationUseCaseArgsForCall = append(fake.addOperationUseCaseArgsForCall, struct{}{})
  fake.addOperationUseCaseMutex.Unlock()
  if fake.AddOperationUseCaseStub != nil {
    return fake.AddOperationUseCaseStub()
  } else {
    return fake.addOperationUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) AddOperationUseCaseCallCount() int {
  fake.addOperationUseCaseMutex.RLock()
  defer fake.addOperationUseCaseMutex.RUnlock()
  return len(fake.addOperationUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) AddOperationUseCaseReturns(result1 addOperationUseCase) {
  fake.AddOperationUseCaseStub = nil
  fake.addOperationUseCaseReturns = struct {
    result1 addOperationUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) AddSubOperationUseCase() addSubOperationUseCase {
  fake.addSubOperationUseCaseMutex.Lock()
  fake.addSubOperationUseCaseArgsForCall = append(fake.addSubOperationUseCaseArgsForCall, struct{}{})
  fake.addSubOperationUseCaseMutex.Unlock()
  if fake.AddSubOperationUseCaseStub != nil {
    return fake.AddSubOperationUseCaseStub()
  } else {
    return fake.addSubOperationUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) AddSubOperationUseCaseCallCount() int {
  fake.addSubOperationUseCaseMutex.RLock()
  defer fake.addSubOperationUseCaseMutex.RUnlock()
  return len(fake.addSubOperationUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) AddSubOperationUseCaseReturns(result1 addSubOperationUseCase) {
  fake.AddSubOperationUseCaseStub = nil
  fake.addSubOperationUseCaseReturns = struct {
    result1 addSubOperationUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) ListOperationsUseCase() listOperationsUseCase {
  fake.listOperationsUseCaseMutex.Lock()
  fake.listOperationsUseCaseArgsForCall = append(fake.listOperationsUseCaseArgsForCall, struct{}{})
  fake.listOperationsUseCaseMutex.Unlock()
  if fake.ListOperationsUseCaseStub != nil {
    return fake.ListOperationsUseCaseStub()
  } else {
    return fake.listOperationsUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) ListOperationsUseCaseCallCount() int {
  fake.listOperationsUseCaseMutex.RLock()
  defer fake.listOperationsUseCaseMutex.RUnlock()
  return len(fake.listOperationsUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) ListOperationsUseCaseReturns(result1 listOperationsUseCase) {
  fake.ListOperationsUseCaseStub = nil
  fake.listOperationsUseCaseReturns = struct {
    result1 listOperationsUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) RunOperationUseCase() runOperationUseCase {
  fake.runOperationUseCaseMutex.Lock()
  fake.runOperationUseCaseArgsForCall = append(fake.runOperationUseCaseArgsForCall, struct{}{})
  fake.runOperationUseCaseMutex.Unlock()
  if fake.RunOperationUseCaseStub != nil {
    return fake.RunOperationUseCaseStub()
  } else {
    return fake.runOperationUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) RunOperationUseCaseCallCount() int {
  fake.runOperationUseCaseMutex.RLock()
  defer fake.runOperationUseCaseMutex.RUnlock()
  return len(fake.runOperationUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) RunOperationUseCaseReturns(result1 runOperationUseCase) {
  fake.RunOperationUseCaseStub = nil
  fake.runOperationUseCaseReturns = struct {
    result1 runOperationUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) SetDescriptionOfOperationUseCase() setDescriptionOfOperationUseCase {
  fake.setDescriptionOfOperationUseCaseMutex.Lock()
  fake.setDescriptionOfOperationUseCaseArgsForCall = append(fake.setDescriptionOfOperationUseCaseArgsForCall, struct{}{})
  fake.setDescriptionOfOperationUseCaseMutex.Unlock()
  if fake.SetDescriptionOfOperationUseCaseStub != nil {
    return fake.SetDescriptionOfOperationUseCaseStub()
  } else {
    return fake.setDescriptionOfOperationUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) SetDescriptionOfOperationUseCaseCallCount() int {
  fake.setDescriptionOfOperationUseCaseMutex.RLock()
  defer fake.setDescriptionOfOperationUseCaseMutex.RUnlock()
  return len(fake.setDescriptionOfOperationUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) SetDescriptionOfOperationUseCaseReturns(result1 setDescriptionOfOperationUseCase) {
  fake.SetDescriptionOfOperationUseCaseStub = nil
  fake.setDescriptionOfOperationUseCaseReturns = struct {
    result1 setDescriptionOfOperationUseCase
  }{result1}
}
