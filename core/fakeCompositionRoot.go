// This file was generated by counterfeiter
package core

import (
  "sync"
)

type fakeCompositionRoot struct {
  StartOpRunUseCaseStub            func() startOpRunUseCase
  startOpRunUseCaseMutex           sync.RWMutex
  startOpRunUseCaseArgsForCall     []struct{}
  startOpRunUseCaseReturns         struct {
                                     result1 startOpRunUseCase
                                   }
  GetEventStreamUseCaseStub        func() getEventStreamUseCase
  getEventStreamUseCaseMutex       sync.RWMutex
  getEventStreamUseCaseArgsForCall []struct{}
  getEventStreamUseCaseReturns     struct {
                                     result1 getEventStreamUseCase
                                   }
  KillOpRunUseCaseStub             func() killOpRunUseCase
  killOpRunUseCaseMutex            sync.RWMutex
  killOpRunUseCaseArgsForCall      []struct{}
  killOpRunUseCaseReturns          struct {
                                     result1 killOpRunUseCase
                                   }
  invocations                      map[string][][]interface{}
  invocationsMutex                 sync.RWMutex
}

func (fake *fakeCompositionRoot) StartOpRunUseCase() startOpRunUseCase {
  fake.startOpRunUseCaseMutex.Lock()
  fake.startOpRunUseCaseArgsForCall = append(fake.startOpRunUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("StartOpRunUseCase", []interface{}{})
  fake.startOpRunUseCaseMutex.Unlock()
  if fake.StartOpRunUseCaseStub != nil {
    return fake.StartOpRunUseCaseStub()
  } else {
    return fake.startOpRunUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) StartOpRunUseCaseCallCount() int {
  fake.startOpRunUseCaseMutex.RLock()
  defer fake.startOpRunUseCaseMutex.RUnlock()
  return len(fake.startOpRunUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) StartOpRunUseCaseReturns(result1 startOpRunUseCase) {
  fake.StartOpRunUseCaseStub = nil
  fake.startOpRunUseCaseReturns = struct {
    result1 startOpRunUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) GetEventStreamUseCase() getEventStreamUseCase {
  fake.getEventStreamUseCaseMutex.Lock()
  fake.getEventStreamUseCaseArgsForCall = append(fake.getEventStreamUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("GetEventStreamUseCase", []interface{}{})
  fake.getEventStreamUseCaseMutex.Unlock()
  if fake.GetEventStreamUseCaseStub != nil {
    return fake.GetEventStreamUseCaseStub()
  } else {
    return fake.getEventStreamUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) GetEventStreamUseCaseCallCount() int {
  fake.getEventStreamUseCaseMutex.RLock()
  defer fake.getEventStreamUseCaseMutex.RUnlock()
  return len(fake.getEventStreamUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) GetEventStreamUseCaseReturns(result1 getEventStreamUseCase) {
  fake.GetEventStreamUseCaseStub = nil
  fake.getEventStreamUseCaseReturns = struct {
    result1 getEventStreamUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) KillOpRunUseCase() killOpRunUseCase {
  fake.killOpRunUseCaseMutex.Lock()
  fake.killOpRunUseCaseArgsForCall = append(fake.killOpRunUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("KillOpRunUseCase", []interface{}{})
  fake.killOpRunUseCaseMutex.Unlock()
  if fake.KillOpRunUseCaseStub != nil {
    return fake.KillOpRunUseCaseStub()
  } else {
    return fake.killOpRunUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) KillOpRunUseCaseCallCount() int {
  fake.killOpRunUseCaseMutex.RLock()
  defer fake.killOpRunUseCaseMutex.RUnlock()
  return len(fake.killOpRunUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) KillOpRunUseCaseReturns(result1 killOpRunUseCase) {
  fake.KillOpRunUseCaseStub = nil
  fake.killOpRunUseCaseReturns = struct {
    result1 killOpRunUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.startOpRunUseCaseMutex.RLock()
  defer fake.startOpRunUseCaseMutex.RUnlock()
  fake.getEventStreamUseCaseMutex.RLock()
  defer fake.getEventStreamUseCaseMutex.RUnlock()
  fake.killOpRunUseCaseMutex.RLock()
  defer fake.killOpRunUseCaseMutex.RUnlock()
  return fake.invocations
}

func (fake *fakeCompositionRoot) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
