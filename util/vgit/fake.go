// This file was generated by counterfeiter
package vgit

import (
	"sync"

	"gopkg.in/src-d/go-git.v4"
)

type Fake struct {
	PlainCloneStub        func(path string, isBare bool, o *git.CloneOptions) error
	plainCloneMutex       sync.RWMutex
	plainCloneArgsForCall []struct {
		path   string
		isBare bool
		o      *git.CloneOptions
	}
	plainCloneReturns struct {
		result1 error
	}
	plainCloneReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) PlainClone(path string, isBare bool, o *git.CloneOptions) error {
	fake.plainCloneMutex.Lock()
	ret, specificReturn := fake.plainCloneReturnsOnCall[len(fake.plainCloneArgsForCall)]
	fake.plainCloneArgsForCall = append(fake.plainCloneArgsForCall, struct {
		path   string
		isBare bool
		o      *git.CloneOptions
	}{path, isBare, o})
	fake.recordInvocation("PlainClone", []interface{}{path, isBare, o})
	fake.plainCloneMutex.Unlock()
	if fake.PlainCloneStub != nil {
		return fake.PlainCloneStub(path, isBare, o)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.plainCloneReturns.result1
}

func (fake *Fake) PlainCloneCallCount() int {
	fake.plainCloneMutex.RLock()
	defer fake.plainCloneMutex.RUnlock()
	return len(fake.plainCloneArgsForCall)
}

func (fake *Fake) PlainCloneArgsForCall(i int) (string, bool, *git.CloneOptions) {
	fake.plainCloneMutex.RLock()
	defer fake.plainCloneMutex.RUnlock()
	return fake.plainCloneArgsForCall[i].path, fake.plainCloneArgsForCall[i].isBare, fake.plainCloneArgsForCall[i].o
}

func (fake *Fake) PlainCloneReturns(result1 error) {
	fake.PlainCloneStub = nil
	fake.plainCloneReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) PlainCloneReturnsOnCall(i int, result1 error) {
	fake.PlainCloneStub = nil
	if fake.plainCloneReturnsOnCall == nil {
		fake.plainCloneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.plainCloneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.plainCloneMutex.RLock()
	defer fake.plainCloneMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ VGit = new(Fake)
