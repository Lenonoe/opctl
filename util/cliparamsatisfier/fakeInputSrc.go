// This file was generated by counterfeiter
package cliparamsatisfier

import (
	"sync"
)

type FakeInputSrc struct {
	ReadStub        func(inputName string) *string
	readMutex       sync.RWMutex
	readArgsForCall []struct {
		inputName string
	}
	readReturns struct {
		result1 *string
	}
	readReturnsOnCall map[int]struct {
		result1 *string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInputSrc) Read(inputName string) *string {
	fake.readMutex.Lock()
	ret, specificReturn := fake.readReturnsOnCall[len(fake.readArgsForCall)]
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
		inputName string
	}{inputName})
	fake.recordInvocation("Read", []interface{}{inputName})
	fake.readMutex.Unlock()
	if fake.ReadStub != nil {
		return fake.ReadStub(inputName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.readReturns.result1
}

func (fake *FakeInputSrc) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakeInputSrc) ReadArgsForCall(i int) string {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return fake.readArgsForCall[i].inputName
}

func (fake *FakeInputSrc) ReadReturns(result1 *string) {
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 *string
	}{result1}
}

func (fake *FakeInputSrc) ReadReturnsOnCall(i int, result1 *string) {
	fake.ReadStub = nil
	if fake.readReturnsOnCall == nil {
		fake.readReturnsOnCall = make(map[int]struct {
			result1 *string
		})
	}
	fake.readReturnsOnCall[i] = struct {
		result1 *string
	}{result1}
}

func (fake *FakeInputSrc) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeInputSrc) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ InputSrc = new(FakeInputSrc)
