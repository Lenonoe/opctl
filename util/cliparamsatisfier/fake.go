// This file was generated by counterfeiter
package cliparamsatisfier

import (
	"sync"

	"github.com/opspec-io/sdk-golang/model"
)

type Fake struct {
	SatisfyStub        func(options []string, params map[string]*model.Param) (argMap map[string]*model.Data)
	satisfyMutex       sync.RWMutex
	satisfyArgsForCall []struct {
		options []string
		params  map[string]*model.Param
	}
	satisfyReturns struct {
		result1 map[string]*model.Data
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Satisfy(options []string, params map[string]*model.Param) (argMap map[string]*model.Data) {
	var optionsCopy []string
	if options != nil {
		optionsCopy = make([]string, len(options))
		copy(optionsCopy, options)
	}
	fake.satisfyMutex.Lock()
	fake.satisfyArgsForCall = append(fake.satisfyArgsForCall, struct {
		options []string
		params  map[string]*model.Param
	}{optionsCopy, params})
	fake.recordInvocation("Satisfy", []interface{}{optionsCopy, params})
	fake.satisfyMutex.Unlock()
	if fake.SatisfyStub != nil {
		return fake.SatisfyStub(options, params)
	} else {
		return fake.satisfyReturns.result1
	}
}

func (fake *Fake) SatisfyCallCount() int {
	fake.satisfyMutex.RLock()
	defer fake.satisfyMutex.RUnlock()
	return len(fake.satisfyArgsForCall)
}

func (fake *Fake) SatisfyArgsForCall(i int) ([]string, map[string]*model.Param) {
	fake.satisfyMutex.RLock()
	defer fake.satisfyMutex.RUnlock()
	return fake.satisfyArgsForCall[i].options, fake.satisfyArgsForCall[i].params
}

func (fake *Fake) SatisfyReturns(result1 map[string]*model.Data) {
	fake.SatisfyStub = nil
	fake.satisfyReturns = struct {
		result1 map[string]*model.Data
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.satisfyMutex.RLock()
	defer fake.satisfyMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ CliParamSatisfier = new(Fake)
