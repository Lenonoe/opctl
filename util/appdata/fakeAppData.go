// This file was generated by counterfeiter
package appdata

import (
	"sync"
)

type FakeAppData struct {
	GlobalPathStub        func() string
	globalPathMutex       sync.RWMutex
	globalPathArgsForCall []struct{}
	globalPathReturns     struct {
		result1 string
	}
	PerUserPathStub        func() string
	perUserPathMutex       sync.RWMutex
	perUserPathArgsForCall []struct{}
	perUserPathReturns     struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppData) GlobalPath() string {
	fake.globalPathMutex.Lock()
	fake.globalPathArgsForCall = append(fake.globalPathArgsForCall, struct{}{})
	fake.recordInvocation("GlobalPath", []interface{}{})
	fake.globalPathMutex.Unlock()
	if fake.GlobalPathStub != nil {
		return fake.GlobalPathStub()
	} else {
		return fake.globalPathReturns.result1
	}
}

func (fake *FakeAppData) GlobalPathCallCount() int {
	fake.globalPathMutex.RLock()
	defer fake.globalPathMutex.RUnlock()
	return len(fake.globalPathArgsForCall)
}

func (fake *FakeAppData) GlobalPathReturns(result1 string) {
	fake.GlobalPathStub = nil
	fake.globalPathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAppData) PerUserPath() string {
	fake.perUserPathMutex.Lock()
	fake.perUserPathArgsForCall = append(fake.perUserPathArgsForCall, struct{}{})
	fake.recordInvocation("PerUserPath", []interface{}{})
	fake.perUserPathMutex.Unlock()
	if fake.PerUserPathStub != nil {
		return fake.PerUserPathStub()
	} else {
		return fake.perUserPathReturns.result1
	}
}

func (fake *FakeAppData) PerUserPathCallCount() int {
	fake.perUserPathMutex.RLock()
	defer fake.perUserPathMutex.RUnlock()
	return len(fake.perUserPathArgsForCall)
}

func (fake *FakeAppData) PerUserPathReturns(result1 string) {
	fake.PerUserPathStub = nil
	fake.perUserPathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAppData) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.globalPathMutex.RLock()
	defer fake.globalPathMutex.RUnlock()
	fake.perUserPathMutex.RLock()
	defer fake.perUserPathMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAppData) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ AppData = new(FakeAppData)
