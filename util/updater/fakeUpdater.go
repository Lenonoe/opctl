// This file was generated by counterfeiter
package updater

import (
	"sync"
)

type FakeUpdater struct {
	TryGetUpdateStub        func(releaseChannel string) (update *Update, err error)
	tryGetUpdateMutex       sync.RWMutex
	tryGetUpdateArgsForCall []struct {
		releaseChannel string
	}
	tryGetUpdateReturns struct {
		result1 *Update
		result2 error
	}
	ApplyUpdateStub        func(update *Update) (err error)
	applyUpdateMutex       sync.RWMutex
	applyUpdateArgsForCall []struct {
		update *Update
	}
	applyUpdateReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUpdater) TryGetUpdate(releaseChannel string) (update *Update, err error) {
	fake.tryGetUpdateMutex.Lock()
	fake.tryGetUpdateArgsForCall = append(fake.tryGetUpdateArgsForCall, struct {
		releaseChannel string
	}{releaseChannel})
	fake.recordInvocation("TryGetUpdate", []interface{}{releaseChannel})
	fake.tryGetUpdateMutex.Unlock()
	if fake.TryGetUpdateStub != nil {
		return fake.TryGetUpdateStub(releaseChannel)
	} else {
		return fake.tryGetUpdateReturns.result1, fake.tryGetUpdateReturns.result2
	}
}

func (fake *FakeUpdater) TryGetUpdateCallCount() int {
	fake.tryGetUpdateMutex.RLock()
	defer fake.tryGetUpdateMutex.RUnlock()
	return len(fake.tryGetUpdateArgsForCall)
}

func (fake *FakeUpdater) TryGetUpdateArgsForCall(i int) string {
	fake.tryGetUpdateMutex.RLock()
	defer fake.tryGetUpdateMutex.RUnlock()
	return fake.tryGetUpdateArgsForCall[i].releaseChannel
}

func (fake *FakeUpdater) TryGetUpdateReturns(result1 *Update, result2 error) {
	fake.TryGetUpdateStub = nil
	fake.tryGetUpdateReturns = struct {
		result1 *Update
		result2 error
	}{result1, result2}
}

func (fake *FakeUpdater) ApplyUpdate(update *Update) (err error) {
	fake.applyUpdateMutex.Lock()
	fake.applyUpdateArgsForCall = append(fake.applyUpdateArgsForCall, struct {
		update *Update
	}{update})
	fake.recordInvocation("ApplyUpdate", []interface{}{update})
	fake.applyUpdateMutex.Unlock()
	if fake.ApplyUpdateStub != nil {
		return fake.ApplyUpdateStub(update)
	} else {
		return fake.applyUpdateReturns.result1
	}
}

func (fake *FakeUpdater) ApplyUpdateCallCount() int {
	fake.applyUpdateMutex.RLock()
	defer fake.applyUpdateMutex.RUnlock()
	return len(fake.applyUpdateArgsForCall)
}

func (fake *FakeUpdater) ApplyUpdateArgsForCall(i int) *Update {
	fake.applyUpdateMutex.RLock()
	defer fake.applyUpdateMutex.RUnlock()
	return fake.applyUpdateArgsForCall[i].update
}

func (fake *FakeUpdater) ApplyUpdateReturns(result1 error) {
	fake.ApplyUpdateStub = nil
	fake.applyUpdateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.tryGetUpdateMutex.RLock()
	defer fake.tryGetUpdateMutex.RUnlock()
	fake.applyUpdateMutex.RLock()
	defer fake.applyUpdateMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeUpdater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ = new(FakeUpdater)
