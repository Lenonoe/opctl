// This file was generated by counterfeiter
package containerprovider

import (
	"sync"

	"github.com/opspec-io/opctl/util/pubsub"
	"github.com/opspec-io/sdk-golang/pkg/model"
)

type Fake struct {
	CreateNetworkStub        func(networkId string) (err error)
	createNetworkMutex       sync.RWMutex
	createNetworkArgsForCall []struct {
		networkId string
	}
	createNetworkReturns struct {
		result1 error
	}
	createNetworkReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteNetworkIfExistsStub        func(networkId string) (err error)
	deleteNetworkIfExistsMutex       sync.RWMutex
	deleteNetworkIfExistsArgsForCall []struct {
		networkId string
	}
	deleteNetworkIfExistsReturns struct {
		result1 error
	}
	deleteNetworkIfExistsReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteContainerIfExistsStub        func(containerId string) (err error)
	deleteContainerIfExistsMutex       sync.RWMutex
	deleteContainerIfExistsArgsForCall []struct {
		containerId string
	}
	deleteContainerIfExistsReturns struct {
		result1 error
	}
	deleteContainerIfExistsReturnsOnCall map[int]struct {
		result1 error
	}
	NetworkContainerStub        func(networkId string, containerId string, containerAlias string) (err error)
	networkContainerMutex       sync.RWMutex
	networkContainerArgsForCall []struct {
		networkId      string
		containerId    string
		containerAlias string
	}
	networkContainerReturns struct {
		result1 error
	}
	networkContainerReturnsOnCall map[int]struct {
		result1 error
	}
	RunContainerStub        func(req *model.DCGContainerCall, eventPublisher pubsub.EventPublisher) (err error)
	runContainerMutex       sync.RWMutex
	runContainerArgsForCall []struct {
		req            *model.DCGContainerCall
		eventPublisher pubsub.EventPublisher
	}
	runContainerReturns struct {
		result1 error
	}
	runContainerReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) CreateNetwork(networkId string) (err error) {
	fake.createNetworkMutex.Lock()
	ret, specificReturn := fake.createNetworkReturnsOnCall[len(fake.createNetworkArgsForCall)]
	fake.createNetworkArgsForCall = append(fake.createNetworkArgsForCall, struct {
		networkId string
	}{networkId})
	fake.recordInvocation("CreateNetwork", []interface{}{networkId})
	fake.createNetworkMutex.Unlock()
	if fake.CreateNetworkStub != nil {
		return fake.CreateNetworkStub(networkId)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createNetworkReturns.result1
}

func (fake *Fake) CreateNetworkCallCount() int {
	fake.createNetworkMutex.RLock()
	defer fake.createNetworkMutex.RUnlock()
	return len(fake.createNetworkArgsForCall)
}

func (fake *Fake) CreateNetworkArgsForCall(i int) string {
	fake.createNetworkMutex.RLock()
	defer fake.createNetworkMutex.RUnlock()
	return fake.createNetworkArgsForCall[i].networkId
}

func (fake *Fake) CreateNetworkReturns(result1 error) {
	fake.CreateNetworkStub = nil
	fake.createNetworkReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) CreateNetworkReturnsOnCall(i int, result1 error) {
	fake.CreateNetworkStub = nil
	if fake.createNetworkReturnsOnCall == nil {
		fake.createNetworkReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createNetworkReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Fake) DeleteNetworkIfExists(networkId string) (err error) {
	fake.deleteNetworkIfExistsMutex.Lock()
	ret, specificReturn := fake.deleteNetworkIfExistsReturnsOnCall[len(fake.deleteNetworkIfExistsArgsForCall)]
	fake.deleteNetworkIfExistsArgsForCall = append(fake.deleteNetworkIfExistsArgsForCall, struct {
		networkId string
	}{networkId})
	fake.recordInvocation("DeleteNetworkIfExists", []interface{}{networkId})
	fake.deleteNetworkIfExistsMutex.Unlock()
	if fake.DeleteNetworkIfExistsStub != nil {
		return fake.DeleteNetworkIfExistsStub(networkId)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteNetworkIfExistsReturns.result1
}

func (fake *Fake) DeleteNetworkIfExistsCallCount() int {
	fake.deleteNetworkIfExistsMutex.RLock()
	defer fake.deleteNetworkIfExistsMutex.RUnlock()
	return len(fake.deleteNetworkIfExistsArgsForCall)
}

func (fake *Fake) DeleteNetworkIfExistsArgsForCall(i int) string {
	fake.deleteNetworkIfExistsMutex.RLock()
	defer fake.deleteNetworkIfExistsMutex.RUnlock()
	return fake.deleteNetworkIfExistsArgsForCall[i].networkId
}

func (fake *Fake) DeleteNetworkIfExistsReturns(result1 error) {
	fake.DeleteNetworkIfExistsStub = nil
	fake.deleteNetworkIfExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) DeleteNetworkIfExistsReturnsOnCall(i int, result1 error) {
	fake.DeleteNetworkIfExistsStub = nil
	if fake.deleteNetworkIfExistsReturnsOnCall == nil {
		fake.deleteNetworkIfExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteNetworkIfExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Fake) DeleteContainerIfExists(containerId string) (err error) {
	fake.deleteContainerIfExistsMutex.Lock()
	ret, specificReturn := fake.deleteContainerIfExistsReturnsOnCall[len(fake.deleteContainerIfExistsArgsForCall)]
	fake.deleteContainerIfExistsArgsForCall = append(fake.deleteContainerIfExistsArgsForCall, struct {
		containerId string
	}{containerId})
	fake.recordInvocation("DeleteContainerIfExists", []interface{}{containerId})
	fake.deleteContainerIfExistsMutex.Unlock()
	if fake.DeleteContainerIfExistsStub != nil {
		return fake.DeleteContainerIfExistsStub(containerId)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteContainerIfExistsReturns.result1
}

func (fake *Fake) DeleteContainerIfExistsCallCount() int {
	fake.deleteContainerIfExistsMutex.RLock()
	defer fake.deleteContainerIfExistsMutex.RUnlock()
	return len(fake.deleteContainerIfExistsArgsForCall)
}

func (fake *Fake) DeleteContainerIfExistsArgsForCall(i int) string {
	fake.deleteContainerIfExistsMutex.RLock()
	defer fake.deleteContainerIfExistsMutex.RUnlock()
	return fake.deleteContainerIfExistsArgsForCall[i].containerId
}

func (fake *Fake) DeleteContainerIfExistsReturns(result1 error) {
	fake.DeleteContainerIfExistsStub = nil
	fake.deleteContainerIfExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) DeleteContainerIfExistsReturnsOnCall(i int, result1 error) {
	fake.DeleteContainerIfExistsStub = nil
	if fake.deleteContainerIfExistsReturnsOnCall == nil {
		fake.deleteContainerIfExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteContainerIfExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Fake) NetworkContainer(networkId string, containerId string, containerAlias string) (err error) {
	fake.networkContainerMutex.Lock()
	ret, specificReturn := fake.networkContainerReturnsOnCall[len(fake.networkContainerArgsForCall)]
	fake.networkContainerArgsForCall = append(fake.networkContainerArgsForCall, struct {
		networkId      string
		containerId    string
		containerAlias string
	}{networkId, containerId, containerAlias})
	fake.recordInvocation("NetworkContainer", []interface{}{networkId, containerId, containerAlias})
	fake.networkContainerMutex.Unlock()
	if fake.NetworkContainerStub != nil {
		return fake.NetworkContainerStub(networkId, containerId, containerAlias)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.networkContainerReturns.result1
}

func (fake *Fake) NetworkContainerCallCount() int {
	fake.networkContainerMutex.RLock()
	defer fake.networkContainerMutex.RUnlock()
	return len(fake.networkContainerArgsForCall)
}

func (fake *Fake) NetworkContainerArgsForCall(i int) (string, string, string) {
	fake.networkContainerMutex.RLock()
	defer fake.networkContainerMutex.RUnlock()
	return fake.networkContainerArgsForCall[i].networkId, fake.networkContainerArgsForCall[i].containerId, fake.networkContainerArgsForCall[i].containerAlias
}

func (fake *Fake) NetworkContainerReturns(result1 error) {
	fake.NetworkContainerStub = nil
	fake.networkContainerReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) NetworkContainerReturnsOnCall(i int, result1 error) {
	fake.NetworkContainerStub = nil
	if fake.networkContainerReturnsOnCall == nil {
		fake.networkContainerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.networkContainerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Fake) RunContainer(req *model.DCGContainerCall, eventPublisher pubsub.EventPublisher) (err error) {
	fake.runContainerMutex.Lock()
	ret, specificReturn := fake.runContainerReturnsOnCall[len(fake.runContainerArgsForCall)]
	fake.runContainerArgsForCall = append(fake.runContainerArgsForCall, struct {
		req            *model.DCGContainerCall
		eventPublisher pubsub.EventPublisher
	}{req, eventPublisher})
	fake.recordInvocation("RunContainer", []interface{}{req, eventPublisher})
	fake.runContainerMutex.Unlock()
	if fake.RunContainerStub != nil {
		return fake.RunContainerStub(req, eventPublisher)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.runContainerReturns.result1
}

func (fake *Fake) RunContainerCallCount() int {
	fake.runContainerMutex.RLock()
	defer fake.runContainerMutex.RUnlock()
	return len(fake.runContainerArgsForCall)
}

func (fake *Fake) RunContainerArgsForCall(i int) (*model.DCGContainerCall, pubsub.EventPublisher) {
	fake.runContainerMutex.RLock()
	defer fake.runContainerMutex.RUnlock()
	return fake.runContainerArgsForCall[i].req, fake.runContainerArgsForCall[i].eventPublisher
}

func (fake *Fake) RunContainerReturns(result1 error) {
	fake.RunContainerStub = nil
	fake.runContainerReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) RunContainerReturnsOnCall(i int, result1 error) {
	fake.RunContainerStub = nil
	if fake.runContainerReturnsOnCall == nil {
		fake.runContainerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runContainerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createNetworkMutex.RLock()
	defer fake.createNetworkMutex.RUnlock()
	fake.deleteNetworkIfExistsMutex.RLock()
	defer fake.deleteNetworkIfExistsMutex.RUnlock()
	fake.deleteContainerIfExistsMutex.RLock()
	defer fake.deleteContainerIfExistsMutex.RUnlock()
	fake.networkContainerMutex.RLock()
	defer fake.networkContainerMutex.RUnlock()
	fake.runContainerMutex.RLock()
	defer fake.runContainerMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ContainerProvider = new(Fake)
