// Code generated by counterfeiter. DO NOT EDIT.
package coerce

import (
	"sync"

	"github.com/opspec-io/sdk-golang/model"
)

type Fake struct {
	ToNumberStub        func(value *model.Value) (float64, error)
	toNumberMutex       sync.RWMutex
	toNumberArgsForCall []struct {
		value *model.Value
	}
	toNumberReturns struct {
		result1 float64
		result2 error
	}
	toNumberReturnsOnCall map[int]struct {
		result1 float64
		result2 error
	}
	ToStringStub        func(value *model.Value) (string, error)
	toStringMutex       sync.RWMutex
	toStringArgsForCall []struct {
		value *model.Value
	}
	toStringReturns struct {
		result1 string
		result2 error
	}
	toStringReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) ToNumber(value *model.Value) (float64, error) {
	fake.toNumberMutex.Lock()
	ret, specificReturn := fake.toNumberReturnsOnCall[len(fake.toNumberArgsForCall)]
	fake.toNumberArgsForCall = append(fake.toNumberArgsForCall, struct {
		value *model.Value
	}{value})
	fake.recordInvocation("ToNumber", []interface{}{value})
	fake.toNumberMutex.Unlock()
	if fake.ToNumberStub != nil {
		return fake.ToNumberStub(value)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.toNumberReturns.result1, fake.toNumberReturns.result2
}

func (fake *Fake) ToNumberCallCount() int {
	fake.toNumberMutex.RLock()
	defer fake.toNumberMutex.RUnlock()
	return len(fake.toNumberArgsForCall)
}

func (fake *Fake) ToNumberArgsForCall(i int) *model.Value {
	fake.toNumberMutex.RLock()
	defer fake.toNumberMutex.RUnlock()
	return fake.toNumberArgsForCall[i].value
}

func (fake *Fake) ToNumberReturns(result1 float64, result2 error) {
	fake.ToNumberStub = nil
	fake.toNumberReturns = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *Fake) ToNumberReturnsOnCall(i int, result1 float64, result2 error) {
	fake.ToNumberStub = nil
	if fake.toNumberReturnsOnCall == nil {
		fake.toNumberReturnsOnCall = make(map[int]struct {
			result1 float64
			result2 error
		})
	}
	fake.toNumberReturnsOnCall[i] = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *Fake) ToString(value *model.Value) (string, error) {
	fake.toStringMutex.Lock()
	ret, specificReturn := fake.toStringReturnsOnCall[len(fake.toStringArgsForCall)]
	fake.toStringArgsForCall = append(fake.toStringArgsForCall, struct {
		value *model.Value
	}{value})
	fake.recordInvocation("ToString", []interface{}{value})
	fake.toStringMutex.Unlock()
	if fake.ToStringStub != nil {
		return fake.ToStringStub(value)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.toStringReturns.result1, fake.toStringReturns.result2
}

func (fake *Fake) ToStringCallCount() int {
	fake.toStringMutex.RLock()
	defer fake.toStringMutex.RUnlock()
	return len(fake.toStringArgsForCall)
}

func (fake *Fake) ToStringArgsForCall(i int) *model.Value {
	fake.toStringMutex.RLock()
	defer fake.toStringMutex.RUnlock()
	return fake.toStringArgsForCall[i].value
}

func (fake *Fake) ToStringReturns(result1 string, result2 error) {
	fake.ToStringStub = nil
	fake.toStringReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Fake) ToStringReturnsOnCall(i int, result1 string, result2 error) {
	fake.ToStringStub = nil
	if fake.toStringReturnsOnCall == nil {
		fake.toStringReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.toStringReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.toNumberMutex.RLock()
	defer fake.toNumberMutex.RUnlock()
	fake.toStringMutex.RLock()
	defer fake.toStringMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Coerce = new(Fake)
