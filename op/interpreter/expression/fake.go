// Code generated by counterfeiter. DO NOT EDIT.
package expression

import (
	"sync"

	"github.com/opspec-io/sdk-golang/model"
)

type Fake struct {
	EvalToArrayStub        func(scope map[string]*model.Value, expression interface{}, opDirHandle model.DataHandle) (*model.Value, error)
	evalToArrayMutex       sync.RWMutex
	evalToArrayArgsForCall []struct {
		scope       map[string]*model.Value
		expression  interface{}
		opDirHandle model.DataHandle
	}
	evalToArrayReturns struct {
		result1 *model.Value
		result2 error
	}
	evalToArrayReturnsOnCall map[int]struct {
		result1 *model.Value
		result2 error
	}
	EvalToBooleanStub        func(scope map[string]*model.Value, expression interface{}, opDirHandle model.DataHandle) (*model.Value, error)
	evalToBooleanMutex       sync.RWMutex
	evalToBooleanArgsForCall []struct {
		scope       map[string]*model.Value
		expression  interface{}
		opDirHandle model.DataHandle
	}
	evalToBooleanReturns struct {
		result1 *model.Value
		result2 error
	}
	evalToBooleanReturnsOnCall map[int]struct {
		result1 *model.Value
		result2 error
	}
	EvalToDirStub        func(scope map[string]*model.Value, expression interface{}, opDirHandle model.DataHandle) (*model.Value, error)
	evalToDirMutex       sync.RWMutex
	evalToDirArgsForCall []struct {
		scope       map[string]*model.Value
		expression  interface{}
		opDirHandle model.DataHandle
	}
	evalToDirReturns struct {
		result1 *model.Value
		result2 error
	}
	evalToDirReturnsOnCall map[int]struct {
		result1 *model.Value
		result2 error
	}
	EvalToFileStub        func(scope map[string]*model.Value, expression interface{}, opDirHandle model.DataHandle, scratchDir string) (*model.Value, error)
	evalToFileMutex       sync.RWMutex
	evalToFileArgsForCall []struct {
		scope       map[string]*model.Value
		expression  interface{}
		opDirHandle model.DataHandle
		scratchDir  string
	}
	evalToFileReturns struct {
		result1 *model.Value
		result2 error
	}
	evalToFileReturnsOnCall map[int]struct {
		result1 *model.Value
		result2 error
	}
	EvalToNumberStub        func(scope map[string]*model.Value, expression interface{}, opDirHandle model.DataHandle) (*model.Value, error)
	evalToNumberMutex       sync.RWMutex
	evalToNumberArgsForCall []struct {
		scope       map[string]*model.Value
		expression  interface{}
		opDirHandle model.DataHandle
	}
	evalToNumberReturns struct {
		result1 *model.Value
		result2 error
	}
	evalToNumberReturnsOnCall map[int]struct {
		result1 *model.Value
		result2 error
	}
	EvalToObjectStub        func(scope map[string]*model.Value, expression interface{}, opDirHandle model.DataHandle) (*model.Value, error)
	evalToObjectMutex       sync.RWMutex
	evalToObjectArgsForCall []struct {
		scope       map[string]*model.Value
		expression  interface{}
		opDirHandle model.DataHandle
	}
	evalToObjectReturns struct {
		result1 *model.Value
		result2 error
	}
	evalToObjectReturnsOnCall map[int]struct {
		result1 *model.Value
		result2 error
	}
	EvalToStringStub        func(scope map[string]*model.Value, expression interface{}, opDirHandle model.DataHandle) (*model.Value, error)
	evalToStringMutex       sync.RWMutex
	evalToStringArgsForCall []struct {
		scope       map[string]*model.Value
		expression  interface{}
		opDirHandle model.DataHandle
	}
	evalToStringReturns struct {
		result1 *model.Value
		result2 error
	}
	evalToStringReturnsOnCall map[int]struct {
		result1 *model.Value
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) EvalToArray(scope map[string]*model.Value, expression interface{}, opDirHandle model.DataHandle) (*model.Value, error) {
	fake.evalToArrayMutex.Lock()
	ret, specificReturn := fake.evalToArrayReturnsOnCall[len(fake.evalToArrayArgsForCall)]
	fake.evalToArrayArgsForCall = append(fake.evalToArrayArgsForCall, struct {
		scope       map[string]*model.Value
		expression  interface{}
		opDirHandle model.DataHandle
	}{scope, expression, opDirHandle})
	fake.recordInvocation("EvalToArray", []interface{}{scope, expression, opDirHandle})
	fake.evalToArrayMutex.Unlock()
	if fake.EvalToArrayStub != nil {
		return fake.EvalToArrayStub(scope, expression, opDirHandle)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.evalToArrayReturns.result1, fake.evalToArrayReturns.result2
}

func (fake *Fake) EvalToArrayCallCount() int {
	fake.evalToArrayMutex.RLock()
	defer fake.evalToArrayMutex.RUnlock()
	return len(fake.evalToArrayArgsForCall)
}

func (fake *Fake) EvalToArrayArgsForCall(i int) (map[string]*model.Value, interface{}, model.DataHandle) {
	fake.evalToArrayMutex.RLock()
	defer fake.evalToArrayMutex.RUnlock()
	return fake.evalToArrayArgsForCall[i].scope, fake.evalToArrayArgsForCall[i].expression, fake.evalToArrayArgsForCall[i].opDirHandle
}

func (fake *Fake) EvalToArrayReturns(result1 *model.Value, result2 error) {
	fake.EvalToArrayStub = nil
	fake.evalToArrayReturns = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *Fake) EvalToArrayReturnsOnCall(i int, result1 *model.Value, result2 error) {
	fake.EvalToArrayStub = nil
	if fake.evalToArrayReturnsOnCall == nil {
		fake.evalToArrayReturnsOnCall = make(map[int]struct {
			result1 *model.Value
			result2 error
		})
	}
	fake.evalToArrayReturnsOnCall[i] = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *Fake) EvalToBoolean(scope map[string]*model.Value, expression interface{}, opDirHandle model.DataHandle) (*model.Value, error) {
	fake.evalToBooleanMutex.Lock()
	ret, specificReturn := fake.evalToBooleanReturnsOnCall[len(fake.evalToBooleanArgsForCall)]
	fake.evalToBooleanArgsForCall = append(fake.evalToBooleanArgsForCall, struct {
		scope       map[string]*model.Value
		expression  interface{}
		opDirHandle model.DataHandle
	}{scope, expression, opDirHandle})
	fake.recordInvocation("EvalToBoolean", []interface{}{scope, expression, opDirHandle})
	fake.evalToBooleanMutex.Unlock()
	if fake.EvalToBooleanStub != nil {
		return fake.EvalToBooleanStub(scope, expression, opDirHandle)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.evalToBooleanReturns.result1, fake.evalToBooleanReturns.result2
}

func (fake *Fake) EvalToBooleanCallCount() int {
	fake.evalToBooleanMutex.RLock()
	defer fake.evalToBooleanMutex.RUnlock()
	return len(fake.evalToBooleanArgsForCall)
}

func (fake *Fake) EvalToBooleanArgsForCall(i int) (map[string]*model.Value, interface{}, model.DataHandle) {
	fake.evalToBooleanMutex.RLock()
	defer fake.evalToBooleanMutex.RUnlock()
	return fake.evalToBooleanArgsForCall[i].scope, fake.evalToBooleanArgsForCall[i].expression, fake.evalToBooleanArgsForCall[i].opDirHandle
}

func (fake *Fake) EvalToBooleanReturns(result1 *model.Value, result2 error) {
	fake.EvalToBooleanStub = nil
	fake.evalToBooleanReturns = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *Fake) EvalToBooleanReturnsOnCall(i int, result1 *model.Value, result2 error) {
	fake.EvalToBooleanStub = nil
	if fake.evalToBooleanReturnsOnCall == nil {
		fake.evalToBooleanReturnsOnCall = make(map[int]struct {
			result1 *model.Value
			result2 error
		})
	}
	fake.evalToBooleanReturnsOnCall[i] = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *Fake) EvalToDir(scope map[string]*model.Value, expression interface{}, opDirHandle model.DataHandle) (*model.Value, error) {
	fake.evalToDirMutex.Lock()
	ret, specificReturn := fake.evalToDirReturnsOnCall[len(fake.evalToDirArgsForCall)]
	fake.evalToDirArgsForCall = append(fake.evalToDirArgsForCall, struct {
		scope       map[string]*model.Value
		expression  interface{}
		opDirHandle model.DataHandle
	}{scope, expression, opDirHandle})
	fake.recordInvocation("EvalToDir", []interface{}{scope, expression, opDirHandle})
	fake.evalToDirMutex.Unlock()
	if fake.EvalToDirStub != nil {
		return fake.EvalToDirStub(scope, expression, opDirHandle)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.evalToDirReturns.result1, fake.evalToDirReturns.result2
}

func (fake *Fake) EvalToDirCallCount() int {
	fake.evalToDirMutex.RLock()
	defer fake.evalToDirMutex.RUnlock()
	return len(fake.evalToDirArgsForCall)
}

func (fake *Fake) EvalToDirArgsForCall(i int) (map[string]*model.Value, interface{}, model.DataHandle) {
	fake.evalToDirMutex.RLock()
	defer fake.evalToDirMutex.RUnlock()
	return fake.evalToDirArgsForCall[i].scope, fake.evalToDirArgsForCall[i].expression, fake.evalToDirArgsForCall[i].opDirHandle
}

func (fake *Fake) EvalToDirReturns(result1 *model.Value, result2 error) {
	fake.EvalToDirStub = nil
	fake.evalToDirReturns = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *Fake) EvalToDirReturnsOnCall(i int, result1 *model.Value, result2 error) {
	fake.EvalToDirStub = nil
	if fake.evalToDirReturnsOnCall == nil {
		fake.evalToDirReturnsOnCall = make(map[int]struct {
			result1 *model.Value
			result2 error
		})
	}
	fake.evalToDirReturnsOnCall[i] = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *Fake) EvalToFile(scope map[string]*model.Value, expression interface{}, opDirHandle model.DataHandle, scratchDir string) (*model.Value, error) {
	fake.evalToFileMutex.Lock()
	ret, specificReturn := fake.evalToFileReturnsOnCall[len(fake.evalToFileArgsForCall)]
	fake.evalToFileArgsForCall = append(fake.evalToFileArgsForCall, struct {
		scope       map[string]*model.Value
		expression  interface{}
		opDirHandle model.DataHandle
		scratchDir  string
	}{scope, expression, opDirHandle, scratchDir})
	fake.recordInvocation("EvalToFile", []interface{}{scope, expression, opDirHandle, scratchDir})
	fake.evalToFileMutex.Unlock()
	if fake.EvalToFileStub != nil {
		return fake.EvalToFileStub(scope, expression, opDirHandle, scratchDir)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.evalToFileReturns.result1, fake.evalToFileReturns.result2
}

func (fake *Fake) EvalToFileCallCount() int {
	fake.evalToFileMutex.RLock()
	defer fake.evalToFileMutex.RUnlock()
	return len(fake.evalToFileArgsForCall)
}

func (fake *Fake) EvalToFileArgsForCall(i int) (map[string]*model.Value, interface{}, model.DataHandle, string) {
	fake.evalToFileMutex.RLock()
	defer fake.evalToFileMutex.RUnlock()
	return fake.evalToFileArgsForCall[i].scope, fake.evalToFileArgsForCall[i].expression, fake.evalToFileArgsForCall[i].opDirHandle, fake.evalToFileArgsForCall[i].scratchDir
}

func (fake *Fake) EvalToFileReturns(result1 *model.Value, result2 error) {
	fake.EvalToFileStub = nil
	fake.evalToFileReturns = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *Fake) EvalToFileReturnsOnCall(i int, result1 *model.Value, result2 error) {
	fake.EvalToFileStub = nil
	if fake.evalToFileReturnsOnCall == nil {
		fake.evalToFileReturnsOnCall = make(map[int]struct {
			result1 *model.Value
			result2 error
		})
	}
	fake.evalToFileReturnsOnCall[i] = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *Fake) EvalToNumber(scope map[string]*model.Value, expression interface{}, opDirHandle model.DataHandle) (*model.Value, error) {
	fake.evalToNumberMutex.Lock()
	ret, specificReturn := fake.evalToNumberReturnsOnCall[len(fake.evalToNumberArgsForCall)]
	fake.evalToNumberArgsForCall = append(fake.evalToNumberArgsForCall, struct {
		scope       map[string]*model.Value
		expression  interface{}
		opDirHandle model.DataHandle
	}{scope, expression, opDirHandle})
	fake.recordInvocation("EvalToNumber", []interface{}{scope, expression, opDirHandle})
	fake.evalToNumberMutex.Unlock()
	if fake.EvalToNumberStub != nil {
		return fake.EvalToNumberStub(scope, expression, opDirHandle)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.evalToNumberReturns.result1, fake.evalToNumberReturns.result2
}

func (fake *Fake) EvalToNumberCallCount() int {
	fake.evalToNumberMutex.RLock()
	defer fake.evalToNumberMutex.RUnlock()
	return len(fake.evalToNumberArgsForCall)
}

func (fake *Fake) EvalToNumberArgsForCall(i int) (map[string]*model.Value, interface{}, model.DataHandle) {
	fake.evalToNumberMutex.RLock()
	defer fake.evalToNumberMutex.RUnlock()
	return fake.evalToNumberArgsForCall[i].scope, fake.evalToNumberArgsForCall[i].expression, fake.evalToNumberArgsForCall[i].opDirHandle
}

func (fake *Fake) EvalToNumberReturns(result1 *model.Value, result2 error) {
	fake.EvalToNumberStub = nil
	fake.evalToNumberReturns = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *Fake) EvalToNumberReturnsOnCall(i int, result1 *model.Value, result2 error) {
	fake.EvalToNumberStub = nil
	if fake.evalToNumberReturnsOnCall == nil {
		fake.evalToNumberReturnsOnCall = make(map[int]struct {
			result1 *model.Value
			result2 error
		})
	}
	fake.evalToNumberReturnsOnCall[i] = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *Fake) EvalToObject(scope map[string]*model.Value, expression interface{}, opDirHandle model.DataHandle) (*model.Value, error) {
	fake.evalToObjectMutex.Lock()
	ret, specificReturn := fake.evalToObjectReturnsOnCall[len(fake.evalToObjectArgsForCall)]
	fake.evalToObjectArgsForCall = append(fake.evalToObjectArgsForCall, struct {
		scope       map[string]*model.Value
		expression  interface{}
		opDirHandle model.DataHandle
	}{scope, expression, opDirHandle})
	fake.recordInvocation("EvalToObject", []interface{}{scope, expression, opDirHandle})
	fake.evalToObjectMutex.Unlock()
	if fake.EvalToObjectStub != nil {
		return fake.EvalToObjectStub(scope, expression, opDirHandle)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.evalToObjectReturns.result1, fake.evalToObjectReturns.result2
}

func (fake *Fake) EvalToObjectCallCount() int {
	fake.evalToObjectMutex.RLock()
	defer fake.evalToObjectMutex.RUnlock()
	return len(fake.evalToObjectArgsForCall)
}

func (fake *Fake) EvalToObjectArgsForCall(i int) (map[string]*model.Value, interface{}, model.DataHandle) {
	fake.evalToObjectMutex.RLock()
	defer fake.evalToObjectMutex.RUnlock()
	return fake.evalToObjectArgsForCall[i].scope, fake.evalToObjectArgsForCall[i].expression, fake.evalToObjectArgsForCall[i].opDirHandle
}

func (fake *Fake) EvalToObjectReturns(result1 *model.Value, result2 error) {
	fake.EvalToObjectStub = nil
	fake.evalToObjectReturns = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *Fake) EvalToObjectReturnsOnCall(i int, result1 *model.Value, result2 error) {
	fake.EvalToObjectStub = nil
	if fake.evalToObjectReturnsOnCall == nil {
		fake.evalToObjectReturnsOnCall = make(map[int]struct {
			result1 *model.Value
			result2 error
		})
	}
	fake.evalToObjectReturnsOnCall[i] = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *Fake) EvalToString(scope map[string]*model.Value, expression interface{}, opDirHandle model.DataHandle) (*model.Value, error) {
	fake.evalToStringMutex.Lock()
	ret, specificReturn := fake.evalToStringReturnsOnCall[len(fake.evalToStringArgsForCall)]
	fake.evalToStringArgsForCall = append(fake.evalToStringArgsForCall, struct {
		scope       map[string]*model.Value
		expression  interface{}
		opDirHandle model.DataHandle
	}{scope, expression, opDirHandle})
	fake.recordInvocation("EvalToString", []interface{}{scope, expression, opDirHandle})
	fake.evalToStringMutex.Unlock()
	if fake.EvalToStringStub != nil {
		return fake.EvalToStringStub(scope, expression, opDirHandle)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.evalToStringReturns.result1, fake.evalToStringReturns.result2
}

func (fake *Fake) EvalToStringCallCount() int {
	fake.evalToStringMutex.RLock()
	defer fake.evalToStringMutex.RUnlock()
	return len(fake.evalToStringArgsForCall)
}

func (fake *Fake) EvalToStringArgsForCall(i int) (map[string]*model.Value, interface{}, model.DataHandle) {
	fake.evalToStringMutex.RLock()
	defer fake.evalToStringMutex.RUnlock()
	return fake.evalToStringArgsForCall[i].scope, fake.evalToStringArgsForCall[i].expression, fake.evalToStringArgsForCall[i].opDirHandle
}

func (fake *Fake) EvalToStringReturns(result1 *model.Value, result2 error) {
	fake.EvalToStringStub = nil
	fake.evalToStringReturns = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *Fake) EvalToStringReturnsOnCall(i int, result1 *model.Value, result2 error) {
	fake.EvalToStringStub = nil
	if fake.evalToStringReturnsOnCall == nil {
		fake.evalToStringReturnsOnCall = make(map[int]struct {
			result1 *model.Value
			result2 error
		})
	}
	fake.evalToStringReturnsOnCall[i] = struct {
		result1 *model.Value
		result2 error
	}{result1, result2}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.evalToArrayMutex.RLock()
	defer fake.evalToArrayMutex.RUnlock()
	fake.evalToBooleanMutex.RLock()
	defer fake.evalToBooleanMutex.RUnlock()
	fake.evalToDirMutex.RLock()
	defer fake.evalToDirMutex.RUnlock()
	fake.evalToFileMutex.RLock()
	defer fake.evalToFileMutex.RUnlock()
	fake.evalToNumberMutex.RLock()
	defer fake.evalToNumberMutex.RUnlock()
	fake.evalToObjectMutex.RLock()
	defer fake.evalToObjectMutex.RUnlock()
	fake.evalToStringMutex.RLock()
	defer fake.evalToStringMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Expression = new(Fake)
