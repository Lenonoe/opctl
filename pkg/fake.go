// This file was generated by counterfeiter
package pkg

import (
	"sync"

	"github.com/opspec-io/sdk-golang/model"
)

type Fake struct {
	CreateStub        func(req CreateReq) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		req CreateReq
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(req *GetReq) (*model.PkgManifest, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		req *GetReq
	}
	getReturns struct {
		result1 *model.PkgManifest
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *model.PkgManifest
		result2 error
	}
	ListStub        func(dirPath string) ([]*model.PkgManifest, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		dirPath string
	}
	listReturns struct {
		result1 []*model.PkgManifest
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 []*model.PkgManifest
		result2 error
	}
	SetDescriptionStub        func(req SetDescriptionReq) error
	setDescriptionMutex       sync.RWMutex
	setDescriptionArgsForCall []struct {
		req SetDescriptionReq
	}
	setDescriptionReturns struct {
		result1 error
	}
	setDescriptionReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateStub        func(pkgRef string) []error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		pkgRef string
	}
	validateReturns struct {
		result1 []error
	}
	validateReturnsOnCall map[int]struct {
		result1 []error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Create(req CreateReq) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		req CreateReq
	}{req})
	fake.recordInvocation("Create", []interface{}{req})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(req)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReturns.result1
}

func (fake *Fake) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *Fake) CreateArgsForCall(i int) CreateReq {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].req
}

func (fake *Fake) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) CreateReturnsOnCall(i int, result1 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Fake) Get(req *GetReq) (*model.PkgManifest, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		req *GetReq
	}{req})
	fake.recordInvocation("Get", []interface{}{req})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(req)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReturns.result1, fake.getReturns.result2
}

func (fake *Fake) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *Fake) GetArgsForCall(i int) *GetReq {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].req
}

func (fake *Fake) GetReturns(result1 *model.PkgManifest, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *model.PkgManifest
		result2 error
	}{result1, result2}
}

func (fake *Fake) GetReturnsOnCall(i int, result1 *model.PkgManifest, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *model.PkgManifest
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *model.PkgManifest
		result2 error
	}{result1, result2}
}

func (fake *Fake) List(dirPath string) ([]*model.PkgManifest, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		dirPath string
	}{dirPath})
	fake.recordInvocation("List", []interface{}{dirPath})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(dirPath)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listReturns.result1, fake.listReturns.result2
}

func (fake *Fake) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *Fake) ListArgsForCall(i int) string {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.listArgsForCall[i].dirPath
}

func (fake *Fake) ListReturns(result1 []*model.PkgManifest, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []*model.PkgManifest
		result2 error
	}{result1, result2}
}

func (fake *Fake) ListReturnsOnCall(i int, result1 []*model.PkgManifest, result2 error) {
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 []*model.PkgManifest
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 []*model.PkgManifest
		result2 error
	}{result1, result2}
}

func (fake *Fake) SetDescription(req SetDescriptionReq) error {
	fake.setDescriptionMutex.Lock()
	ret, specificReturn := fake.setDescriptionReturnsOnCall[len(fake.setDescriptionArgsForCall)]
	fake.setDescriptionArgsForCall = append(fake.setDescriptionArgsForCall, struct {
		req SetDescriptionReq
	}{req})
	fake.recordInvocation("SetDescription", []interface{}{req})
	fake.setDescriptionMutex.Unlock()
	if fake.SetDescriptionStub != nil {
		return fake.SetDescriptionStub(req)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setDescriptionReturns.result1
}

func (fake *Fake) SetDescriptionCallCount() int {
	fake.setDescriptionMutex.RLock()
	defer fake.setDescriptionMutex.RUnlock()
	return len(fake.setDescriptionArgsForCall)
}

func (fake *Fake) SetDescriptionArgsForCall(i int) SetDescriptionReq {
	fake.setDescriptionMutex.RLock()
	defer fake.setDescriptionMutex.RUnlock()
	return fake.setDescriptionArgsForCall[i].req
}

func (fake *Fake) SetDescriptionReturns(result1 error) {
	fake.SetDescriptionStub = nil
	fake.setDescriptionReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) SetDescriptionReturnsOnCall(i int, result1 error) {
	fake.SetDescriptionStub = nil
	if fake.setDescriptionReturnsOnCall == nil {
		fake.setDescriptionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setDescriptionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Fake) Validate(pkgRef string) []error {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		pkgRef string
	}{pkgRef})
	fake.recordInvocation("Validate", []interface{}{pkgRef})
	fake.validateMutex.Unlock()
	if fake.ValidateStub != nil {
		return fake.ValidateStub(pkgRef)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.validateReturns.result1
}

func (fake *Fake) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *Fake) ValidateArgsForCall(i int) string {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return fake.validateArgsForCall[i].pkgRef
}

func (fake *Fake) ValidateReturns(result1 []error) {
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 []error
	}{result1}
}

func (fake *Fake) ValidateReturnsOnCall(i int, result1 []error) {
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 []error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 []error
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.setDescriptionMutex.RLock()
	defer fake.setDescriptionMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Pkg = new(Fake)
