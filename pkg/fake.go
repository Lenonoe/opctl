// Code generated by counterfeiter. DO NOT EDIT.
package pkg

import (
	"context"
	"sync"

	"github.com/opspec-io/sdk-golang/model"
)

type Fake struct {
	CreateStub        func(path, pkgName, pkgDescription string) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		path           string
		pkgName        string
		pkgDescription string
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	GetManifestStub        func(opDirHandle model.DataHandle) (*model.PkgManifest, error)
	getManifestMutex       sync.RWMutex
	getManifestArgsForCall []struct {
		opDirHandle model.DataHandle
	}
	getManifestReturns struct {
		result1 *model.PkgManifest
		result2 error
	}
	getManifestReturnsOnCall map[int]struct {
		result1 *model.PkgManifest
		result2 error
	}
	InstallStub        func(ctx context.Context, path string, opDirHandle model.DataHandle) error
	installMutex       sync.RWMutex
	installArgsForCall []struct {
		ctx         context.Context
		path        string
		opDirHandle model.DataHandle
	}
	installReturns struct {
		result1 error
	}
	installReturnsOnCall map[int]struct {
		result1 error
	}
	ListOpsStub        func(dirPath string) ([]*model.PkgManifest, error)
	listOpsMutex       sync.RWMutex
	listOpsArgsForCall []struct {
		dirPath string
	}
	listOpsReturns struct {
		result1 []*model.PkgManifest
		result2 error
	}
	listOpsReturnsOnCall map[int]struct {
		result1 []*model.PkgManifest
		result2 error
	}
	ValidateStub        func(opDirHandle model.DataHandle) []error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		opDirHandle model.DataHandle
	}
	validateReturns struct {
		result1 []error
	}
	validateReturnsOnCall map[int]struct {
		result1 []error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Create(path string, pkgName string, pkgDescription string) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		path           string
		pkgName        string
		pkgDescription string
	}{path, pkgName, pkgDescription})
	fake.recordInvocation("Create", []interface{}{path, pkgName, pkgDescription})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(path, pkgName, pkgDescription)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReturns.result1
}

func (fake *Fake) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *Fake) CreateArgsForCall(i int) (string, string, string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].path, fake.createArgsForCall[i].pkgName, fake.createArgsForCall[i].pkgDescription
}

func (fake *Fake) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) CreateReturnsOnCall(i int, result1 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Fake) GetManifest(opDirHandle model.DataHandle) (*model.PkgManifest, error) {
	fake.getManifestMutex.Lock()
	ret, specificReturn := fake.getManifestReturnsOnCall[len(fake.getManifestArgsForCall)]
	fake.getManifestArgsForCall = append(fake.getManifestArgsForCall, struct {
		opDirHandle model.DataHandle
	}{opDirHandle})
	fake.recordInvocation("GetManifest", []interface{}{opDirHandle})
	fake.getManifestMutex.Unlock()
	if fake.GetManifestStub != nil {
		return fake.GetManifestStub(opDirHandle)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getManifestReturns.result1, fake.getManifestReturns.result2
}

func (fake *Fake) GetManifestCallCount() int {
	fake.getManifestMutex.RLock()
	defer fake.getManifestMutex.RUnlock()
	return len(fake.getManifestArgsForCall)
}

func (fake *Fake) GetManifestArgsForCall(i int) model.DataHandle {
	fake.getManifestMutex.RLock()
	defer fake.getManifestMutex.RUnlock()
	return fake.getManifestArgsForCall[i].opDirHandle
}

func (fake *Fake) GetManifestReturns(result1 *model.PkgManifest, result2 error) {
	fake.GetManifestStub = nil
	fake.getManifestReturns = struct {
		result1 *model.PkgManifest
		result2 error
	}{result1, result2}
}

func (fake *Fake) GetManifestReturnsOnCall(i int, result1 *model.PkgManifest, result2 error) {
	fake.GetManifestStub = nil
	if fake.getManifestReturnsOnCall == nil {
		fake.getManifestReturnsOnCall = make(map[int]struct {
			result1 *model.PkgManifest
			result2 error
		})
	}
	fake.getManifestReturnsOnCall[i] = struct {
		result1 *model.PkgManifest
		result2 error
	}{result1, result2}
}

func (fake *Fake) Install(ctx context.Context, path string, opDirHandle model.DataHandle) error {
	fake.installMutex.Lock()
	ret, specificReturn := fake.installReturnsOnCall[len(fake.installArgsForCall)]
	fake.installArgsForCall = append(fake.installArgsForCall, struct {
		ctx         context.Context
		path        string
		opDirHandle model.DataHandle
	}{ctx, path, opDirHandle})
	fake.recordInvocation("Install", []interface{}{ctx, path, opDirHandle})
	fake.installMutex.Unlock()
	if fake.InstallStub != nil {
		return fake.InstallStub(ctx, path, opDirHandle)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.installReturns.result1
}

func (fake *Fake) InstallCallCount() int {
	fake.installMutex.RLock()
	defer fake.installMutex.RUnlock()
	return len(fake.installArgsForCall)
}

func (fake *Fake) InstallArgsForCall(i int) (context.Context, string, model.DataHandle) {
	fake.installMutex.RLock()
	defer fake.installMutex.RUnlock()
	return fake.installArgsForCall[i].ctx, fake.installArgsForCall[i].path, fake.installArgsForCall[i].opDirHandle
}

func (fake *Fake) InstallReturns(result1 error) {
	fake.InstallStub = nil
	fake.installReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) InstallReturnsOnCall(i int, result1 error) {
	fake.InstallStub = nil
	if fake.installReturnsOnCall == nil {
		fake.installReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.installReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Fake) ListOps(dirPath string) ([]*model.PkgManifest, error) {
	fake.listOpsMutex.Lock()
	ret, specificReturn := fake.listOpsReturnsOnCall[len(fake.listOpsArgsForCall)]
	fake.listOpsArgsForCall = append(fake.listOpsArgsForCall, struct {
		dirPath string
	}{dirPath})
	fake.recordInvocation("ListOps", []interface{}{dirPath})
	fake.listOpsMutex.Unlock()
	if fake.ListOpsStub != nil {
		return fake.ListOpsStub(dirPath)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listOpsReturns.result1, fake.listOpsReturns.result2
}

func (fake *Fake) ListOpsCallCount() int {
	fake.listOpsMutex.RLock()
	defer fake.listOpsMutex.RUnlock()
	return len(fake.listOpsArgsForCall)
}

func (fake *Fake) ListOpsArgsForCall(i int) string {
	fake.listOpsMutex.RLock()
	defer fake.listOpsMutex.RUnlock()
	return fake.listOpsArgsForCall[i].dirPath
}

func (fake *Fake) ListOpsReturns(result1 []*model.PkgManifest, result2 error) {
	fake.ListOpsStub = nil
	fake.listOpsReturns = struct {
		result1 []*model.PkgManifest
		result2 error
	}{result1, result2}
}

func (fake *Fake) ListOpsReturnsOnCall(i int, result1 []*model.PkgManifest, result2 error) {
	fake.ListOpsStub = nil
	if fake.listOpsReturnsOnCall == nil {
		fake.listOpsReturnsOnCall = make(map[int]struct {
			result1 []*model.PkgManifest
			result2 error
		})
	}
	fake.listOpsReturnsOnCall[i] = struct {
		result1 []*model.PkgManifest
		result2 error
	}{result1, result2}
}

func (fake *Fake) Validate(opDirHandle model.DataHandle) []error {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		opDirHandle model.DataHandle
	}{opDirHandle})
	fake.recordInvocation("Validate", []interface{}{opDirHandle})
	fake.validateMutex.Unlock()
	if fake.ValidateStub != nil {
		return fake.ValidateStub(opDirHandle)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.validateReturns.result1
}

func (fake *Fake) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *Fake) ValidateArgsForCall(i int) model.DataHandle {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return fake.validateArgsForCall[i].opDirHandle
}

func (fake *Fake) ValidateReturns(result1 []error) {
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 []error
	}{result1}
}

func (fake *Fake) ValidateReturnsOnCall(i int, result1 []error) {
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 []error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 []error
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getManifestMutex.RLock()
	defer fake.getManifestMutex.RUnlock()
	fake.installMutex.RLock()
	defer fake.installMutex.RUnlock()
	fake.listOpsMutex.RLock()
	defer fake.listOpsMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Pkg = new(Fake)
