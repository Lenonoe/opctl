// This file was generated by counterfeiter
package core

import (
	"sync"

	"github.com/opspec-io/sdk-golang/pkg/model"
)

type fakeParallelCaller struct {
	CallStub        func(args map[string]*model.Data, rootOpId string, opPkgRef string, parallelCall []*model.Scg) (err error)
	callMutex       sync.RWMutex
	callArgsForCall []struct {
		args         map[string]*model.Data
		rootOpId     string
		opPkgRef     string
		parallelCall []*model.Scg
	}
	callReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeParallelCaller) Call(args map[string]*model.Data, rootOpId string, opPkgRef string, parallelCall []*model.Scg) (err error) {
	var parallelCallCopy []*model.Scg
	if parallelCall != nil {
		parallelCallCopy = make([]*model.Scg, len(parallelCall))
		copy(parallelCallCopy, parallelCall)
	}
	fake.callMutex.Lock()
	fake.callArgsForCall = append(fake.callArgsForCall, struct {
		args         map[string]*model.Data
		rootOpId     string
		opPkgRef     string
		parallelCall []*model.Scg
	}{args, rootOpId, opPkgRef, parallelCallCopy})
	fake.recordInvocation("Call", []interface{}{args, rootOpId, opPkgRef, parallelCallCopy})
	fake.callMutex.Unlock()
	if fake.CallStub != nil {
		return fake.CallStub(args, rootOpId, opPkgRef, parallelCall)
	} else {
		return fake.callReturns.result1
	}
}

func (fake *fakeParallelCaller) CallCallCount() int {
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	return len(fake.callArgsForCall)
}

func (fake *fakeParallelCaller) CallArgsForCall(i int) (map[string]*model.Data, string, string, []*model.Scg) {
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	return fake.callArgsForCall[i].args, fake.callArgsForCall[i].rootOpId, fake.callArgsForCall[i].opPkgRef, fake.callArgsForCall[i].parallelCall
}

func (fake *fakeParallelCaller) CallReturns(result1 error) {
	fake.CallStub = nil
	fake.callReturns = struct {
		result1 error
	}{result1}
}

func (fake *fakeParallelCaller) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	return fake.invocations
}

func (fake *fakeParallelCaller) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
