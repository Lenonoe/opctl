// This file was generated by counterfeiter
package core

import (
	"sync"

	"github.com/opspec-io/sdk-golang/pkg/model"
)

type fakeContainerCaller struct {
	CallStub        func(args map[string]*model.Data, containerId string, containerCall *model.ScgContainerCall, opRef string, opGraphId string) (outputs map[string]*model.Data, err error)
	callMutex       sync.RWMutex
	callArgsForCall []struct {
		args          map[string]*model.Data
		containerId   string
		containerCall *model.ScgContainerCall
		opRef         string
		opGraphId     string
	}
	callReturns struct {
		result1 map[string]*model.Data
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeContainerCaller) Call(args map[string]*model.Data, containerId string, containerCall *model.ScgContainerCall, opRef string, opGraphId string) (outputs map[string]*model.Data, err error) {
	fake.callMutex.Lock()
	fake.callArgsForCall = append(fake.callArgsForCall, struct {
		args          map[string]*model.Data
		containerId   string
		containerCall *model.ScgContainerCall
		opRef         string
		opGraphId     string
	}{args, containerId, containerCall, opRef, opGraphId})
	fake.recordInvocation("Call", []interface{}{args, containerId, containerCall, opRef, opGraphId})
	fake.callMutex.Unlock()
	if fake.CallStub != nil {
		return fake.CallStub(args, containerId, containerCall, opRef, opGraphId)
	} else {
		return fake.callReturns.result1, fake.callReturns.result2
	}
}

func (fake *fakeContainerCaller) CallCallCount() int {
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	return len(fake.callArgsForCall)
}

func (fake *fakeContainerCaller) CallArgsForCall(i int) (map[string]*model.Data, string, *model.ScgContainerCall, string, string) {
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	return fake.callArgsForCall[i].args, fake.callArgsForCall[i].containerId, fake.callArgsForCall[i].containerCall, fake.callArgsForCall[i].opRef, fake.callArgsForCall[i].opGraphId
}

func (fake *fakeContainerCaller) CallReturns(result1 map[string]*model.Data, result2 error) {
	fake.CallStub = nil
	fake.callReturns = struct {
		result1 map[string]*model.Data
		result2 error
	}{result1, result2}
}

func (fake *fakeContainerCaller) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	return fake.invocations
}

func (fake *fakeContainerCaller) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
