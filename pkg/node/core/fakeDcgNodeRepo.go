// This file was generated by counterfeiter
package core

import (
	"sync"
)

type fakeDCGNodeRepo struct {
	AddStub        func(node *dcgNodeDescriptor)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		node *dcgNodeDescriptor
	}
	DeleteIfExistsStub        func(nodeId string)
	deleteIfExistsMutex       sync.RWMutex
	deleteIfExistsArgsForCall []struct {
		nodeId string
	}
	ListWithRootOpIdStub        func(rootOpId string) []*dcgNodeDescriptor
	listWithRootOpIdMutex       sync.RWMutex
	listWithRootOpIdArgsForCall []struct {
		rootOpId string
	}
	listWithRootOpIdReturns struct {
		result1 []*dcgNodeDescriptor
	}
	GetIfExistsStub        func(nodeId string) *dcgNodeDescriptor
	getIfExistsMutex       sync.RWMutex
	getIfExistsArgsForCall []struct {
		nodeId string
	}
	getIfExistsReturns struct {
		result1 *dcgNodeDescriptor
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeDCGNodeRepo) Add(node *dcgNodeDescriptor) {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		node *dcgNodeDescriptor
	}{node})
	fake.recordInvocation("Add", []interface{}{node})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		fake.AddStub(node)
	}
}

func (fake *fakeDCGNodeRepo) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *fakeDCGNodeRepo) AddArgsForCall(i int) *dcgNodeDescriptor {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.addArgsForCall[i].node
}

func (fake *fakeDCGNodeRepo) DeleteIfExists(nodeId string) {
	fake.deleteIfExistsMutex.Lock()
	fake.deleteIfExistsArgsForCall = append(fake.deleteIfExistsArgsForCall, struct {
		nodeId string
	}{nodeId})
	fake.recordInvocation("DeleteIfExists", []interface{}{nodeId})
	fake.deleteIfExistsMutex.Unlock()
	if fake.DeleteIfExistsStub != nil {
		fake.DeleteIfExistsStub(nodeId)
	}
}

func (fake *fakeDCGNodeRepo) DeleteIfExistsCallCount() int {
	fake.deleteIfExistsMutex.RLock()
	defer fake.deleteIfExistsMutex.RUnlock()
	return len(fake.deleteIfExistsArgsForCall)
}

func (fake *fakeDCGNodeRepo) DeleteIfExistsArgsForCall(i int) string {
	fake.deleteIfExistsMutex.RLock()
	defer fake.deleteIfExistsMutex.RUnlock()
	return fake.deleteIfExistsArgsForCall[i].nodeId
}

func (fake *fakeDCGNodeRepo) ListWithRootOpId(rootOpId string) []*dcgNodeDescriptor {
	fake.listWithRootOpIdMutex.Lock()
	fake.listWithRootOpIdArgsForCall = append(fake.listWithRootOpIdArgsForCall, struct {
		rootOpId string
	}{rootOpId})
	fake.recordInvocation("ListWithRootOpId", []interface{}{rootOpId})
	fake.listWithRootOpIdMutex.Unlock()
	if fake.ListWithRootOpIdStub != nil {
		return fake.ListWithRootOpIdStub(rootOpId)
	} else {
		return fake.listWithRootOpIdReturns.result1
	}
}

func (fake *fakeDCGNodeRepo) ListWithRootOpIdCallCount() int {
	fake.listWithRootOpIdMutex.RLock()
	defer fake.listWithRootOpIdMutex.RUnlock()
	return len(fake.listWithRootOpIdArgsForCall)
}

func (fake *fakeDCGNodeRepo) ListWithRootOpIdArgsForCall(i int) string {
	fake.listWithRootOpIdMutex.RLock()
	defer fake.listWithRootOpIdMutex.RUnlock()
	return fake.listWithRootOpIdArgsForCall[i].rootOpId
}

func (fake *fakeDCGNodeRepo) ListWithRootOpIdReturns(result1 []*dcgNodeDescriptor) {
	fake.ListWithRootOpIdStub = nil
	fake.listWithRootOpIdReturns = struct {
		result1 []*dcgNodeDescriptor
	}{result1}
}

func (fake *fakeDCGNodeRepo) GetIfExists(nodeId string) *dcgNodeDescriptor {
	fake.getIfExistsMutex.Lock()
	fake.getIfExistsArgsForCall = append(fake.getIfExistsArgsForCall, struct {
		nodeId string
	}{nodeId})
	fake.recordInvocation("GetIfExists", []interface{}{nodeId})
	fake.getIfExistsMutex.Unlock()
	if fake.GetIfExistsStub != nil {
		return fake.GetIfExistsStub(nodeId)
	} else {
		return fake.getIfExistsReturns.result1
	}
}

func (fake *fakeDCGNodeRepo) GetIfExistsCallCount() int {
	fake.getIfExistsMutex.RLock()
	defer fake.getIfExistsMutex.RUnlock()
	return len(fake.getIfExistsArgsForCall)
}

func (fake *fakeDCGNodeRepo) GetIfExistsArgsForCall(i int) string {
	fake.getIfExistsMutex.RLock()
	defer fake.getIfExistsMutex.RUnlock()
	return fake.getIfExistsArgsForCall[i].nodeId
}

func (fake *fakeDCGNodeRepo) GetIfExistsReturns(result1 *dcgNodeDescriptor) {
	fake.GetIfExistsStub = nil
	fake.getIfExistsReturns = struct {
		result1 *dcgNodeDescriptor
	}{result1}
}

func (fake *fakeDCGNodeRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.deleteIfExistsMutex.RLock()
	defer fake.deleteIfExistsMutex.RUnlock()
	fake.listWithRootOpIdMutex.RLock()
	defer fake.listWithRootOpIdMutex.RUnlock()
	fake.getIfExistsMutex.RLock()
	defer fake.getIfExistsMutex.RUnlock()
	return fake.invocations
}

func (fake *fakeDCGNodeRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
