// This file was generated by counterfeiter
package pkg

import (
	"sync"
)

type fakePuller struct {
	PullStub        func(pkgRef string, req *PullOpts) error
	pullMutex       sync.RWMutex
	pullArgsForCall []struct {
		pkgRef string
		req    *PullOpts
	}
	pullReturns struct {
		result1 error
	}
	pullReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakePuller) Pull(pkgRef string, req *PullOpts) error {
	fake.pullMutex.Lock()
	ret, specificReturn := fake.pullReturnsOnCall[len(fake.pullArgsForCall)]
	fake.pullArgsForCall = append(fake.pullArgsForCall, struct {
		pkgRef string
		req    *PullOpts
	}{pkgRef, req})
	fake.recordInvocation("Pull", []interface{}{pkgRef, req})
	fake.pullMutex.Unlock()
	if fake.PullStub != nil {
		return fake.PullStub(pkgRef, req)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.pullReturns.result1
}

func (fake *fakePuller) PullCallCount() int {
	fake.pullMutex.RLock()
	defer fake.pullMutex.RUnlock()
	return len(fake.pullArgsForCall)
}

func (fake *fakePuller) PullArgsForCall(i int) (string, *PullOpts) {
	fake.pullMutex.RLock()
	defer fake.pullMutex.RUnlock()
	return fake.pullArgsForCall[i].pkgRef, fake.pullArgsForCall[i].req
}

func (fake *fakePuller) PullReturns(result1 error) {
	fake.PullStub = nil
	fake.pullReturns = struct {
		result1 error
	}{result1}
}

func (fake *fakePuller) PullReturnsOnCall(i int, result1 error) {
	fake.PullStub = nil
	if fake.pullReturnsOnCall == nil {
		fake.pullReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pullReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *fakePuller) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.pullMutex.RLock()
	defer fake.pullMutex.RUnlock()
	return fake.invocations
}

func (fake *fakePuller) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
