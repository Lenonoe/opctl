// Code generated by go-bindata.
// sources:
// pkg/data/package-manifest.schema.json
// DO NOT EDIT!

package pkg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgDataPackageManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x8f\xdb\xb8\x11\xfe\xee\x5f\x41\xf8\x82\xc2\xdb\xac\xe5\xcd\x6b\x5b\x07\xc5\x22\xc8\xdd\xa1\x5b\xb4\x49\x90\x05\x52\xe0\xd6\x4e\x42\x4b\x63\x9b\xb7\x12\xa9\x92\x94\x37\x9b\x6b\xfe\x7b\x41\x52\x92\x25\x8a\x92\x2d\x59\x9b\xf8\x72\xd9\x2f\x89\x49\xce\x68\xe6\xe1\x43\x72\x38\xa4\xf4\xdb\x00\xa1\xe1\x3d\xe1\xaf\x21\xc2\xc3\x29\x1a\xae\xa5\x8c\xa7\x93\xc9\xaf\x82\xd1\xb1\x29\xf5\x18\x5f\x4d\x02\x8e\x97\x72\x7c\xf6\x78\x62\xca\x7e\x18\x9e\x2a\x39\x12\x64\x22\x62\x3a\x99\x60\xee\xaf\xc9\x06\x3c\x16\x8b\x18\x7c\x8f\xb0\xc9\x99\xf7\xc0\x7b\x34\x51\xbf\x26\x31\xf6\xaf\xf1\x0a\xc6\x11\xa6\x64\x09\x42\x7a\xa9\x72\xf5\x20\xa3\x4c\x12\x19\x82\xd2\x97\x36\xfd\x77\xda\xd2\xd4\x06\x20\x7c\x4e\x62\x49\x18\x55\x6d\xb2\x4a\xb4\x64\x1c\x61\x94\x8a\x98\xa6\x31\x67\x31\x70\x49\x40\x0c\xa7\x48\xf9\x87\xd0\x90\xe2\x08\xf2\x5f\x55\x75\x2f\x71\x04\x88\x2d\x91\x5c\x03\x62\xb1\x56\xa3\x9b\xc9\xdb\x58\x9b\x24\x24\x27\x74\x35\xd4\xc5\x9f\x4d\xad\xa5\xa2\x4e\xf3\x8f\xdb\x9f\x6d\x1f\x40\x68\x9c\x48\x51\xd4\x7d\x8f\xc3\x52\xb5\xfe\x61\x12\xc0\x92\x50\xa2\xb4\x8a\x49\x8c\x39\x8e\xca\xa2\x2c\x91\x9d\x65\x79\x42\x77\xcb\x09\xdf\x32\x76\x03\x5c\x34\x23\xf1\xd6\xb4\x70\xa1\x50\xf3\x0c\x88\xde\x02\x4f\x1f\x33\x48\x1f\x35\xe4\xf0\xdf\x84\x70\x50\xcc\xbb\x2a\xf4\xed\x00\xa1\xb9\xae\xc7\x41\xa0\xe5\x71\xf8\xba\xc8\x83\x25\x0e\x05\xa4\x4c\xca\x1f\xb1\xe5\x47\x40\xf8\x6b\x0d\x45\xc1\xfe\x9c\x90\x79\xe5\x69\x5d\x27\x13\x0e\xbe\x64\xfc\x16\x69\x3c\x41\x02\x57\x6e\x62\xea\xec\x6b\xb6\xf8\x15\x7c\xb9\x2d\x77\xf0\x35\xb3\xa9\x54\x50\xdf\xb4\x81\x8f\x79\xb5\x8b\x69\xd9\xdf\xe7\x53\x5b\xd5\x12\x27\xa1\x74\xa9\xa9\xd0\x5b\xb7\x44\x1b\x1c\x26\xf0\x0c\x61\xc4\x21\xc4\x92\x6c\x00\xc5\x58\xae\x11\xa1\x12\x78\xcc\x41\x42\x80\x96\x9c\x45\xba\xe7\x03\xc2\x11\xa1\xe8\x66\x4d\xfc\x75\x4a\x05\x44\x04\x52\xbc\x3b\x3d\xc4\x6a\x22\x2e\xc1\xe7\xb0\x8f\xd9\x17\xcb\xcc\x92\xb4\xdf\x88\x40\xc2\x08\xd7\x9a\xb0\x60\x2c\x04\x4c\x2d\x1b\x06\x35\xf6\x34\xf2\x70\x60\x8b\xe7\xa2\x3b\xe9\xab\x1b\x55\xc6\x00\xca\xf8\x92\xfe\x9a\x97\xc6\xe6\x92\x84\x50\xcf\xee\x6d\x6d\x1d\xbd\x7f\x26\x21\xf4\xca\x6c\xf5\xc8\xef\xd4\xbe\x53\x6a\x2b\x88\xbf\x09\x56\x6b\xae\x38\x69\x4d\x93\x68\x01\xfc\x05\xa3\x42\x72\x4c\x68\x79\xb9\xcb\xe9\x5d\x6d\xd5\x99\xb6\x38\x0c\x5f\x2d\x6d\xde\x5a\xf0\xff\xf3\xf2\xd5\x4b\x74\xa9\x63\x1b\x74\xa5\x05\xd0\x35\xdc\xde\x30\x1e\xcc\x47\x59\xa0\x24\x19\x0b\x85\x47\x40\x2e\x75\x6c\xb5\x96\x51\x98\x06\x58\x9f\x6e\xe3\x71\x21\xf4\x1a\x9f\x3d\xfe\x41\x80\xaf\x74\x8f\x9f\x78\x0f\x1f\x9e\x94\xfa\x31\xb7\x1f\x73\x8e\x6f\xcb\x55\x44\x42\xe4\x18\x48\xee\x85\xb6\x0a\xd1\xc0\xc5\x85\x02\x13\x86\x98\xde\xb6\x84\x42\x09\xf4\x07\xc5\xa3\xe3\x81\x02\x68\x12\xb5\x41\x42\xb5\xef\x0f\x88\xb3\x83\x81\xc8\x24\x8c\xeb\xbb\xfd\x5d\x32\x1e\x61\x7b\x26\x1a\x32\x0a\x9a\x10\x57\x25\xe5\xd5\xa9\x3a\x1b\x96\x6a\xfa\x5c\x01\xaf\x4e\x4c\x16\x74\x6f\xcc\xa4\x20\xf4\xa4\x66\x4c\x44\x0b\x50\x0b\x50\xad\x06\x6b\x62\xad\xd4\xa7\x1d\x76\x65\x95\xa3\xad\x51\x56\xcd\xbc\x76\x72\x9c\x3b\x11\x8a\xf0\x47\x12\xb5\x23\x45\x2a\xd2\x1f\x2f\x6a\x68\x61\x77\x72\xc9\x6c\x42\x5b\x9b\x6d\x44\x7a\x33\xfb\x71\x17\xb3\x93\x50\x92\x38\x84\x76\xf3\xd1\x56\xaa\x37\xe3\x1f\x74\x30\x9e\xb2\xca\x48\x6a\xb2\x9a\x32\xd9\x1f\x45\x9e\x58\xf6\xb6\x9e\x11\x8b\x8e\x64\xe3\x7f\x6f\x57\xb4\x40\x7f\xce\xd4\x31\xe7\x4b\x2d\x08\xad\x42\x1e\x47\x18\x53\x1f\x9f\x17\xeb\xeb\x22\xf4\x97\x66\x62\xec\x33\x46\x4f\x59\x7b\x74\x51\x7a\xfd\x72\xd5\x47\xd8\x9c\xae\x30\x9d\x03\x67\xcb\x00\xdf\x19\x9c\xe6\xd5\x1d\x28\x77\x5c\xc1\x79\xb9\x13\xca\xe1\xb9\x60\xfe\x35\xc8\x7a\x5e\x17\xeb\x77\xb2\xd4\xea\xad\x4b\x2d\xdb\xc8\xf7\x3a\x5e\x9b\xc7\x7e\x25\x5e\xb7\x27\xa4\x31\xf7\x9b\xd8\xc9\xa5\xc8\xbb\xc9\xa2\xc1\xdb\xb5\x97\xab\xb6\xfa\xbe\x97\xb3\x93\xa6\x15\x88\xfe\xb0\x7b\xb9\x0e\x50\x7c\x2b\x7b\xb9\xea\x5c\xd4\x66\x2f\x67\x4f\xb6\x49\x0c\x5c\x80\x54\x93\x6c\xc9\x7b\x23\xdd\x93\xff\x7f\xb1\x9c\x6f\xbb\xa1\x0c\xb0\x84\xb1\x24\x11\xec\xdc\x52\x96\x7c\xc8\xc5\x90\xf1\xe6\x50\x2f\xbc\x47\xf6\x3e\xc0\xd5\x31\x2d\xf6\xa4\x5b\xbf\x9a\x77\xa5\xa7\xfb\xe2\xa4\x66\x61\x3e\x26\x11\x5e\xc1\x58\x8d\x9b\x5d\x70\x3d\x47\x46\x04\x69\x11\xc4\x61\x09\x1c\xa8\x0f\x08\x0b\xa4\x87\x1b\x04\x68\x71\x8b\xae\x56\x44\xae\x93\x85\xe7\xb3\x68\x62\x04\x26\x01\x51\xee\x2e\x12\xa5\x69\x92\xcb\x6d\x11\xde\x21\x21\x39\x40\x56\xf1\xc0\x7b\xf0\x68\xab\xa2\x5f\x80\x6d\x40\xfa\xc1\x19\x22\x4c\xc2\x76\x5c\xd4\x22\xfd\xf1\xf0\x61\xaf\x30\x19\x7f\xfa\xc1\x66\xcd\x84\xd4\xa7\x76\xad\xe0\xc9\xa4\xfa\x43\xe8\x51\xaf\x08\xe5\x5e\xf5\x03\x12\x89\x37\x8f\xdb\x01\xa4\x24\xfa\x03\xe7\x71\xaf\xe0\x68\x6f\x7a\x03\xe6\x69\x6b\x60\x9e\xf6\x07\xcc\x93\xbe\x81\x79\xda\x13\x30\x09\x27\xed\x70\x49\x38\xe9\x0f\x96\xa7\xbd\xc2\xa2\x7c\xe9\x07\x15\x01\xd1\x66\x8f\x44\xf3\x73\x24\x20\xc2\x54\x12\x1f\xa5\x77\x19\xec\x05\xce\x28\x52\xa8\x18\xb4\xa6\x93\xc9\xb6\x68\xd2\xab\xf7\xa9\xcd\xcd\x00\x0c\x5c\x35\x56\x1e\xfa\x5f\x40\x57\x72\xdd\x32\xa5\x6b\x84\x7a\x8b\x6b\x9f\xd6\x84\xb5\xae\x04\x7e\x21\x09\xfd\xc0\xed\x53\x66\xde\xd7\xf5\xc9\x8e\x56\xf7\xf4\xe9\xec\xb4\x6c\x72\x96\xe5\x3a\x73\xfa\x7a\xfc\xc9\xe1\x86\x2d\xd6\x1f\x21\x39\xdc\x61\x87\x19\x63\x29\x81\xdb\x89\xa4\x46\x30\x52\x91\xde\xe0\xf8\x6b\x0d\x1a\x8e\x69\x6a\xbb\x41\x1c\x72\x58\xc1\xc7\x61\xc7\xcc\x90\x23\xd7\xd3\x90\x18\x2c\xd4\xb7\x4e\x0c\x6a\xd9\x6e\x89\x41\xe3\xfe\xd1\x26\xbc\xef\x28\xbf\x68\x00\xfb\xaa\x09\xef\xc6\x61\x74\x64\x39\xcc\x52\x27\x94\x73\x98\xb1\xcd\x68\x0b\xf1\xd7\x5d\x4e\x67\xcc\xd8\x7f\x5d\xc3\xd9\xab\xf1\x7b\x0f\x8f\x3f\x3d\x1f\xff\x72\x36\xfe\xdb\xfc\x7e\xc7\x43\x79\x77\xaf\xe4\xb7\x1e\x5b\x85\x5d\x6e\x5d\xdb\x3b\x66\x3d\x28\x2b\x1e\x88\xf5\xa0\xae\x78\x0e\xd1\x87\xba\xc2\xec\xb5\x4f\xbc\x76\xc0\x3c\xea\xaf\xdc\xf3\xa7\xbf\x6a\x98\x1f\xb1\x8a\x70\x7d\x1c\x86\x68\xc5\x71\xbc\xce\xb9\xf8\x0c\x09\x00\x94\x2d\x2d\x40\xbd\x1b\x72\x4d\x62\x08\x88\xb9\x00\xae\x7e\x4d\x5e\xe0\x30\x7c\xaf\xc5\xb6\x0f\xa8\x72\xec\xb7\xdd\x71\x83\xcf\xa8\xc4\x84\x02\x57\x1a\x9d\x31\xc3\x1e\x4a\x58\x7c\x88\xb4\x1a\xad\x61\x08\xe1\x21\x3a\x04\x70\x82\x6d\x0d\xce\xb9\xa1\xec\xb0\xab\xd7\xca\x2d\x3a\x9f\x6b\xe4\x6a\xda\x2c\x64\x7e\x14\xec\xb1\x62\xbc\x60\x51\x84\x69\x80\x78\x42\xd5\x7e\x08\xa3\xfc\x59\xcf\x10\xdb\x00\xe7\x24\x00\x81\x30\xbd\x45\x02\x24\xc2\x52\xaf\x2f\x26\x69\x18\xc2\x06\x1c\xc9\xb0\xfa\x38\x0c\xd5\xc7\x62\x0d\xfd\x61\xee\x64\xb2\x10\x4b\x08\x2e\x1d\xcb\x65\x79\x10\x3a\x56\x61\xc2\x9d\xcb\x56\x4d\x27\xd4\x01\x95\x5d\x07\x27\x20\x10\xa1\x1a\x86\x6d\xb7\x54\x84\x9b\xa7\xf8\xbc\xd9\xbb\xd1\x95\x99\xe9\xe7\xd3\x93\x73\x35\xef\xcf\x66\x93\xc2\xd4\x7f\xcf\x29\x55\xbb\x06\x64\x7f\x2e\x11\x97\x4b\xa3\x17\x99\x03\xe8\x4f\xd9\xdb\x16\xfa\xb6\xab\xbe\x0b\x8b\x39\x20\x12\x80\xda\x3c\xe3\xb0\xba\x11\xae\xe0\x48\x93\xb0\x92\x4a\x34\x7f\x9f\xdd\xb2\xfb\x9a\xa9\x2c\xda\x60\x4e\xf0\x22\x04\xc4\x78\x76\x53\xb7\xf4\x7e\x48\xa3\x65\xae\x20\x2b\xb7\xcd\x51\x3a\xaf\x94\xd9\xad\x2a\x1e\xed\x17\xb5\x38\x44\x87\x40\x37\x6f\x71\x37\x86\xee\x4b\xb2\xab\x77\x7f\x6f\xe0\x92\x9d\x32\xa1\x08\xe8\x86\x70\x46\x23\xa0\x72\x0b\x3c\xa1\xc5\xc9\xc1\x09\x7a\xe7\x01\x7c\xa7\x00\xab\x30\xa5\x8f\x09\xe0\x67\xa5\xe7\x9b\x1e\xfa\x4b\xf3\x4a\xc0\x31\x8d\x7d\x6d\xd2\xb7\x3b\xf8\xf5\x42\xda\x69\xe8\xef\x60\x97\x19\x88\xfb\x8c\xf7\x37\xf9\xd1\x9f\x64\xfa\x06\x6e\x54\x07\xeb\x21\xc3\xbb\xaa\x6f\x18\x27\x61\x78\xa1\x39\x26\x6f\xf7\xb4\x35\x6b\x8e\x12\x01\x81\xb2\x57\xe9\xd8\x46\x24\x5f\xca\xea\xda\xed\xb8\xcb\x66\xd3\xf8\x4b\x59\xbc\x93\xaa\xce\x1d\x70\xa1\xb6\x7a\x52\xda\x1f\xdb\xad\xf7\x35\xeb\x10\x2b\xbe\xb7\x59\x88\x46\x29\x93\x30\x45\x72\x4d\x04\x5a\x12\x08\x03\x44\x04\x0a\x20\xe6\xe0\x2b\x44\x5c\xd3\x77\x5e\x37\x45\x92\x27\xb0\x2b\x95\xdf\x68\x7b\xcc\xb8\x3b\xfb\x61\xe7\x03\x54\x3b\xb4\x60\x09\x2d\xbc\x41\x94\x7b\xa1\x18\xa0\x0a\xd6\x4c\xc8\xbb\xf4\xe8\xc0\x88\xe1\x4a\x2f\x41\xa3\xb1\xf9\xf7\xe4\x7c\x24\xfd\xf8\x7f\x49\x10\x9f\x9c\xef\x49\xfa\x7f\x30\x21\x91\x82\x6c\x24\x4e\x94\xcf\x0b\x42\x15\xfb\xdd\x74\xdf\x71\xa2\x82\xca\x19\xd6\x8a\x71\x5f\x34\x98\x30\x79\x85\xbb\x8c\xd6\xae\xa6\xf5\xb9\x9f\xbc\x51\x65\x13\x97\xf1\x2b\xbd\x59\x88\x83\x80\x83\x10\x28\xc2\x71\x6c\xe6\x1d\x9c\x55\x65\x8b\xe9\x5e\x7d\xf1\x45\xa1\x95\xc1\x4f\xdc\xde\xe1\xf6\x89\xec\x3b\x6f\xef\x20\xb8\x00\xa8\x0c\x80\x73\x14\x73\x58\x92\x8f\x65\x3c\x4d\x92\xf5\x98\xf1\x7c\x95\x34\x26\x9f\xbf\x12\x9e\x2c\x91\xbf\x47\x3c\x6f\x18\xbf\xfe\xb1\xf2\xf6\xb6\xcb\xdb\xff\x30\x7e\xad\x5c\x09\x0a\x6f\x90\xcb\x35\x1a\x95\xf3\x29\x85\x53\x68\x1d\x0b\xec\x3e\x6b\x1e\xd4\x79\x5a\x4e\xa0\xd7\x2e\xf1\x69\xb8\x59\x28\x9b\xf7\x91\x79\x77\x27\xd5\xb7\x3b\xa4\x81\xf5\xac\xfd\x93\xa1\x69\x32\xd0\x95\x59\x4b\xab\x3a\xa7\xd4\x58\x6c\xe7\xd2\x1a\x46\x45\x63\x9e\xcd\x1d\x6a\xef\x0a\xb3\x0b\xe7\x04\x15\x0b\xf6\x3a\x14\xb2\xbf\x23\x51\xf7\xe0\x0b\x15\x3f\xe2\x90\x7c\x52\xb4\x43\xfe\x9a\xa8\x38\x43\x09\x9b\xf0\x04\x23\x7d\xfb\x2a\xdb\xd6\x26\x9c\xab\x5d\xbf\xf0\x59\xac\x0b\xd3\xdb\xa0\x6c\x89\x3e\x68\xd1\x0b\x25\xa9\x02\xb4\x69\xd6\xf6\x52\x35\x55\x25\x1f\x3c\x74\xa1\x9a\xd9\xc5\x2a\xaa\x51\xfb\xc3\x53\x5b\xc5\x07\x74\x43\xc2\x50\xbf\xf8\x27\x44\x12\xb9\x22\x9e\xbe\xd6\xd4\xc6\x13\x95\x2d\x27\xba\x6d\xad\xfb\xdf\x04\xff\x2e\xf6\xae\xd5\xcf\x91\xe4\x55\x8d\x14\xac\xe7\x5b\x4a\x48\xc3\x51\xa3\xde\xe6\xa0\x45\xae\xa9\x69\xfc\x4a\xb7\x2d\x92\xd0\x2a\x2d\x72\xb0\xc2\xcf\xef\x2c\x6c\xd6\x78\x5c\x2c\xec\xb0\xec\x59\xbb\xda\x3b\x5c\xf4\x58\x7c\xc0\x6a\x57\x3a\xbc\x72\xad\x79\xa5\x06\x9d\x57\xbe\x4c\x4b\xdd\xfa\x77\xf0\xfd\x19\xbf\xee\x1d\x85\x3d\x41\xcc\x0d\xec\x0e\x65\xe1\x0c\xcf\x79\x98\xba\xad\xee\x0c\xa3\xd1\x71\xb4\x20\xa6\xe6\x75\x87\xd0\x91\x6e\x72\x41\xe9\x68\xb6\xe3\x1a\x8f\x48\xe2\x98\x71\xa9\xfe\x7b\x6f\x74\xf1\xf2\xfd\xe5\x8b\x57\xaf\x7f\x7a\xff\xf6\xf9\x9b\x13\x24\x92\x85\x90\x44\xea\x37\x05\x90\xb8\xa5\x12\x7f\x44\x37\x6b\xe0\x50\x69\x99\xcd\xd9\x1c\xe2\x10\xfb\x26\x8a\x56\x0b\x8a\xfe\xae\x8b\x5a\x2a\x8a\xcd\x11\x96\x88\x27\x54\x92\x08\xbc\x6a\x87\xbb\xbe\xd2\x95\x7e\xa5\xca\xcd\x1d\x5d\x55\xe7\xe4\xe6\xa1\x77\xe6\x9d\x55\xaf\x9d\x8e\xb2\x83\xf8\xf2\x05\x53\xfd\x19\x35\x23\xe3\xad\x65\x54\xc8\xb5\xd7\xa5\x45\x8a\xa9\x90\x77\xa3\x34\x09\x32\x9b\x79\x8e\xff\x8e\xce\xa7\xa3\xd9\x4c\x27\x4a\x9e\x8f\x7f\xc1\xe3\x4f\xe3\xf9\xfd\xd1\xf9\x74\x36\xf3\x4a\x45\x27\x7f\x3e\x39\x39\xd7\xe5\xf7\x0b\xe5\xb3\xd9\x78\x36\xf3\xe6\xf7\x4f\xce\xef\x15\xbe\xd6\x35\xf8\x3c\x18\xfc\x3f\x00\x00\xff\xff\x18\x2b\x46\x90\x5e\x4e\x00\x00")

func pkgDataPackageManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_pkgDataPackageManifestSchemaJson,
		"pkg/data/package-manifest.schema.json",
	)
}

func pkgDataPackageManifestSchemaJson() (*asset, error) {
	bytes, err := pkgDataPackageManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/data/package-manifest.schema.json", size: 20062, mode: os.FileMode(420), modTime: time.Unix(1490213827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/data/package-manifest.schema.json": pkgDataPackageManifestSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"package-manifest.schema.json": &bintree{pkgDataPackageManifestSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
