// Code generated by go-bindata.
// sources:
// pkg/data/package-manifest.schema.json
// DO NOT EDIT!

package pkg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgDataPackageManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x73\xdb\xb8\x11\xfe\xae\x5f\x81\x51\xf2\x41\x6e\x2c\xca\x79\x6d\xab\x4c\xc7\x93\xc9\x5d\xa7\xee\xb4\x49\x26\x9e\x49\x67\xce\x72\x12\x88\x5c\x49\x38\x93\x00\x0b\x80\x72\x9c\x6b\xfe\x7b\x07\x00\x5f\x41\x90\x12\x69\x3a\xd1\xe5\x92\x2f\xb1\x00\xec\x72\xf1\xe0\xc1\xee\x62\x09\xe9\xb7\x11\x42\xe3\xfb\xc2\xdf\x40\x84\xc7\x73\x34\xde\x48\x19\xcf\x67\xb3\x5f\x05\xa3\x53\xd3\xea\x31\xbe\x9e\x05\x1c\xaf\xe4\xf4\xe4\xc9\xcc\xb4\xdd\x1b\x1f\x2b\x39\x12\x64\x22\x62\x3e\x9b\x61\xee\x6f\xc8\x16\x3c\x16\x8b\x18\x7c\x8f\xb0\xd9\x89\xf7\xd0\x7b\x3c\x53\x9f\x66\x31\xf6\xaf\xf0\x1a\xa6\x11\xa6\x64\x05\x42\x7a\xa9\x72\xf5\x20\xa3\x4c\x12\x19\x82\xd2\x97\x0e\xfd\x77\x3a\xd2\xf4\x06\x20\x7c\x4e\x62\x49\x18\x55\x63\xb2\x4e\xb4\x62\x1c\x61\x94\x8a\x98\xa1\x31\x67\x31\x70\x49\x40\x8c\xe7\x48\xcd\x0f\xa1\x31\xc5\x11\xe4\x9f\xea\xea\x5e\xe1\x08\x10\x5b\x21\xb9\x01\xc4\x62\xad\x46\x0f\x93\x37\xb1\x36\x49\x48\x4e\xe8\x7a\xac\x9b\xbf\x98\x5e\x4b\x45\x93\xe6\x9f\x8a\x8f\x5d\x1f\x40\x68\x9c\x48\x51\xd6\x7d\x9f\xc3\x4a\x8d\xbe\x37\x0b\x60\x45\x28\x51\x5a\xc5\x2c\xc6\x1c\x47\x55\x51\x96\xc8\xde\xb2\x3c\xa1\xbb\xe5\x84\x6f\x19\xbb\x05\x2e\xda\x91\x78\x67\x46\xb8\x50\x68\x78\x06\x44\xef\x80\xa7\x8f\x19\xa5\x8f\x1a\x73\xf8\x6f\x42\x38\x28\xe6\x5d\x94\xd6\x76\x84\xd0\xa5\xee\xc7\x41\xa0\xe5\x71\xf8\xa6\xcc\x83\x15\x0e\x05\xa4\x4c\xca\x1f\x51\xf0\x23\x20\xfc\x8d\x86\xa2\x64\x7f\x4e\xc8\xbc\xf3\xb8\x69\x91\x09\x07\x5f\x32\x7e\x83\x34\x9e\x20\x81\xab\x69\x62\xea\x5c\x6b\xb6\xfc\x15\x7c\x59\xb4\x3b\xf8\x9a\xd9\x54\x69\x68\x1e\xda\xc2\xc7\xbc\xdb\xc5\xb4\xec\xdf\x97\x63\x5b\xd5\x0a\x27\xa1\x74\xa9\xa9\xd1\x5b\x8f\x44\x5b\x1c\x26\xf0\x1c\x61\xc4\x21\xc4\x92\x6c\x01\xc5\x58\x6e\x10\xa1\x12\x78\xcc\x41\x42\x80\x56\x9c\x45\x7a\xe5\x03\xc2\x11\xa1\xe8\x7a\x43\xfc\x4d\x4a\x05\x44\x04\x52\xbc\x3b\xbe\x8d\xd5\x44\x9c\x83\xcf\x61\x1f\xb3\xcf\x56\x99\x25\xe9\xba\x11\x81\x84\x11\x6e\x34\x61\xc9\x58\x08\x98\x5a\x36\x8c\x1a\xec\x69\xe5\xe1\xc8\x16\xcf\x45\x77\xd2\x57\x0f\xaa\xed\x01\x94\xf1\x25\xfd\x74\x59\xd9\x9b\x2b\x12\x42\x33\xbb\x8b\xde\x26\x7a\xff\x9d\x84\x30\x28\xb3\xd5\x23\x7f\x50\xfb\x4e\xa9\xad\x20\xfe\x2e\x58\xad\xb9\xe2\xa4\x35\x4d\xa2\x25\xf0\x97\x8c\x0a\xc9\x31\xa1\xd5\x70\x97\xd3\xbb\x3e\xaa\x37\x6d\x71\x18\xbe\x5e\xd9\xbc\xb5\xe0\xff\xe7\xf9\xeb\x57\xe8\x5c\xe7\x36\xe8\x42\x0b\xa0\x2b\xb8\xb9\x66\x3c\xb8\x9c\x64\x89\x92\x64\x2c\x14\x1e\x01\xb9\xd2\xb9\xd5\x46\x46\x61\x9a\x60\x7d\xbe\x89\xa7\xa5\xd4\x6b\x7a\xf2\xe4\x9e\x00\x5f\xe9\x9e\x3e\xf5\x1e\x3d\x3a\xaa\xac\x63\x6e\x3f\xe6\x1c\xdf\x54\xbb\x88\x84\xc8\xb1\x91\xdc\x81\xb6\x0e\xd1\xc8\xc5\x85\x12\x13\xc6\x98\xde\x74\x84\x42\x09\x0c\x07\xc5\xe3\xc3\x81\x02\x68\x12\x75\x41\x42\x8d\x1f\x0e\x88\x93\x5b\x03\x91\x49\x98\xa9\xef\x9e\xef\x8a\xf1\x08\xdb\x9e\x68\xcc\x28\x68\x42\x5c\x54\x94\xd7\x5d\x75\xb6\x2d\x95\xfb\x5c\x03\xaf\x3b\x26\x0b\xba\xb7\xc6\x29\x08\xed\xd4\x8c\x89\x68\x09\x2a\x00\x35\x6a\xb0\x1c\x6b\xad\x3f\x5d\xb0\x0b\xab\x1d\x15\x46\x59\x3d\x97\x8d\xce\xf1\xd2\x89\x50\x84\x3f\x91\xa8\x1b\x29\x52\x91\xe1\x78\xd1\x40\x0b\x7b\x91\x2b\x66\x13\xda\xd9\x6c\x23\x32\x98\xd9\x4f\xfa\x98\x9d\x84\x92\xc4\x21\x74\xf3\x47\x85\xd4\x60\xc6\x3f\xec\x61\x3c\x65\xb5\x9d\xd4\x66\x35\x65\x72\x38\x8a\x3c\xb5\xec\xed\xec\x11\xcb\x13\xc9\xf6\xff\xde\x53\xd1\x02\xc3\x4d\xa6\x89\x39\x5f\x2b\x20\x74\x4a\x79\x1c\x69\x4c\x73\x7e\x5e\xee\x6f\xca\xd0\x5f\x19\xc7\x38\x64\x8e\x9e\xb2\xf6\xe0\xb2\xf4\xe6\x70\x35\x44\xda\x9c\x46\x98\xde\x89\xb3\x65\x80\xef\x4c\x4e\xf3\xee\x1e\x94\x3b\xac\xe4\xbc\xba\x08\xd5\xf4\x5c\x30\xff\x0a\x64\x33\xaf\xcb\xfd\x3b\x59\x6a\xad\xd6\xb9\x96\x6d\xe5\x7b\x13\xaf\xcd\x63\xbf\x11\xaf\xbb\x13\xd2\x98\xfb\x5d\x9c\xe4\x52\xe4\xdd\x64\xd1\xe0\xed\x3a\xcb\xd5\x47\xfd\x38\xcb\xd9\x45\xd3\x1a\x44\x7f\xd8\xb3\x5c\x0f\x28\xbe\x97\xb3\x5c\xdd\x17\x75\x39\xcb\xd9\xce\x36\x89\x81\x0b\x90\xca\xc9\x56\x66\x6f\xa4\x07\x9a\xff\x9f\xad\xc9\x77\x3d\x50\x06\x58\xc2\x54\x92\x08\x76\x1e\x29\x2b\x73\xc8\xc5\x90\x99\xcd\x6d\x67\xe1\x3d\xb6\xcf\x01\xae\x85\xe9\x70\x26\x2d\xe6\xd5\x7e\x2a\x3d\xde\x17\x27\xe5\x85\xf9\x94\x44\x78\x0d\x53\xb5\x6f\x76\xc1\xf5\x02\x19\x11\xa4\x45\x10\x87\x15\x70\xa0\x3e\x20\x2c\x90\xde\x6e\x10\xa0\xe5\x0d\xba\x58\x13\xb9\x49\x96\x9e\xcf\xa2\x99\x11\x98\x05\x44\x4d\x77\x99\x28\x4d\xb3\x5c\xae\x40\x78\x87\x84\xe4\x00\x59\xc7\x43\xef\xe1\xe3\x42\xc5\xb0\x00\xdb\x80\x0c\x83\x33\x44\x98\x84\xdd\xb8\xa8\x45\x86\xe3\xe1\xa3\x41\x61\x32\xf3\x19\x06\x9b\x0d\x13\x52\xbf\xb5\xeb\x04\x4f\x26\x35\x1c\x42\x8f\x07\x45\x28\x9f\xd5\x30\x20\x91\x78\xfb\xa4\x1b\x40\x4a\x62\x38\x70\x9e\x0c\x0a\x8e\x9e\xcd\x60\xc0\x3c\xeb\x0c\xcc\xb3\xe1\x80\x79\x3a\x34\x30\xcf\x06\x02\x26\xe1\xa4\x1b\x2e\x09\x27\xc3\xc1\xf2\x6c\x50\x58\xd4\x5c\x86\x41\x45\x40\xb4\xdd\xa3\xd0\xfc\x02\x09\x88\x30\x95\xc4\x47\xe9\x5d\x06\x3b\xc0\x19\x45\x0a\x15\x83\xd6\x7c\x36\x2b\x9a\x66\x83\xce\x3e\xb5\xb9\x1d\x80\x91\xab\xc7\xaa\x43\xff\x0b\xe8\x5a\x6e\x3a\x96\x74\x8d\xd0\x60\x79\xed\xb3\x86\xb4\xd6\x55\xc0\x2f\x15\xa1\x1f\xba\xe7\x94\x99\xf7\x6d\xe7\x64\x67\xab\x7b\xce\xe9\xe4\xb8\x6a\x72\x56\xe5\x3a\x71\xce\xf5\xf0\x8b\xc3\x2d\x47\xac\x3f\x42\x71\xb8\xc7\x09\x33\xc6\x52\x02\xb7\x0b\x49\xad\x60\xa4\x22\x83\xc1\xf1\x97\x06\x34\x1c\x6e\xaa\x38\x20\x8e\x39\xac\xe1\xd3\xb8\x67\x65\xc8\x51\xeb\x69\x29\x0c\x96\xfa\x3b\x17\x06\xb5\x6c\xbf\xc2\xa0\x99\xfe\xc1\x16\xbc\xef\xa8\xbe\x68\x00\xfb\xa6\x05\xef\xd6\x6d\x74\x60\x35\xcc\xca\x22\x54\x6b\x98\xb1\xcd\x68\x0b\xf1\x37\x7d\xde\xce\x98\xbd\xff\xa6\x81\xb3\x17\xd3\x0f\x1e\x9e\x7e\x7e\x31\xfd\xe5\x64\xfa\xd7\xcb\x07\x3d\x5f\xca\xbb\x57\x25\xbf\xf5\xd8\x29\xed\x72\xeb\x2a\xee\x98\x0d\xa0\xac\xfc\x42\x6c\x00\x75\xe5\xf7\x10\x43\xa8\x2b\x79\xaf\x7d\xf2\xb5\x5b\xf8\x51\x7f\xed\xf6\x9f\xfe\xba\xc5\x3f\x62\x95\xe1\xfa\x38\x0c\xd1\x9a\xe3\x78\x93\x73\xf1\x39\x12\x00\x28\x0b\x2d\x40\xbd\x6b\x72\x45\x62\x08\x88\xb9\x00\xae\x3e\xcd\x5e\xe2\x30\xfc\xa0\xc5\x8a\x07\xd4\x39\xf6\xdb\xee\xbc\xc1\x67\x54\x62\x42\x81\x2b\x8d\xce\x9c\x61\x0f\x25\x2c\xbe\x8d\xb4\xda\xad\x61\x08\xe1\x6d\x74\x08\xe0\x04\xdb\x1a\x9c\xbe\xa1\x3a\x61\xd7\xaa\x55\x47\xf4\x7e\xaf\x91\xab\xe9\x12\xc8\xfc\x28\xd8\x23\x62\xbc\x64\x51\x84\x69\x80\x78\x42\xd5\x79\x08\xa3\xfc\x59\xcf\x11\xdb\x02\xe7\x24\x00\x81\x30\xbd\x41\x02\x24\xc2\x52\xc7\x17\x53\x34\x0c\x61\x0b\x8e\x62\x58\x73\x1e\x86\x9a\x73\xb1\x96\xf5\x30\x77\x32\x59\x88\x25\x04\xe7\x8e\x70\x59\xdd\x84\x8e\x28\x4c\xb8\x33\x6c\x35\x2c\x42\x81\x6d\xab\x97\xce\x87\xbd\x9f\x5c\x18\x67\x7d\x39\x3f\x3a\x55\xae\x7b\xb1\x98\x95\xbc\xf7\x7d\xa7\x94\xe3\xa4\xba\x14\x2c\x4c\x24\x14\xf8\xeb\x7b\xa7\xfa\x56\x6a\x84\xe3\x18\x02\x24\x19\xc2\xba\x71\x8b\x39\xc1\xcb\x10\x10\xe3\x08\x67\x72\xe9\xb7\x25\x72\x29\x0f\x9d\xad\x10\x65\xb5\x76\x14\x73\xb6\x25\x01\x04\xc7\xae\x47\x5d\x93\x30\x44\x4b\x40\x89\x80\xc0\xab\x61\x82\x76\xa5\x2e\xf5\xd5\xa8\xad\xc7\xbe\x11\xde\xb5\x94\x40\xb7\xef\xf0\xdd\xae\xe6\xc5\xfb\xbf\x75\x58\x34\x8a\x80\x6e\x09\x67\x34\x02\x2a\x8b\x75\x21\xb4\xbc\x91\xdc\x30\xf6\x25\xfb\x9d\x02\xac\x42\xfa\xef\x73\xb3\xac\xcc\x75\x76\x6b\xb7\xe8\xd6\xd6\xed\x92\xcb\xd9\xfb\xa5\x50\xe8\xda\x30\x45\xef\x61\xef\x18\xed\xa9\x7b\x2d\xe8\x8e\x95\x34\xec\xdd\x67\xb1\xde\xe6\xef\x96\xd4\x92\x50\x13\x3c\x06\xdf\x13\x75\x7d\xe3\x38\x09\xc3\xb3\x00\xa8\x24\xf2\x66\x4f\x5b\xb3\xe1\x7a\x35\x95\xbd\x4a\x47\x11\xf2\xbe\x96\xd5\x8d\xe7\x3d\x97\xcd\x66\xf0\xd7\xb2\x78\x27\x55\x9d\x47\xac\x52\x6f\xfd\x55\xdc\x70\x6c\xb7\xbe\x10\xd8\x84\x58\xf9\x8b\x81\xa5\x74\x87\x32\x09\x73\x24\x37\x44\xa0\x15\x81\x30\x50\xe7\xe7\x00\x62\x0e\xbe\x42\xc4\x55\x6b\xce\xfb\xe6\x48\xf2\x04\x76\xd5\x8a\x5b\x6d\x8f\x19\x77\x1f\xaf\xed\x03\xa7\x1a\x87\x96\x2c\xa1\xa5\xaf\xa8\x14\x8e\x49\x32\xdd\xb0\x61\x42\xde\xe5\x8c\x6e\x19\x07\x2e\xb4\xbb\x9f\x4c\xcd\xff\x47\xa7\x13\xe9\xc7\xff\x4b\x82\xf8\xe8\x74\x4f\xd2\xff\x83\x09\x89\x14\x64\x13\x71\xa4\xe6\xbc\x24\x54\xb1\x7f\x2f\xff\xeb\x1c\x53\x94\xf0\x6a\xc6\x7d\x55\x87\x6d\x0e\xae\x77\x19\x83\x2f\xe6\xcd\xc5\x85\x7c\x50\xed\x94\x90\xf1\x2b\xbd\xba\x86\x83\x80\x83\x10\x95\x60\x9b\x76\x65\xe1\xf6\xe0\x62\xa1\x90\xc1\xcf\xdc\x3e\x42\x0d\x89\xec\x7b\x6f\xef\x0c\xa6\x04\xa8\x0c\x80\x73\x14\x73\x58\x91\x4f\x55\x3c\x4d\x15\xef\x90\xf1\x7c\x9d\xb4\x56\x37\xbf\x11\x9e\x2c\x91\xbf\x47\x3c\xaf\x19\xbf\xfa\xa9\xf6\xf5\x60\xd7\x6c\xff\xc3\xf8\x95\x9a\x4a\x50\xfa\x8a\xb2\xdc\xa0\x49\xf5\xc0\x5e\x7a\xcd\xa9\x73\x81\xdd\x2f\x33\x47\x4d\x33\xad\x56\x68\x1b\x43\x7c\x9a\x6e\x96\xda\x2e\x87\x28\xed\xba\xab\xb6\xc5\xf9\x6a\x64\x3d\x6b\xff\x6a\x5b\x5a\x6d\x72\x95\x6e\xd2\xae\xde\x35\x1b\x16\xdb\xc5\x9a\x96\x5d\xd1\x5a\xc8\x71\xa7\xda\xbb\xd2\xec\x52\x21\xba\x66\xc1\x5e\x6f\x1d\xec\x1f\x2a\x68\x7a\xf0\x99\xca\x1f\x71\x48\x3e\x2b\xda\x21\x7f\x43\x54\x9e\xa1\x84\x4d\x7a\x82\x91\xbe\xde\x43\xa8\x49\x54\x12\xce\xd5\x51\x59\xf8\x2c\xd6\x8d\xe9\x75\x43\xb6\x42\x1f\xb5\xe8\x99\x92\x54\x09\xda\x3c\x1b\x7b\xae\x86\xaa\x96\x8f\xfa\x88\xf6\xb1\xd6\xac\xb2\x1a\x9a\x84\xe1\xb1\xad\xe2\x63\x7e\x38\xc3\x42\x24\x91\x2b\xe3\x19\x2a\xa6\xb6\x96\xec\x0b\x4e\x38\x4b\xf7\xd9\x3f\x97\x48\xc5\x48\x35\xc9\xba\x47\x72\x2c\xde\xde\x1a\x9b\xbc\x1c\x72\x78\x3a\x54\xbb\xac\xe0\x1a\x35\xa0\x3f\xac\xff\xde\x45\xde\xd5\x4a\xc1\x66\xbe\xa5\x84\x34\x1c\x35\xea\x6d\x0e\x5a\xe4\x9a\x9b\xc1\xaf\xf5\xd8\x32\x09\xad\xd6\x32\x07\x6b\xfc\xfc\xc1\xc2\x76\x8d\x87\xc5\xc2\x1e\x61\xcf\x3a\xd5\xde\x61\xd0\x63\xf1\x2d\xa2\x5d\xe5\xed\x88\x2b\xe6\x55\x06\xf4\x8e\x7c\x99\x96\xa6\xf8\x77\xeb\x0b\x1a\x7e\xd3\x25\xf8\x3d\x41\xcc\x0d\xec\x0f\x65\xe9\x25\x91\xf3\x6d\x5d\xd1\xdd\x1b\x46\xa3\xe3\x60\x41\x4c\xcd\xeb\x0f\xa1\xa3\xdc\xe4\x82\xd2\x31\x6c\xc7\x3d\x11\x91\xc4\x31\xe3\x52\xfd\x79\x7f\x72\xf6\xea\xc3\xf9\xcb\xd7\x6f\x7e\xfe\xf0\xee\xc5\xdb\x23\x24\x92\xa5\x90\x44\xea\xab\xe8\x48\xdc\x50\x89\x3f\xa1\xeb\x0d\x70\xa8\x8d\xcc\x7c\x36\x87\x38\xc4\xbe\xc9\xa2\x55\x40\xd1\x3f\x1c\xa2\x42\x45\x79\x38\xc2\x12\xf1\x84\x4a\x12\x81\xb7\xdf\xcf\x40\xa5\x3f\x83\xe4\xe6\x8e\xee\x6a\x9a\xe4\xf6\x91\x77\xe2\x9d\xd4\xef\x35\x4e\xb2\x37\xbd\xd5\x1b\x8c\xfa\x77\xba\x8c\x8c\xb7\x91\x51\x78\xd4\x68\x9f\x7d\x3d\x41\x75\xbd\x9f\xa4\x45\x90\xc5\xc2\x73\xfc\x39\x39\x9d\x4f\x16\x0b\x5d\x28\x79\x31\xfd\x05\x4f\x3f\x4f\x2f\x1f\x4c\x4e\xe7\x8b\x85\x57\x69\x3a\xfa\xd3\xd1\xd1\xa9\x6e\x7f\x50\x6a\x5f\x2c\xa6\x8b\x85\x77\xf9\xe0\xe8\xf4\x7e\xe9\xe7\xa0\x46\x5f\x46\xa3\xff\x07\x00\x00\xff\xff\x47\xb9\xae\xa9\xbf\x4c\x00\x00")

func pkgDataPackageManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_pkgDataPackageManifestSchemaJson,
		"pkg/data/package-manifest.schema.json",
	)
}

func pkgDataPackageManifestSchemaJson() (*asset, error) {
	bytes, err := pkgDataPackageManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/data/package-manifest.schema.json", size: 19647, mode: os.FileMode(420), modTime: time.Unix(1490203915, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/data/package-manifest.schema.json": pkgDataPackageManifestSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"package-manifest.schema.json": &bintree{pkgDataPackageManifestSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
