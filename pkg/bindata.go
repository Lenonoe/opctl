// Code generated by go-bindata.
// sources:
// pkg/data/package-manifest.schema.json
// DO NOT EDIT!

package pkg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgDataPackageManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x71\x8f\xd3\x38\x16\xff\x7f\x3e\x85\x55\xd0\xa9\x73\x4c\xd3\x01\x06\xee\xae\xe8\x34\x1a\xb1\xac\x8e\xd3\x1d\x8c\x76\x24\x4e\xda\x69\x01\x37\x79\x6d\xbd\x93\xd8\x39\xdb\xe9\x30\xec\xf1\xdd\x4f\xb6\x93\x34\x71\x9c\x34\x4d\x03\x14\x96\xf9\x07\x6a\xfb\x3d\xbf\xf7\xf3\xcf\xf6\xf3\x8b\x93\xdf\x8f\x10\x1a\xdc\x17\xfe\x0a\x22\x3c\x98\xa0\xc1\x4a\xca\x78\x32\x1e\xff\x26\x18\x1d\x99\x52\x8f\xf1\xe5\x38\xe0\x78\x21\x47\xa7\x67\x63\x53\x76\x6f\x70\xa2\xe4\x48\x90\x89\x88\xc9\x78\x8c\xb9\xbf\x22\x6b\xf0\x58\x2c\x62\xf0\x3d\xc2\xc6\xa7\xde\x43\xef\x6c\xac\x7e\x8d\x63\xec\xdf\xe0\x25\x8c\x22\x4c\xc9\x02\x84\xf4\x52\xe5\xaa\x23\xa3\x4c\x12\x19\x82\xd2\x97\x36\xfd\x77\xda\xd2\xd4\x06\x20\x7c\x4e\x62\x49\x18\x55\x6d\xb2\x4a\xb4\x60\x1c\x61\x94\x8a\x98\xa6\x31\x67\x31\x70\x49\x40\x0c\x26\x48\xf9\x87\xd0\x80\xe2\x08\xf2\x5f\x55\x75\xaf\x70\x04\x88\x2d\x90\x5c\x01\x62\xb1\x56\xa3\x9b\xc9\xbb\x58\x9b\x24\x24\x27\x74\x39\xd0\xc5\x9f\x4c\xad\xa5\xa2\x4e\xf3\x4f\x9b\x9f\xbb\x76\x40\x68\x9c\x48\x51\xd4\x7d\x9f\xc3\x42\xb5\xbe\x37\x0e\x60\x41\x28\x51\x5a\xc5\x38\xc6\x1c\x47\x65\x51\x96\xc8\xce\xb2\x3c\xa1\xdb\xe5\x84\x6f\x19\xbb\x06\x2e\x9a\x91\x78\x63\x5a\xb8\x50\xa8\xe9\x03\xa2\x37\xc0\xd3\x6e\x8e\xd2\xae\x06\x1c\xfe\x9b\x10\x0e\x8a\x79\xd7\x85\xb1\x3d\x42\x68\xa6\xeb\x71\x10\x68\x79\x1c\x5e\x16\x79\xb0\xc0\xa1\x80\x94\x49\x79\x17\x1b\x7e\x04\x84\x5f\x6a\x28\x0a\xf6\xe7\x84\xcc\x2b\x4f\xea\x06\x99\x70\xf0\x25\xe3\x77\x48\xe3\x09\x12\xb8\x72\x13\x53\xe7\x58\xb3\xf9\x6f\xe0\xcb\x4d\xb9\x83\xaf\x99\x4d\xa5\x82\xfa\xa6\x0d\x7c\xcc\xab\x5d\x4c\xcb\xfe\x3e\x9d\xd8\xaa\x16\x38\x09\xa5\x4b\x4d\x85\xde\xba\x25\x5a\xe3\x30\x81\x67\x08\x23\x0e\x21\x96\x64\x0d\x28\xc6\x72\x85\x08\x95\xc0\x63\x0e\x12\x02\xb4\xe0\x2c\xd2\x23\x1f\x10\x8e\x08\x45\xb7\x2b\xe2\xaf\x52\x2a\x20\x22\x90\xe2\xdd\xc9\x3e\x56\x13\x71\x05\x3e\x87\x36\x66\xbf\x5c\x64\x96\xa4\xe3\x46\x04\x12\x46\xb8\xd6\x84\x39\x63\x21\x60\x6a\xd9\x70\x54\x63\x4f\x23\x0f\x8f\x6c\xf1\x5c\x74\x2b\x7d\x75\xa3\xca\x1c\x40\x19\x5f\xd2\x5f\xb3\xd2\xdc\x5c\x90\x10\xea\xd9\xbd\xa9\xad\xa3\xf7\xcf\x24\x84\x5e\x99\xad\xba\xfc\x41\xed\xcf\x4a\x6d\x05\xf1\x77\xc1\x6a\xcd\x15\x27\xad\x13\x01\x5c\xad\xfd\x97\x58\x88\x5b\xc6\x83\x8b\x44\xae\x06\x93\xdf\xb7\x91\xd2\xc2\x4b\x49\x01\x95\xc4\xc7\x7a\x8f\x5e\x13\x8c\x32\xc5\x08\xd3\x00\xc5\xa9\xf6\xed\xac\xce\xc4\x6c\x66\xbb\x77\x37\xc3\x1f\x16\x62\x09\xc1\x95\x45\x81\x02\xe6\x83\xbc\xff\xfd\xb5\x56\x86\x65\x83\xf8\xb5\xc3\x0d\x97\x11\xd9\x40\xb4\x1a\xd9\xd2\x68\xd1\x24\x9a\x03\x7f\xce\xa8\x90\x1c\x13\x5a\x0e\x4e\xf2\xc5\xa8\xda\xaa\xf3\x22\x83\xc3\xf0\xf5\xc2\x46\xcd\x1a\xfc\x7f\x5e\xbd\x7e\x85\xae\x74\x24\x8a\xae\xb5\x00\xba\x81\x3b\xe5\xe9\x6c\x98\x85\xb5\x92\xb1\x50\x78\x04\xe4\x42\x47\xc2\x2b\x19\x85\x69\x38\xfc\xf1\x2e\x1e\x15\x02\xe5\xd1\xe9\xd9\x3d\x01\xbe\xd2\x3d\x7a\xe2\x3d\x7a\x74\x5c\x9a\x75\xb9\xfd\x98\x73\x7c\x57\xae\x22\x12\x22\xc7\xb2\xe7\x1e\xe2\x2a\x44\xc5\xd9\xea\xe4\x10\xa6\x77\x3b\x42\xa1\x04\xfa\x83\xe2\xf1\xe1\x40\x01\x34\x89\x76\x41\x42\xb5\xef\x0f\x88\xd3\xbd\x81\xc8\x24\x8c\xeb\xdb\xfd\x5d\x30\x1e\x61\x7b\xdf\x18\x30\x0a\x9a\x10\xd7\x25\xe5\xd5\x8d\x35\x9b\x96\x6a\x59\x59\x02\xaf\x6e\x23\x16\x74\xbf\x98\x05\x45\xe8\x2d\xc8\x98\x88\xe6\x6a\x1d\x45\xb5\x1a\xac\x6d\xb0\x52\x9f\x0e\xd8\xb5\x55\x8e\x36\x46\x59\x35\xb3\xda\xad\x6c\xe6\x44\x28\xc2\x1f\x48\xb4\x1b\x29\x52\x91\xfe\x78\x51\x43\x0b\x7b\x90\x4b\x66\x13\xba\xb3\xd9\x46\xa4\x37\xb3\xcf\xba\x98\x9d\x84\x92\xc4\x21\xec\xb6\x1e\x6d\xa4\x7a\x33\xfe\x61\x07\xe3\x29\xab\xcc\xa4\x26\xab\x29\x93\xfd\x51\xe4\x89\x65\xef\xce\x2b\x62\xd1\x91\x6c\xfe\xb7\x76\x45\x0b\xf4\xe7\x4c\x1d\x73\xbe\xd4\x86\xb0\x53\x80\xea\x08\x63\xea\x4f\x53\xc5\xfa\xba\x90\xf3\x95\x59\x18\xfb\x3c\x51\xa5\xac\x3d\xb8\x33\x55\xfd\x76\xd5\xc7\x21\x27\xdd\x61\x3a\x1f\x73\x2c\x03\x7c\x67\x70\x9a\x57\x77\xa0\xdc\x61\x1d\xa5\xca\x83\x50\x3e\x4c\x09\xe6\xdf\x80\xac\xe7\x75\xb1\x7e\x2b\x4b\xad\xd1\xba\xd2\xb2\x8d\x7c\xaf\xe3\xb5\xe9\xf6\x2b\xf1\x7a\x77\x42\x1a\x73\xbf\x8b\x73\x77\x8a\xbc\x9b\x2c\x1a\xbc\x6d\x67\xb9\x6a\xab\x1f\x67\x39\x3b\xc5\x5d\x81\xe8\x0f\x7b\x96\xeb\x00\xc5\xf7\x72\x96\xab\xae\x45\xbb\x9c\xe5\xec\xc5\x36\x89\x81\x0b\x90\x6a\x91\x2d\x79\x6f\xa4\x7b\xf2\xff\x2f\x96\xf3\xbb\x1e\x28\x03\x2c\x61\x24\x49\x29\xcb\xd4\x62\x04\x73\x31\x64\xbc\xd9\xd7\x0b\xef\xb1\x7d\x0e\x70\x0d\xcc\x0e\x67\xd2\x8d\x5f\xcd\xa7\xd2\x93\xb6\x38\xa9\x55\x98\x8f\x48\x84\x97\x30\x52\xf3\x66\x1b\x5c\x17\xc8\x88\x20\x2d\x82\x38\x2c\x80\x03\xf5\x01\x61\x81\xf4\x74\x83\x00\xcd\xef\xd0\xf5\x92\xc8\x55\x32\xf7\x7c\x16\x8d\x8d\xc0\x38\x20\xca\xdd\x79\xa2\x34\x8d\x73\xb9\x0d\xc2\x5b\x24\x24\x07\xc8\x2a\x1e\x7a\x0f\x1f\x6f\x54\xf4\x0b\xb0\x0d\x48\x3f\x38\x43\x84\x49\xb8\x1b\x17\xb5\x48\x7f\x3c\x7c\xd4\x2b\x4c\xc6\x9f\x7e\xb0\x59\x31\x21\xad\x84\x70\x0b\x78\x32\xa9\xfe\x10\x7a\xdc\x2b\x42\xb9\x57\xfd\x80\x44\xe2\xf5\xd9\x6e\x00\x29\x89\xfe\xc0\x39\xeb\x15\x1c\xed\x4d\x6f\xc0\x3c\xdd\x19\x98\xa7\xfd\x01\xf3\xa4\x6f\x60\x9e\xf6\x04\x4c\xc2\xc9\x6e\xb8\x24\x9c\xf4\x07\xcb\xd3\x5e\x61\x51\xbe\xf4\x83\x8a\x80\x68\xdd\x22\xd1\x7c\x81\x04\x44\x98\x4a\xe2\xa3\xf4\xe6\x89\xbd\xc1\x19\x45\x0a\x15\x83\xd6\x64\x3c\xde\x14\x8d\x7b\xf5\x3e\xb5\xb9\x19\x80\x23\x57\x8d\x95\x87\xfe\x17\xd0\xa5\x5c\xed\x98\xd2\x35\x42\xbd\xc5\xb5\x4f\x6b\xc2\x5a\x57\x02\xbf\x90\x84\x7e\xe8\xf6\x29\x33\xef\xeb\xfa\x64\x47\xab\x2d\x7d\x3a\x3d\x29\x9b\x9c\x65\xb9\x4e\x9d\xbe\x1e\x7e\x72\xb8\xe1\x88\xf5\x47\x48\x0e\x77\x38\x61\xc6\x58\x4a\xe0\x76\x22\xa9\x11\x8c\x54\xa4\x37\x38\xfe\x5a\x83\x86\x63\x99\xda\x1c\x10\x07\x1c\x96\xf0\xa1\xe9\xd1\x7f\xeb\x84\xb7\xe9\xa7\x21\x31\x58\xa8\xdf\x39\x31\xa8\x65\xbb\x25\x06\x8d\xfb\x07\x9b\xf0\xfe\x4c\xf9\x45\x03\xd8\x57\x4d\x78\x37\x4e\xa3\x03\xcb\x61\x96\x06\xa1\x9c\xc3\x8c\x6d\x46\x5b\x88\x5f\x76\x79\x3a\x63\xe6\xfe\x65\x0d\x67\xaf\x47\xef\x3c\x3c\xfa\x78\x31\xfa\xf5\x74\xf4\xb7\xd9\x83\x8e\x0f\xe5\xdd\xa3\x92\xdf\x51\xdd\x29\xec\x72\xeb\xda\xdc\x08\xec\x41\x59\xf1\x81\x58\x0f\xea\x8a\xcf\x21\xfa\x50\x57\x58\xbd\xda\xc4\x6b\x7b\xac\xa3\xfe\xd2\xbd\x7e\xfa\xcb\x86\xf5\x11\xab\x08\xd7\xc7\x61\x88\x96\x1c\xc7\xab\x9c\x8b\xcf\x90\x00\x40\xd9\xd6\x02\xd4\xbb\x25\x37\x24\x86\x80\x98\xeb\xfa\xea\xd7\xf8\x39\x0e\xc3\x77\x5a\x6c\xd3\x41\x95\x63\x2d\x2e\x95\xf9\x8c\x4a\x4c\x28\x70\xa5\xd1\x19\x33\xb4\x50\xc2\xe2\x7d\xa4\xd5\x6c\x0d\x43\x08\xf7\xd1\x21\x80\x13\x6c\x6b\x70\xae\x0d\x65\x87\x5d\xa3\x56\x6e\xd1\xf9\xb9\x46\xae\x66\x97\x8d\xcc\x8f\xec\xcb\x80\x2e\xee\x3c\x67\x51\x84\x69\x80\x78\x42\xd5\x79\x08\xa3\xbc\xaf\x67\x88\xad\x81\x73\x12\x80\x40\x98\xde\x21\x01\x12\x61\xa9\xf7\x17\x93\x34\x0c\x61\x0d\x8e\x64\x58\x7d\x1c\x86\xea\x63\xb1\x86\xf1\x68\xba\xab\x58\x1e\x9d\xca\x68\x1b\x87\x09\x77\x6e\x5b\x35\x83\x50\x07\x54\x76\x79\x9f\x80\x40\x84\x6a\x18\x36\xc3\x52\x11\x6e\x5e\xe2\xf3\x66\x6f\x87\xd7\x66\xa5\x9f\x4d\x8e\xcf\xd5\xba\x3f\x9d\x8e\x0b\x4b\xff\x7d\xa7\x54\xed\x1e\x90\xfd\xb9\x44\x5c\x2e\x0d\x9f\x67\x0e\xa0\x3f\x65\xef\xc6\xe8\xbb\xc9\xfa\xe6\x32\xe6\x80\x48\x60\xee\xbc\x86\xd5\x83\x70\x05\x47\x9a\x84\x95\x54\xa2\xf9\xfb\xe4\x96\x6d\x6b\xa6\xb2\x68\x8d\x39\xc1\xf3\x10\x10\xe3\xd9\xbd\xea\xd2\xdb\x3c\x8d\x96\xb9\x82\xac\xdc\x36\x47\xe9\xac\x52\x66\xb7\xaa\x78\xd4\x2e\x6a\x71\x88\x0e\x80\xae\xdf\xe0\x5e\x18\xfa\x82\xae\x09\x67\x34\x02\x2a\x73\xbc\xfa\xe4\xea\xf5\xdb\xbf\x37\x50\xb2\xeb\xe4\xfd\xac\xe0\xaa\x10\xa5\x0f\x68\x7f\x26\xfd\x42\x79\x78\xd3\x7e\x61\x5e\xde\x38\xa4\x79\xaf\x4d\xfa\x7e\x27\xbe\xde\x44\xbb\x70\xb3\x61\xd3\x47\xe6\x90\x63\xa7\x65\xf2\xaa\xca\x3d\xdc\xec\xb1\x9f\x64\xfa\xf6\x6d\x54\x07\xeb\x3e\xd3\xbb\xaa\x6f\x10\x27\x61\x58\x7e\x0f\xc3\xd1\x99\xd5\x97\xf3\x3d\x8e\xd6\xbd\xbd\xd4\x8c\x96\x77\x35\x3d\xda\xe7\xe8\xb4\x75\xde\xa9\x7e\x81\x54\xe9\x41\xba\x5b\x27\x44\x5b\x32\xc3\x69\x3f\x31\x07\x5f\xc1\x35\x98\x20\xc9\x13\x68\xed\x40\x96\x03\x68\x63\xbe\x69\x3b\xce\x5e\xc7\xf8\x82\xc6\x6f\x9d\x2e\xce\x13\x78\xa1\xb6\xfa\xa4\xb6\xbf\x19\xe7\x78\xeb\x06\x39\xd0\xd3\x6f\xf9\x96\x16\x7a\xe4\x63\x8a\xe6\x85\xc7\xe4\xfa\xd9\x81\x7e\x9d\x8b\xc9\x95\xaa\xcf\x5a\x8a\xfd\x5e\xe0\x8a\x19\x77\xe7\x58\xec\xac\x83\x6a\x87\xe6\x2c\xa1\x85\xb7\xca\x36\xe6\x4a\xa6\x0b\x56\x4c\x34\xa4\x7e\x6a\x97\x97\x76\x7b\xd8\xb5\xde\xaa\x86\x23\xf3\xef\xf1\xf9\x50\xfa\xf1\xff\x92\x20\x3e\x3e\x6f\xb9\xf8\xfc\x83\x09\x89\x94\xc3\x43\x71\xac\x2c\x9e\x13\x1a\x20\xc9\xba\xd3\x73\x93\x85\xad\x18\xf7\x45\x83\x0e\x93\x7b\xe8\x14\x76\xb4\xc5\x7e\x52\x9f\x1f\xca\x1b\x55\x0e\x7a\x19\x3b\xd2\xdb\x87\x38\x08\x38\x08\x81\x22\x1c\xc7\x10\xe8\x1d\x20\xab\xca\x36\xdd\x56\x63\xf1\x45\xa1\x95\xc1\x0b\x6e\x9f\x82\xfb\x44\xf6\xad\x57\x1f\x7d\xd5\x03\x2a\x03\xe0\x1c\xc5\x1c\x16\xe4\x43\x19\x4f\x93\x88\x3d\x64\x3c\x5f\x27\x8d\x09\xea\xaf\x84\x27\x4b\xe4\xb7\x88\xe7\x2d\xe3\x37\x3f\x55\xde\xc7\x77\x79\xfb\x1f\xc6\x6f\x94\x2b\x41\xe1\x9b\x00\x72\x85\x86\xe5\x9c\x4b\xe1\x49\xb5\x8e\xcd\xb6\x3f\x8f\x3e\xaa\xf3\xb4\x9c\x64\xaf\xdd\x86\xd3\xb0\xb4\x50\x36\xeb\x23\x3b\xef\x4e\xbc\x6f\x4e\x52\x47\x56\x5f\xed\x13\xa6\x69\xc2\xd0\x95\x7d\x4b\xab\x3a\xa7\xdd\x58\x6c\xe7\xdb\x1a\x66\x45\x63\x2e\xce\x1d\x92\x37\x87\xe3\xb5\xc7\x9c\x6a\x1c\x56\x69\xd1\x2d\x5a\xaf\x44\x23\x37\xcb\x6a\xbc\x99\x62\xd0\xea\x74\xd2\xe3\xe1\xa4\xf1\xd0\xf7\xed\x9c\x4e\x0e\x3a\x3e\xae\x7c\x49\x26\xaf\xb1\x8f\x47\xca\x6b\x1c\x92\x8f\x6a\x99\x42\xfe\x8a\x84\x01\xd2\xc2\x26\x18\xc5\x48\x1f\x99\xb2\x74\x49\xc2\x39\x50\x89\x84\xcf\x62\x5d\x98\xde\x30\x66\x0b\xf4\x5e\x8b\xbe\x54\x92\x2a\xe8\x9e\x64\x6d\xaf\x54\x53\x55\xf2\xde\x43\x2f\x55\x33\xbb\x18\x11\x81\x68\x12\x86\x27\xb6\x8a\xf7\xe8\x96\x84\xa1\x7e\x99\x54\x88\x24\x82\xe0\xf3\xc5\xbf\x8d\x4f\xe9\xf2\x66\x1d\x53\x36\xfd\x27\x57\xbe\x89\x9c\x48\xf5\x83\x44\x79\x55\x23\x05\xeb\xf9\x96\x12\xd2\x70\xd4\xa8\xb7\x39\x68\x91\x6b\x62\x1a\xbf\xd6\x6d\x8b\x24\xb4\x4a\x8b\x1c\xac\xf0\xf3\x07\x0b\x9b\x35\x1e\x16\x0b\x6b\xc3\xa4\x14\xb7\x2d\x8f\xda\x8b\x6b\xb6\xde\x34\x77\xbb\xd4\x58\x12\x57\x2b\x7c\xc3\x95\xc0\xcf\x17\x8b\xb1\x78\x8f\x20\xac\xf4\xdc\xd5\x15\x8a\x95\x1a\x74\x0e\xc8\x32\x2d\x75\x61\xd9\xde\x57\xbf\xfc\xba\xd7\x6b\x5a\x82\x98\x1b\xd8\x1d\xca\xc2\xe3\x67\xe7\x3d\x80\x4d\x75\x67\x18\x8d\x8e\x83\x05\x31\x35\xaf\x3b\x84\x8e\xb8\xcf\x05\xa5\xa3\xd9\x96\x1b\x68\x22\x89\x63\xc6\xa5\xfa\xef\xfd\xe1\xcb\x57\xef\xae\x9e\xbf\xbe\x7c\xf1\xee\xcd\xc5\x2f\xc7\x48\x24\x73\x21\x89\xd4\x2f\xb9\x20\x71\x47\x25\xfe\x80\x6e\x57\xc0\xa1\xd2\x32\xdb\x1a\x38\xc4\x21\x4e\x53\x89\x6a\xdf\xd2\x1f\x90\x52\x3b\x52\xb1\x39\xc2\x12\xf1\x84\x4a\x12\x81\x57\x1d\x70\xd7\xe7\x00\xd3\xcf\xe1\xb9\xb9\xa3\xab\xea\x9c\x5c\x3f\xf2\x4e\xbd\xd3\xea\x8d\xe9\x61\x76\x87\xa4\x7c\x37\x5a\x7f\xaf\xd1\xc8\x78\x2b\x19\x15\x1e\x15\xd5\x65\xeb\x8a\x19\xba\xb7\xc3\x34\x37\x37\x9d\x7a\x8e\xff\x0e\xcf\x27\xc3\xe9\x54\xe7\xef\x2e\x46\xbf\xe2\xd1\xc7\xd1\xec\xc1\xf0\x7c\x32\x9d\x7a\xa5\xa2\xe3\x3f\x1f\x1f\x9f\xeb\xf2\x07\x85\xf2\xe9\x74\x34\x9d\x7a\xb3\x07\xc7\xe7\xf7\x0b\x9f\x05\x3c\xfa\x74\x74\xf4\xff\x00\x00\x00\xff\xff\x69\x61\x26\x5a\xc7\x52\x00\x00")

func pkgDataPackageManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_pkgDataPackageManifestSchemaJson,
		"pkg/data/package-manifest.schema.json",
	)
}

func pkgDataPackageManifestSchemaJson() (*asset, error) {
	bytes, err := pkgDataPackageManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/data/package-manifest.schema.json", size: 21191, mode: os.FileMode(420), modTime: time.Unix(1494514861, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/data/package-manifest.schema.json": pkgDataPackageManifestSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"package-manifest.schema.json": &bintree{pkgDataPackageManifestSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
