// Code generated by go-bindata.
// sources:
// pkg/data/packageManifest.json
// DO NOT EDIT!

package pkg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgDataPackagemanifestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x73\xdb\xb8\x11\xfe\xae\x5f\x81\xd1\xe5\x83\xd4\x58\x94\xf3\xda\x56\x99\x8e\x27\x93\xbb\x4e\xdd\x69\x93\x4c\x3c\x93\xce\x9c\xe5\x24\x10\xb9\x92\x70\x26\x01\x16\x00\xe5\x38\xd7\xfc\xf7\x0e\x00\xbe\x82\x20\x25\xd2\x74\xe2\xcb\xcb\x97\x58\x00\x76\xb9\xfb\xe0\xc1\x62\xb1\x84\xf4\xfb\x08\xa1\xf1\x3d\xe1\x6f\x21\xc2\xe3\x05\x1a\x6f\xa5\x8c\x17\xf3\xf9\x6f\x82\xd1\x99\x69\xf5\x18\xdf\xcc\x03\x8e\xd7\x72\x76\xfc\x78\x6e\xda\x7e\x1a\x1f\x29\x39\x12\x64\x22\x62\x31\x9f\x63\xee\x6f\xc9\x0e\x3c\x16\x8b\x18\x7c\x8f\xb0\xf9\xb1\xf7\xc0\x7b\x34\x57\x9f\xe6\x31\xf6\x2f\xf1\x06\x66\x11\xa6\x64\x0d\x42\x7a\xa9\x72\xf5\x20\xa3\x4c\x12\x19\x82\xd2\x97\x0e\xfd\x77\x3a\xd2\xf4\x06\x20\x7c\x4e\x62\x49\x18\x55\x63\xb2\x4e\xb4\x66\x1c\x61\x94\x8a\x98\xa1\x31\x67\x31\x70\x49\x40\x8c\x17\x48\xf9\x87\xd0\x98\xe2\x08\xf2\x4f\x75\x75\x2f\x71\x04\x88\xad\x91\xdc\x02\x62\xb1\x56\xa3\x87\xc9\xeb\x58\x9b\x24\x24\x27\x74\x33\xd6\xcd\x9f\x4d\xaf\xa5\xa2\x49\xf3\xcf\xc5\xc7\xae\x0f\x20\x34\x4e\xa4\x28\xeb\xbe\xc7\x61\xad\x46\xff\x34\x0f\x60\x4d\x28\x51\x5a\xc5\x3c\xc6\x1c\x47\x55\x51\x96\xc8\xde\xb2\x3c\xa1\xfb\xe5\x84\x6f\x19\xbb\x03\x2e\xda\x91\x78\x6b\x46\xb8\x50\x68\x78\x06\x44\x6f\x81\xa7\x8f\x19\xa5\x8f\x1a\x73\xf8\x6f\x42\x38\x28\xe6\x9d\x97\xe6\x76\x84\xd0\x85\xee\xc7\x41\xa0\xe5\x71\xf8\xba\xcc\x83\x35\x0e\x05\xa4\x4c\xca\x1f\x51\xf0\x23\x20\xfc\xb5\x86\xa2\x64\x7f\x4e\xc8\xbc\xf3\xa8\x69\x92\x09\x07\x5f\x32\x7e\x8d\x34\x9e\x20\x81\x2b\x37\x31\x75\xce\x35\x5b\xfd\x06\xbe\x2c\xda\x1d\x7c\xcd\x6c\xaa\x34\x34\x0f\x6d\xe1\x63\xde\xed\x62\x5a\xf6\xef\xf3\x91\xad\x6a\x8d\x93\x50\xba\xd4\xd4\xe8\xad\x47\xa2\x1d\x0e\x13\x78\x86\x30\xe2\x10\x62\x49\x76\x80\x62\x2c\xb7\x88\x50\x09\x3c\xe6\x20\x21\x40\x6b\xce\x22\x3d\xf3\x01\xe1\x88\x50\x74\xb5\x25\xfe\x36\xa5\x02\x22\x02\x29\xde\x1d\xdd\xc4\x6a\x22\xce\xc0\xe7\x70\x88\xd9\xa7\xeb\xcc\x92\x74\xde\x88\x40\xc2\x08\x37\x9a\xb0\x62\x2c\x04\x4c\x2d\x1b\x46\x0d\xf6\xb4\xf2\x70\x64\x8b\xe7\xa2\x7b\xe9\xab\x07\xd5\xd6\x00\xca\xf8\x92\x7e\xba\xa8\xac\xcd\x35\x09\xa1\x99\xdd\x45\x6f\x13\xbd\xff\x4e\x42\x18\x94\xd9\xea\x91\x3f\xa8\x7d\xab\xd4\x56\x10\x7f\x13\xac\xd6\x5c\x71\xd2\x9a\x26\xd1\x0a\xf8\x0b\x46\x85\xe4\x98\xd0\xea\x76\x97\xd3\xbb\x3e\xaa\x37\x6d\x71\x18\xbe\x5a\xdb\xbc\xb5\xe0\xff\xe7\xd9\xab\x97\xe8\x4c\xe7\x36\xe8\x5c\x0b\xa0\x4b\xb8\xbe\x62\x3c\xb8\x98\x64\x89\x92\x64\x2c\x14\x1e\x01\xb9\xd6\xb9\xd5\x56\x46\x61\x9a\x60\x7d\xba\x8e\x67\xa5\xd4\x6b\x76\xfc\xf8\x27\x01\xbe\xd2\x3d\x7b\xe2\x3d\x7c\x38\xad\xcc\x63\x6e\x3f\xe6\x1c\x5f\x57\xbb\x88\x84\xc8\xb1\x90\xdc\x1b\x6d\x1d\xa2\x91\x8b\x0b\x25\x26\x8c\x31\xbd\xee\x08\x85\x12\x18\x0e\x8a\x47\x77\x07\x0a\xa0\x49\xd4\x05\x09\x35\x7e\x38\x20\x8e\x6f\x0c\x44\x26\x61\x5c\xdf\xef\xef\x9a\xf1\x08\xdb\x91\x68\xcc\x28\x68\x42\x9c\x57\x94\xd7\x43\x75\xb6\x2c\x55\xf8\xdc\x00\xaf\x07\x26\x0b\xba\x37\x26\x28\x08\x1d\xd4\x8c\x89\x68\x05\x6a\x03\x6a\xd4\x60\x05\xd6\x5a\x7f\x3a\x61\xe7\x56\x3b\x2a\x8c\xb2\x7a\x2e\x1a\x83\xe3\x85\x13\xa1\x08\x7f\x24\x51\x37\x52\xa4\x22\xc3\xf1\xa2\x81\x16\xf6\x24\x57\xcc\x26\xb4\xb3\xd9\x46\x64\x30\xb3\x1f\xf7\x31\x3b\x09\x25\x89\x43\xe8\x16\x8f\x0a\xa9\xc1\x8c\x7f\xd0\xc3\x78\xca\x6a\x2b\xa9\xcd\x6a\xca\xe4\x70\x14\x79\x62\xd9\xdb\x39\x22\x96\x1d\xc9\xd6\xff\xc1\xae\x68\x81\xe1\x9c\x69\x62\xce\x97\xda\x10\x3a\xa5\x3c\x8e\x34\xa6\x39\x3f\x2f\xf7\x37\x65\xe8\x2f\x4d\x60\x1c\x32\x47\x4f\x59\x7b\xe7\xb2\xf4\xdb\x4d\x9b\xd3\x1d\xa6\x77\xe2\x6c\x19\xe0\x3b\x93\xd3\xbc\xbb\x07\xe5\xee\x56\x72\x5e\x0d\x6d\xd5\xf4\x5c\x30\xff\x12\x64\x33\xaf\xcb\xfd\x7b\x59\x6a\xcd\xd6\x99\x96\x6d\xe5\x7b\x13\xaf\xcd\x63\xbf\x12\xaf\xbb\x13\xd2\x98\xfb\x4d\x9c\xe4\x52\xe4\xdd\x64\xd1\xe0\xed\x3b\xcb\xd5\x47\xfd\x38\xcb\xd9\x45\xd3\x1a\x44\xdf\xed\x59\xae\x07\x14\xdf\xca\x59\xae\x1e\x8b\xba\x9c\xe5\xec\x60\x9b\xc4\xc0\x05\x48\x15\x64\x2b\xde\x1b\xe9\x81\xfc\xff\xb3\xe5\x7c\xd7\x03\x65\x80\x25\xcc\x24\x89\x60\xef\x91\xb2\xe2\x43\x2e\x86\x8c\x37\x37\xf5\xc2\x7b\x64\x9f\x03\x5c\x13\xd3\xe1\x4c\x5a\xf8\xd5\x7e\x2a\x3d\x3a\x14\x27\x15\x85\xf9\x8c\x44\x78\x03\x33\xb5\x6e\xf6\xc1\xf5\x1c\x19\x11\xa4\x45\x10\x87\x35\x70\xa0\x3e\x20\x2c\x90\x5e\x6e\x10\xa0\xd5\x35\x3a\xdf\x10\xb9\x4d\x56\x9e\xcf\xa2\xb9\x11\x98\x07\x44\xb9\xbb\x4a\x94\xa6\x79\x2e\x57\x20\xbc\x47\x42\x72\x80\xac\xe3\x81\xf7\xe0\x51\xa1\x62\x58\x80\x6d\x40\x86\xc1\x19\x22\x4c\xc2\x6e\x5c\xd4\x22\xc3\xf1\xf0\xe1\xa0\x30\x19\x7f\x86\xc1\x66\xcb\x84\xd4\x6f\xed\x3a\xc1\x93\x49\x0d\x87\xd0\xa3\x41\x11\xca\xbd\x1a\x06\x24\x12\xef\x1e\x77\x03\x48\x49\x0c\x07\xce\xe3\x41\xc1\xd1\xde\x0c\x06\xcc\xd3\xce\xc0\x3c\x1d\x0e\x98\x27\x43\x03\xf3\x74\x20\x60\x12\x4e\xba\xe1\x92\x70\x32\x1c\x2c\x4f\x07\x85\x45\xf9\x32\x0c\x2a\x02\xa2\xdd\x01\x85\xe6\xe7\x48\x40\x84\xa9\x24\x3e\x4a\xef\x32\xd8\x1b\x9c\x51\xa4\x50\x31\x68\x2d\xe6\xf3\xa2\x69\x3e\xa8\xf7\xa9\xcd\xed\x00\x8c\x5c\x3d\x56\x1d\xfa\x5f\x40\x37\x72\xdb\xb1\xa4\x6b\x84\x06\xcb\x6b\x9f\x36\xa4\xb5\xae\x02\x7e\xa9\x08\xfd\xc0\xed\x53\x66\xde\xd7\xf5\xc9\xce\x56\x0f\xf4\xe9\xf8\xa8\x6a\x72\x56\xe5\x3a\x76\xfa\x7a\xf7\x8b\xc3\x2d\x47\xac\xef\xa1\x38\xdc\xe3\x84\x19\x63\x29\x81\xdb\x85\xa4\x56\x30\x52\x91\xc1\xe0\xf8\x4b\x03\x1a\x8e\x30\x55\x1c\x10\xc7\x1c\x36\xf0\x71\xdc\xb3\x32\xe4\xa8\xf5\xb4\x14\x06\x4b\xfd\x9d\x0b\x83\x5a\xb6\x5f\x61\xd0\xb8\xff\x9d\x15\xbc\x8d\xd6\xaf\x5b\xf0\x6e\x5d\x46\x77\xac\x86\x59\x99\x84\x6a\x0d\x33\xb6\x19\x6d\x21\xfe\xba\xcf\xdb\x19\xb3\xf6\x5f\x37\x70\xf6\x7c\xf6\xde\xc3\xb3\x4f\xcf\x67\xbf\x1e\xcf\xfe\x7a\x71\xbf\xe7\x4b\x79\xf7\xac\xe4\xb7\x1e\x3b\xa5\x5d\x6e\x5d\xc5\x1d\xb3\x01\x94\x95\x5f\x88\x0d\xa0\xae\xfc\x1e\x62\x08\x75\xa5\xe8\x75\x48\xbe\x76\x83\x38\xea\x6f\xdc\xf1\xd3\xdf\xb4\xc4\x47\xac\x32\x5c\x1f\x87\x21\xda\x70\x1c\x6f\x73\x2e\x3e\x43\x02\x00\x65\x5b\x0b\x50\xef\x8a\x5c\x92\x18\x02\x62\x2e\x80\xab\x4f\xf3\x17\x38\x0c\xdf\x6b\xb1\xe2\x01\x75\x8e\xfd\xbe\x3f\x6f\xf0\x19\x95\x98\x50\xe0\x4a\xa3\x33\x67\x38\x40\x09\x8b\x6f\x22\xad\x56\x6b\x18\x42\x78\x13\x1d\x02\x38\xc1\xb6\x06\x67\x6c\xa8\x3a\xec\x9a\xb5\xea\x88\xde\xef\x35\x72\x35\x5d\x36\x32\x3f\x0a\x0e\xd8\x31\x5e\xb0\x28\xc2\x34\x40\x3c\xa1\xea\x3c\x84\x51\xfe\xac\x67\x88\xed\x80\x73\x12\x80\x40\x98\x5e\x23\x01\x12\x61\xa9\xf7\x17\x53\x34\x0c\x61\x07\x8e\x62\x58\x73\x1e\x86\x9a\x73\xb1\x96\xf9\x30\x77\x32\x59\x88\x25\x04\x67\x8e\xed\xb2\xba\x08\x1d\xbb\x30\xe1\xce\x6d\xab\x61\x12\x0a\x6c\x5b\xa3\x74\x3e\xec\xdd\xe4\xdc\x04\xeb\x8b\xc5\xf4\x44\x85\xee\xe5\x72\x5e\x8a\xde\xf7\x9c\x52\x8e\x93\xea\x4a\xb0\x30\x91\x50\xe0\xaf\xef\x9d\xea\x5b\xa9\x11\x8e\x63\x08\x90\x64\x08\xeb\xc6\x1d\xe6\x04\xaf\x42\x40\x8c\x23\x9c\xc9\xa5\xdf\x96\xc8\xa5\x3c\x74\xba\x46\x94\xd5\xda\x51\xcc\xd9\x8e\x04\x10\x1c\xb9\x1e\x75\x45\xc2\x10\xad\x00\x25\x02\x02\xaf\x86\x09\xda\x97\xba\xd4\x67\xa3\x36\x1f\x87\xee\xf0\xae\xa9\x04\xba\x7b\x8b\x6f\x77\x36\xcf\xdf\xfd\xad\xc3\xa4\x51\x04\x74\x47\x38\xa3\x11\x50\x59\xcc\x0b\xa1\xe5\x85\xe4\x86\xb1\x2f\xd9\x6f\x15\x60\xb5\xa5\xff\x31\x17\xcb\xda\x5c\x67\xb7\x56\x8b\x6e\x6d\x5d\x2e\xb9\x9c\xbd\x5e\x0a\x85\xae\x05\x53\xf4\xde\xed\x15\xa3\x23\x75\xaf\x09\xdd\x33\x93\x86\xbd\x87\x4c\xd6\x9b\xfc\xdd\x92\x9a\x12\x6a\x36\x8f\xc1\xd7\x44\x5d\xdf\x38\x4e\xc2\xf0\x34\x00\x2a\x89\xbc\x3e\xd0\xd6\x6c\xb8\x9e\x4d\x65\xaf\xd2\x51\x6c\x79\x5f\xca\xea\xc6\xf3\x9e\xcb\x66\x33\xf8\x4b\x59\xbc\x97\xaa\xce\x23\x56\xa9\xb7\xfe\x2a\x6e\x38\xb6\x5b\x5f\x08\x6c\x42\xac\xfc\xc5\xc0\x52\xba\x43\x99\x84\x05\x92\x5b\x22\xd0\x9a\x40\x18\xa8\xf3\x73\x00\x31\x07\x5f\x21\xe2\xaa\x35\xe7\x7d\x0b\x24\x79\x02\xfb\x6a\xc5\xad\xb6\xc7\x8c\xbb\x8f\xd7\xf6\x81\x53\x8d\x43\x2b\x96\xd0\xd2\x57\x54\x8a\xc0\x24\x99\x6e\xd8\x32\x21\x6f\xd3\xa3\x1b\xee\x03\xe7\x3a\xdc\x4f\x66\xe6\xff\xe9\xc9\x44\xfa\xf1\xff\x92\x20\x9e\x9e\x1c\x48\xfa\x7f\x30\x21\x91\x82\x6c\x22\xa6\xca\xe7\x15\xa1\x8a\xfd\x07\xc5\x5f\xe7\x98\xa2\x84\x57\x33\xee\x8b\x06\x6c\x73\x70\xbd\xcd\x3d\xf8\x7c\xd1\x5c\x5c\xc8\x07\xd5\x4e\x09\x19\xbf\xd2\xab\x6b\x38\x08\x38\x08\x51\xd9\x6c\xd3\xae\x6c\xbb\xbd\x73\x7b\xa1\x90\xc1\x2f\xdc\x3e\x42\x0d\x89\xec\x3b\xef\xe0\x0c\xa6\x04\xa8\x0c\x80\x73\x14\x73\x58\x93\x8f\x55\x3c\x4d\x15\xef\x2e\xe3\xf9\x2a\x69\xad\x6e\x7e\x25\x3c\x59\x22\xff\x88\x78\x5e\x31\x7e\xf9\x73\xed\xeb\xc1\x2e\x6f\xff\xc3\xf8\xa5\x72\x25\x28\x7d\x45\x59\x6e\xd1\xa4\x7a\x60\x2f\xbd\xe6\xd4\xb9\xc0\xfe\x97\x99\xa3\x26\x4f\xab\x15\xda\xc6\x2d\x3e\x4d\x37\x4b\x6d\x17\x43\x94\x76\xdd\x55\xdb\xe2\x7c\x35\xb2\x9e\x75\x78\xb5\x2d\xad\x36\xb9\x4a\x37\x69\x57\xef\x9a\x0d\x8b\xed\x62\x4d\xcb\xaa\x68\x2d\xe4\xb8\x53\xed\x7d\x69\x76\xa9\x10\x5d\xb3\xe0\xa0\xb7\x0e\xf6\x0f\x15\x34\x3d\xf8\x54\xe5\x8f\x38\x24\x9f\x14\xed\x90\xbf\x25\x2a\xcf\x50\xc2\x26\x3d\xc1\x48\x5f\xef\x21\xd4\x24\x2a\x09\xe7\xea\xa8\x2c\x7c\x16\xeb\xc6\xf4\xba\x21\x5b\xa3\x0f\x5a\xf4\x54\x49\xaa\x04\x6d\x91\x8d\x3d\x53\x43\x55\xcb\x07\x7d\x44\xfb\x50\x6b\x56\x59\x0d\x4d\xc2\xf0\xc8\x56\xf1\x21\x3f\x9c\x61\x21\x92\xc8\x95\xf1\x0c\xb5\xa7\xb6\x96\xec\x0b\x4e\x38\x4b\xf7\xd9\x3f\x97\x48\xc5\x48\xe5\x64\x3d\x22\x39\x26\xef\x60\x8d\x4d\x51\x0e\x39\x22\x1d\xaa\x5d\x56\x70\x8d\x1a\x30\x1e\xd6\x7f\xef\x22\xef\x6a\xa5\x60\x33\xdf\x52\x42\x1a\x8e\x1a\xf5\x36\x07\x2d\x72\x2d\xcc\xe0\x57\x7a\x6c\x99\x84\x56\x6b\x99\x83\x35\x7e\xfe\x60\x61\xbb\xc6\xbb\xc5\xc2\x1e\xdb\x9e\x75\xaa\xbd\xc5\x4d\x8f\xc5\x37\xd8\xed\x2a\x6f\x47\x5c\x7b\x5e\x65\x40\xef\x9d\x2f\xd3\xd2\xb4\xff\xdd\xf8\x82\x86\xdf\x74\x09\xfe\x40\x10\x73\x03\xfb\x43\x59\x7a\x49\xe4\x7c\x5b\x57\x74\xf7\x86\xd1\xe8\xb8\xb3\x20\xa6\xe6\xf5\x87\xd0\x51\x6e\x72\x41\xe9\x18\xb6\xe7\x9e\x88\x48\xe2\x98\x71\xa9\xfe\xbc\x37\x39\x7d\xf9\xfe\xec\xc5\xab\xd7\xbf\xbc\x7f\xfb\xfc\xcd\x14\x89\x64\x25\x24\x91\xfa\x2a\x3a\x12\xd7\x54\xe2\x8f\xe8\x6a\x0b\x1c\x6a\x23\xb3\x98\xcd\x21\x0e\xb1\x6f\xb2\x68\xb5\xa1\xe8\x1f\x0e\x51\x5b\x45\x79\x38\xc2\x12\xf1\x84\x4a\x12\x81\x77\xd8\xcf\x40\xa5\x3f\x83\xe4\xe6\x8e\xee\x6a\x72\x72\xf7\xd0\x3b\xf6\x8e\xeb\xf7\x1a\x27\xd9\x9b\xde\xea\x0d\x46\xfd\x3b\x5d\x46\xc6\xdb\xca\x28\x9c\x36\xda\x67\x5f\x4f\x50\x5d\xef\x26\x69\x11\x64\xb9\xf4\x1c\x7f\x4e\x4e\x16\x93\xe5\x52\x17\x4a\x9e\xcf\x7e\xc5\xb3\x4f\xb3\x8b\xfb\x93\x93\xc5\x72\xe9\x55\x9a\xa6\x7f\x9a\x4e\x4f\x74\xfb\xfd\x52\xfb\x72\x39\x5b\x2e\xbd\x8b\xfb\xd3\x93\x7b\xa5\x9f\x83\x1a\x7d\x1e\x8d\xfe\x1f\x00\x00\xff\xff\x3d\xd2\x20\xdb\xbf\x4c\x00\x00")

func pkgDataPackagemanifestJsonBytes() ([]byte, error) {
	return bindataRead(
		_pkgDataPackagemanifestJson,
		"pkg/data/packageManifest.json",
	)
}

func pkgDataPackagemanifestJson() (*asset, error) {
	bytes, err := pkgDataPackagemanifestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/data/packageManifest.json", size: 19647, mode: os.FileMode(420), modTime: time.Unix(1490162950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/data/packageManifest.json": pkgDataPackagemanifestJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"packageManifest.json": &bintree{pkgDataPackagemanifestJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
