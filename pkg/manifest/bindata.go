// Code generated by go-bindata.
// sources:
// github.com/opspec-io/spec/spec/op.yml.schema.json
// DO NOT EDIT!

package manifest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _githubComOpspecIoSpecSpecOpYmlSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xfb\x73\xdc\xb6\x73\xff\x5d\x7f\x05\xe6\xa2\x69\xee\x6a\x1d\x4f\xf2\x43\x4d\x94\xc9\x78\x54\xdb\x69\xdc\x89\x6d\x8d\x5f\x6d\x23\xc9\x31\x8e\xdc\xd3\x21\x22\x09\x06\x00\xf5\x48\xea\xff\xfd\x3b\x00\xf8\x26\xc0\x23\x29\xd2\x96\x5f\x33\xed\x37\x22\x76\x41\xec\x07\x1f\x00\xbb\x0b\x10\xf7\xcf\x16\x42\x93\x6d\xee\xae\x21\xc0\x93\x03\x34\x59\x0b\x11\x1d\x2c\x16\x7f\x72\x1a\xce\xf5\x53\x87\xb2\xb3\x85\xc7\xf0\x4a\xcc\x77\xef\x2f\xf4\xb3\xef\x26\x3b\x4a\x8f\x78\xa9\x0e\x3f\x58\x2c\x68\xc4\x23\x70\x1d\x42\x17\xbb\xce\x9e\xb3\xbf\xa0\x91\x73\x1d\xf8\x4e\x52\x8d\xac\x52\xab\x09\x22\x7c\x90\x8a\x5a\x40\x3f\xf4\x80\xbb\x8c\x44\x82\xd0\x50\x16\x3d\x86\x15\x09\x81\x23\x8c\xa2\xf3\x33\x2d\x11\x31\x1a\x01\x13\x04\xf8\xe4\x00\xc9\x76\x23\x34\x09\x71\x00\xd9\x5f\xf5\x5a\x9e\xe3\x00\x10\x5d\x21\xb1\x86\xac\x1e\x25\x27\xae\x23\xd5\x02\x2e\x18\x09\xcf\x26\xea\xf1\x07\x5d\x5a\xa9\xc3\x56\xf5\xe3\xfc\x4f\xe3\x1b\xb6\x19\xac\xa4\xdc\x77\x0b\x4f\x9a\x42\xa4\x20\x5f\x04\x98\x9d\x7b\xf4\x32\x2c\xbf\x91\x84\x51\x2c\x78\xf1\x65\x66\xed\x08\x33\x1c\x94\x55\x69\x2c\x7a\xeb\xb2\x38\xdc\xac\xc7\xdd\x0a\x3c\x17\xc0\x78\x33\x34\x6f\xb5\x44\x0a\x0b\x8d\x36\xa1\xc2\x21\x78\x0b\xac\x62\x98\x22\x53\xbb\xb7\x1c\x6b\xe1\xd3\x69\x8d\x89\x33\x14\x73\xf0\xd0\xf2\xba\x6d\x07\x95\x9a\xb2\x95\x34\x67\xc2\xe0\xaf\x98\x30\x90\x6c\x3f\x2e\x10\x6f\x0b\xa1\x53\x55\x8e\x3d\x4f\xe9\x63\xff\xa8\x48\xd2\x15\xf6\x39\x24\xec\xce\x5e\x91\x93\x17\x33\x86\xaf\x8f\x54\xbf\x14\xcc\xcc\x46\x47\xa1\x78\xc7\x82\xc1\xa1\x14\x41\xaa\x6b\x41\x00\x93\x58\xe0\xb0\x04\x78\x4a\x74\xba\xfc\x13\x5c\x91\x3f\x37\x0c\xa6\xbc\x4d\xa5\x47\x76\xe1\x86\xd1\x92\x15\xb7\x19\x06\xe9\xbf\x0f\x3b\xd5\xaa\x57\x38\xf6\x85\xa9\xda\xd4\x2c\xdd\xdc\xc6\x5a\x08\x7f\x05\x2e\x03\x63\x35\x15\x38\x9f\x6a\xc2\xaa\x4a\x11\xe1\x88\x6b\xc5\x1d\xdb\xdb\x97\x94\xfa\x80\x37\x58\xe1\xd2\x90\x0b\x86\x49\x28\xea\xe8\x59\x01\x52\x4d\x78\x54\xd0\x2c\xbf\x62\xcb\xf2\xba\x46\x22\x6e\x55\xd5\x33\xd5\x8d\xfc\x55\x42\xb5\x41\x80\x72\xc2\x24\x7f\x9f\x96\x86\x70\xcd\x08\x2b\xcb\x8b\x42\xfd\xa9\x9b\x19\xf1\x54\x40\x50\x05\xbb\xda\xd7\xff\xfd\xea\xc5\x73\xf4\x4a\x2d\x4d\xe8\xb8\xa2\x8a\xce\xe1\xfa\x92\x32\x2f\x9f\x50\x04\xa5\x3e\x77\x08\x88\x95\x5a\x0e\xd7\x22\xf0\x93\x35\xf1\x92\x91\xb3\xb5\x98\x17\x16\xcc\xf9\x05\xf6\x89\x87\x65\x7d\xf3\xdd\xbd\xef\x38\xb8\xea\x3f\xf7\x9d\xbd\xdd\x59\x89\x4b\x96\xbe\x97\x76\x1b\xbb\xbe\xd0\xd5\x13\xd2\xd5\x44\x32\xa2\x61\x3f\x56\xec\xa2\x21\xbc\x58\x95\x68\x22\xff\xb5\xa4\xbe\xd5\xfc\x1a\xdb\x0d\x55\x9a\x60\xe9\xff\xb6\xf2\x48\x2b\xff\x75\x6a\xec\x96\x00\x5f\x75\x26\x5f\xaa\x33\x60\xe7\xec\x66\x9d\xf3\xa0\xce\xba\x74\x5c\x91\x50\xc0\x19\xb0\x72\x61\x40\x42\x12\xc4\x72\x41\xda\x35\x1b\x48\xc2\xee\x06\x26\x3a\x63\x19\xb8\x37\xa4\x81\x71\x48\xfe\x8a\xa1\xb3\x8d\x05\xb5\xb1\x66\x8f\x7b\x16\x33\x6b\xab\x50\xb7\xf9\xbd\x34\x65\x27\x75\xd9\x9d\x92\x92\x80\xcd\x2d\xf9\x4f\x2d\x34\xa8\x63\x92\x5a\x79\xeb\x5d\x93\x7a\x20\x23\x25\xd1\x05\xf6\x63\xe8\xea\x4a\xdc\xa2\x75\xbe\xd2\xc0\xf2\x4a\xef\x11\x66\xa7\x4c\x56\x68\xa3\xcb\x63\xc2\xc0\x15\x94\x0d\xeb\xc9\x7a\x84\x7d\xde\x64\xf9\x49\x22\x80\x97\x9c\xfa\xb1\x00\x14\x61\xb1\x46\x2b\x46\x03\xc4\x28\x15\x12\x9f\xe8\xfc\x0c\x51\x86\x18\xf8\x58\x90\x8b\x44\x42\xce\x79\x2c\x62\x20\xc0\xd3\xd2\xd2\xa1\xf5\x08\x43\x24\x44\x97\x6b\xe2\xae\x93\x90\x4c\xba\xb7\x32\xfe\xb3\x12\xb2\x18\x19\xdb\x0c\xeb\xee\x5a\x7b\x59\x57\xf7\x76\xaf\x6f\xd1\x98\x90\x14\x33\x8e\x87\x15\xf1\xc1\x3e\x20\xf2\x52\xdb\x88\xf8\x85\xf8\x30\xe8\x60\x90\xaf\xfc\x36\x1a\x6e\xdb\x68\x90\xbd\xf2\x45\x0c\x04\x45\x2f\xe3\x48\x88\x62\xdf\x7f\xc4\xc0\x2b\x07\x7f\x16\xf6\x56\x50\x92\x7a\x10\x0a\x82\x7d\xae\xd3\x38\x5e\x2c\x7b\x01\xe1\x58\xac\xe5\x73\x57\x79\x49\xe8\x92\x08\xdd\x8f\x9c\xc6\xcc\x85\x64\xb4\x90\x00\x9f\x81\x64\x44\x29\xe9\x63\x1b\x1f\x31\x07\x56\xc9\x25\x9a\x5a\x04\x57\x11\x03\xae\xd2\x4e\x2e\x05\xe6\x92\xa5\x0f\x48\x50\xa4\xe9\x61\x58\xe3\x2d\x23\x25\xaf\xc7\x1c\xdd\x45\x98\x73\xe9\x42\x7e\xca\xe6\xd4\xf8\x61\xee\xfa\x0c\x39\x53\xf3\x53\x4a\x74\x77\x44\xc3\x38\x58\x02\xdb\x94\x3c\xa8\x4b\xf5\xcf\x1e\xf8\xbe\x8a\x59\xdb\xe7\x0c\xa4\xc2\x48\x21\xcd\xdd\xbb\x16\x5f\x5f\x67\x5b\x4a\x45\xe6\x90\xd7\xd2\xd3\x75\xc0\x8a\xb3\x88\x91\x8b\x38\xbc\xee\x08\x8c\x54\x18\x0b\x18\x5b\x10\xf4\x09\x80\x81\x30\x0e\xba\xe0\x22\xe5\xc7\x82\xc5\x16\xe3\xb7\x87\x25\xd5\xd0\x40\x6c\xb6\x7e\x45\x59\x80\xab\x6b\x5d\xdb\xcc\x4f\x36\x80\x4d\x21\xba\x09\xc8\x97\x7a\xee\xe1\x6a\x9e\xd7\x4d\x44\x4b\x50\xf3\xbc\xad\x86\xca\xd2\x5d\x2b\x4f\xba\xef\xb8\xf2\x1c\xe5\x8d\xaa\x94\x9c\x5a\x97\x5f\x6b\x2e\x28\xc9\x34\x74\x49\x05\x49\x95\xb1\x58\x62\x21\x49\xb5\xcb\x2b\xf9\x9e\xce\x46\x68\x95\x91\x8c\xb8\xdf\xc7\x88\xd8\x17\x24\xf2\xa1\xdb\x3c\x96\x6b\x8d\x95\xb8\xea\x61\x4a\x48\x6b\x63\xae\xc9\x86\x90\x8a\xb1\xc8\xf4\xa0\x55\x32\xbb\x61\x5e\x2d\x9a\x95\xce\x1b\xad\x0d\x53\x0a\x63\x99\x66\xe3\xd8\xc7\x5a\x64\x3a\xb9\xe6\x06\xb7\xc9\x1e\x7a\x16\xcb\x6d\x6e\xf7\x73\x3d\xbd\x0e\x19\x7e\x26\x8c\xbe\xf5\x01\xa8\x7d\x11\x1c\x22\xdc\x4b\xd6\xad\x4f\xba\xb1\xd8\x48\xc1\xdb\x15\x54\x96\x3b\xa1\x1c\x56\x6a\xe2\x6d\x0a\x0f\xea\x52\x03\x6c\x2e\x1e\xd9\x58\xdb\x72\x87\x31\xd7\xef\x32\x7d\xad\x71\xe8\x31\xb8\xe4\x2d\x26\xb0\x7d\xe7\x81\xb3\xdf\x6f\x47\xae\x0b\xff\x06\xd9\xce\xdb\xe8\x44\x7d\x1d\x61\x59\x9d\xa8\xdf\xc2\xb2\xbe\xc0\x78\x10\x41\xe8\x41\xe8\x76\x1c\xa1\x45\xbd\xb1\x1c\xbe\xcf\x62\xa3\xbc\x29\xe7\xd9\x7d\x47\xfc\x8b\x8c\x92\xab\x41\xe3\x24\x8c\x7d\xbf\xbe\x9c\x27\x8b\x4b\xe9\xf1\xe9\x46\x02\x07\xf8\xaa\xdf\x1a\x53\x52\x1c\x8b\xc2\xb6\x91\xde\xf7\x34\x41\x4f\x53\x8b\x8a\x63\x99\x6a\x0b\x03\x7a\x99\xfa\xb9\x05\x6e\x0d\x33\xef\xd7\x17\xb8\xf5\x58\x86\xac\xc1\x4d\x23\x3a\xd1\xe8\xa4\xae\x7a\x86\x16\x47\x18\xb5\x74\x7a\xfb\xac\x4e\x16\xc0\xb0\x10\xc0\x7a\xce\x07\x35\xe5\xb1\xe0\xfb\x8f\xdb\x0a\x5f\x21\x86\x6a\x8d\x5a\xaa\x33\x16\x58\xd5\x99\xa6\x7f\x56\xba\xee\x8b\x0c\x92\x2e\xd1\xbd\x66\x4f\x97\x14\xcb\x6d\xe9\x92\x17\x4a\x66\xd0\x74\x49\x22\xf7\xd9\xa4\x4b\x4c\x7e\xce\xcd\xd3\x25\xba\xd6\x4f\x9b\x2e\x69\x9c\xf8\x6f\x57\xba\xa4\xdc\x09\xe5\x74\x09\xa7\xee\x39\x34\xf0\xbc\x58\xbe\x91\xb5\x95\xde\x7a\xa5\x74\x1b\xf9\x6f\xe3\xb9\x7e\xed\x2d\xe1\x79\x77\x82\xea\xe6\x7f\x11\x07\x38\x92\x9e\x30\x93\x47\xcd\xbd\x9b\x72\x6d\x75\xa9\x6f\x5b\xf1\xc9\x63\xcb\x97\x46\x35\xc0\x36\xae\xf1\x5f\x47\xce\xa7\x07\x30\x5f\x64\x92\xa1\xd9\xe9\xd9\xb8\x15\x5f\x9d\xa6\xe3\x08\x18\x07\x75\x56\xae\x84\x85\xd6\x1e\x05\x8d\xaa\xb3\xdc\xf5\x74\x80\x87\x05\xcc\x05\x09\x0c\xe7\xa6\x1b\x33\x79\xa9\x1a\xd2\xb6\x0d\x6b\x93\x73\xaf\xba\x71\x6b\xea\xb4\x0e\xc7\x0d\x72\x2b\x2b\x65\xa7\x4d\xeb\x55\x03\x6a\x72\x2e\x67\x73\x75\x00\x6e\x2e\x47\xd8\x26\xf0\x0e\x91\x56\x49\xce\xcc\x31\x58\x01\x83\xd0\x05\x84\x39\x52\x03\x53\x7f\x41\x79\x7c\x46\xc4\x3a\x5e\x3a\x2e\x0d\x16\x5a\x61\xe1\x11\x69\xee\x32\x96\x35\x2d\x32\xbd\x1c\xef\x0d\x1a\x82\x01\xa4\x05\x7b\xce\xde\xbd\xbc\x8a\x61\x01\xae\x02\x32\x0c\xce\x10\x60\x62\x48\xfa\x35\xce\x3b\x52\x65\x2c\x56\xde\x1d\x14\x34\x6d\xdd\x30\x48\xad\x29\x17\x95\x33\x82\x2d\xc0\x4a\xb5\xc6\xc2\xeb\xde\xa0\x78\x65\x36\x0e\x03\x19\x89\x2e\xee\x77\x83\x4b\x6a\x8c\x05\xd5\xfd\x41\xa1\x52\xb6\x0d\x06\xd3\x7e\x67\x98\xf6\xc7\x82\xe9\xc1\xd0\x30\xed\x0f\x04\x53\xcc\x48\x37\x94\x62\x46\xc6\x02\x69\x7f\x50\x90\xa4\x65\xc3\x60\xc4\x21\xb8\x68\x71\x12\xf1\x10\x71\x08\x70\x28\x88\x8b\x92\x9b\x10\xaa\xcb\xa4\xae\x48\x62\xa4\xb1\x3b\x58\x2c\xf2\x47\x8b\x41\xad\x4f\xda\xdc\x0c\xc0\x96\xa9\xa4\xb2\xe1\xf4\x1b\x84\x67\x62\xdd\x71\xb3\x49\x2b\x8d\xe4\x47\xdb\xf2\xd4\x1b\x36\x5f\xf6\xcc\x16\x92\xb0\x87\x85\xa9\xd2\x48\x16\xda\x52\xc9\x9b\xb6\x97\x76\xca\x06\xa4\xd9\xb9\x2f\x63\xdb\xa9\x21\xf8\xfb\xfa\xb6\x9d\x7a\x44\xc2\xc9\x46\x48\x8f\xbd\x93\x91\xc0\xf9\xc1\x82\x8d\x61\xb2\xcb\x03\xd9\x09\x83\x33\xb8\x1a\xe4\x8b\x66\xfd\x9e\x86\xd4\x67\xa1\xbc\x73\xea\x53\x7f\x67\xd3\x2b\xf5\xa9\xcd\xbf\x1d\xa9\xcf\x16\x29\xfe\x71\x3e\x80\x4b\x3e\x54\xfa\xa4\x29\xfe\xc6\x41\x76\xcb\xb2\xb4\xa5\x4e\xa8\x7c\x68\x57\x65\x78\x05\xf1\xa3\x3e\xfb\x53\x8d\x5b\xb2\x93\xe3\xf9\x1f\x0e\x9e\xff\x7d\x38\xff\x7d\x77\xfe\xe3\xe9\x9d\x9e\xdf\x82\x34\x5c\x80\x73\x94\xdf\x59\x65\xe9\xf2\x96\xb5\x95\x6e\x2d\x18\xa0\xbe\xec\x93\xf6\x01\xea\xca\xbf\x06\x1e\xa0\xb2\xe2\xf9\xee\x01\xaa\x2b\xee\x7f\x0e\x50\x5d\x71\x9b\x69\x88\xea\x0a\x53\x77\x1b\x97\xb7\xff\x22\x52\xdd\x8d\x37\x2d\x24\x55\x19\xdb\xa2\x91\x0f\x44\xd7\x24\x9d\xe6\xf8\xf3\x51\x33\xd4\x0a\xd1\x7c\xf8\x31\x2b\x1b\x74\xfd\xdf\x6f\x93\x2b\x6d\x9c\xd3\x53\x7c\x3b\x99\xa3\x94\x6e\x9b\x21\x5a\xb6\x9b\x1d\xd7\xd1\xb0\x66\x3c\x70\xee\x36\xd8\x71\x9c\x7a\xac\x99\x45\x8d\xb1\xf4\xe4\x92\x11\x01\x2f\x42\xbf\x7a\x61\xdc\x46\xbb\x32\xc5\x81\x8f\xbe\xef\xed\x36\x66\xf5\x36\x6f\xc3\x9a\x7c\xea\x7f\x36\x47\x2d\xf6\xeb\xda\xba\xd5\xd3\xee\x6b\xa9\x16\x15\xb5\x3b\xbd\xd7\xa2\xa2\xa6\x78\xcc\xe8\x87\x70\xf7\xcc\xec\x67\xbb\x67\xd6\x29\xf1\xf8\x95\xc0\x82\xb8\xc8\xc5\xbe\x8f\xce\x18\x8e\xd6\x39\x2f\x20\x74\x2e\xc9\x39\x89\xc0\x23\xfa\x2a\x52\xf9\xd7\xe2\x11\xf6\xfd\x3f\x94\xe4\xcc\xe0\xcf\xd4\x3d\x8f\x16\x96\xba\x34\x14\x98\x84\xc0\x64\xdd\xbd\x71\x8f\x6e\xa2\x2d\x7d\x38\xdf\x07\xff\x26\x75\x70\x60\x04\x57\x6b\x30\xf6\x54\xd9\x60\x53\x9f\x95\x25\x7a\xef\xe7\x67\xd5\x74\x09\x77\xdc\xa0\x7a\x94\xcd\xc4\x9c\x47\x34\x08\x70\xe8\x21\x16\x87\x68\x79\x8d\x30\xca\xde\xf5\x13\xa2\x17\xc0\x18\xf1\x80\x23\x1c\x5e\x23\x0e\x02\x61\xa1\xa2\x0e\xbd\xcd\xe5\xc3\x05\x18\xb6\x6f\xec\xb1\x3b\xb2\xc7\xef\xa6\xa6\x75\xbe\x9c\xa1\xb1\x5b\x4d\x57\x34\x94\x3b\x37\xf9\xab\x1a\xda\x11\x66\x8c\x85\x1a\xce\x2d\x9a\x8c\x49\xaf\x68\x22\xc0\x11\x09\x15\x8a\x79\xaf\xd6\x94\x37\x1d\xe5\x4c\xc4\xde\x4d\x8f\x75\xf8\x70\x7a\x30\x7b\x28\x83\x89\x93\x93\x45\x21\x9e\xd8\x36\x6a\x59\x03\x8b\xf4\x9f\x49\xc5\x64\xd2\xf4\x92\xf8\x3e\x5a\x02\x5a\xd2\x38\xf4\x54\xcf\xe0\x20\xbb\x37\x06\x45\xe7\x67\xf5\x95\xa4\x06\x9f\x3a\xf7\x6f\x14\xfa\x60\xd6\x6d\xdb\x3a\x1b\x7b\x3c\xc2\x34\x75\xd0\xbf\x2d\x28\x43\xdc\xa5\x91\xda\xb1\x55\xed\x07\x81\xe2\x88\x86\x08\xae\x48\xbd\x4b\xb3\x37\x75\x25\x58\x62\x8f\xe1\xe9\x69\xed\x59\x55\xaa\x86\x42\xbb\xa8\xd9\xa0\x3a\x81\xf0\xe2\x2d\x1e\x84\xcc\x4f\xc2\x0b\xc2\x68\x18\x40\x28\xd0\x05\x66\x04\x2f\xfd\x41\x69\x7d\xfc\xee\xe7\x4f\xc0\x5e\x12\x16\xd8\x70\xb9\xd0\x6c\x0e\x71\x60\xd8\x4b\xaf\x01\xf7\xd1\x69\xbc\x61\x12\x4c\x2a\xfb\x4c\x99\x2a\x23\xfa\x21\x78\xfa\x0b\x19\x96\x97\xdf\xa6\x5b\x6b\xeb\x6c\x3c\x55\x37\x74\x7d\x9d\xf3\xad\xf2\x92\xfa\xb0\xb8\xc1\xab\x43\x3a\xb7\x59\xdd\xb9\xc9\x8a\x6a\xb7\xbe\xa4\x27\x91\x04\xcd\xee\xf4\x32\x02\xdd\x03\x64\x03\x63\x8c\xb7\x95\xb5\x78\x4d\xae\xd6\xa3\x83\x8c\xa9\xde\x12\x58\x95\xa7\xa7\xc3\xf5\xb1\xe1\xca\x33\x64\xe8\x07\xf5\x33\x0a\xa5\x49\x08\xb9\x38\x94\x83\x39\x3b\xb0\xa5\xb6\xbe\xd5\x15\x7b\x54\xac\x75\x6e\x4b\x4b\xf2\x9b\x65\x4d\x22\xca\xcc\xc9\xfc\x6a\x56\x4d\xca\x25\x73\x4b\x76\xd3\x5f\xde\x5c\x41\xd5\x83\x35\xe5\x0d\x7b\x0c\x56\x42\xb7\x9b\x5f\x8f\xd5\x34\x3a\x9d\xeb\xff\x9d\x3d\x9c\x0a\x37\xfa\xff\xd8\x8b\x66\x0f\x5b\xd2\xfd\x57\xca\x05\x92\x06\x4f\xf9\x4c\xb6\x78\x49\xd4\x44\x69\x26\xfc\x86\x43\x03\xc5\x86\xab\x10\xbb\xd2\xb8\x3e\x4c\xed\x4d\x33\x9d\xf7\xed\xb5\x24\xb6\xc5\xfe\xc0\xbe\x11\x91\x09\xd5\x62\xc7\x94\x1d\xc9\x41\x7e\xec\x79\x72\xb6\x40\x01\x8e\x22\x50\x4b\x14\x4e\x8b\x4c\xc7\x28\xd1\x26\x2e\x8f\x8d\xaa\xf0\x9e\xb0\x6a\x4c\x3d\x24\xa8\xef\x1c\xbb\x53\x60\xc7\x52\x78\xc0\x18\x8a\x18\xac\xc8\x55\x19\x4a\xed\xf3\x8d\x08\xa5\x07\x11\x03\x17\x0b\x35\x99\x0a\x16\xc3\xa0\x60\xbf\x88\xdb\x7c\x04\xf5\xb1\xc1\xa6\xb1\xf8\xe2\xc0\xbe\xa4\xec\xfc\x71\xed\xfa\x66\x13\x14\xff\x43\xd9\xb9\xb4\xd3\x2b\x5c\x21\x2d\xd6\x68\x5a\xce\xfd\x14\x4e\x67\x29\x17\xa2\x6b\x26\x7f\xcb\xd2\x54\xfb\xda\x9d\x78\x4f\x85\x67\xa7\x43\xec\x1d\x9b\xb7\x85\xf3\xd0\x60\xab\xf2\xae\x0e\x5f\x42\x46\xd6\x2c\x60\x52\xd4\x3b\xfd\x47\xa3\x6a\xde\xaf\xe9\xa3\xd9\xa6\x9c\x60\x74\x5e\x3d\x31\xb1\xa9\xba\x4d\x55\xa2\x9b\x38\xa4\xa5\xab\x65\x8d\x2d\x6a\x5a\x9c\xf3\xc3\x2e\x31\x23\xf3\xcc\x91\xfa\xe6\xa8\x1a\xde\x5e\xff\x85\xac\xac\xa4\x7a\xb0\x44\x9a\x8a\x7d\xf2\x37\x70\xf4\xf4\xf9\xd1\x9b\xd7\x7f\x3c\x3f\x7c\xf6\x44\xbb\x84\x6f\x0f\x7f\x7b\xf3\x44\x06\x9b\xc9\x27\x2f\xdf\xe7\x02\x07\xba\xf0\x7b\x07\x3d\x5d\xa5\x72\x1c\xc9\x70\x73\x07\x11\x81\x9e\xbd\x79\xf5\x5a\xdd\x37\xc9\x79\x1c\x80\x97\x48\xfc\x8c\xb6\xa7\x79\x15\x0d\x93\xca\x4d\x9d\x9b\xc6\x73\x16\x99\x58\xcf\x38\x7d\xf8\xd8\xfa\x33\x0d\x78\xeb\x3f\xa5\x96\x15\x35\x90\x2c\xa7\xd7\x8b\x37\xaf\x33\xbe\x15\x48\xa6\xe9\x55\x28\xd4\x24\x2b\x49\x37\x50\x4d\x09\x48\xa6\x15\x14\xbe\x51\xad\x5a\xa3\xcd\x8d\x41\x9f\x84\x58\x3d\xfc\x05\xb9\x94\x7c\x1c\x6f\x81\x46\x37\x70\x13\x4a\x3b\x94\x26\x67\xa1\x24\xd0\xdb\x65\x48\x6b\xb1\x39\x0e\x37\x3e\x58\xeb\xb6\xbe\x4b\xc2\x0c\x62\xd6\xc0\xfe\x50\x16\x36\x6a\x8d\xfb\xe5\x79\x71\x6f\x18\x75\x1d\xb7\x16\xc4\xa4\x79\xfd\x21\x2c\x2c\x29\x26\x08\x0b\xc5\xb6\x93\x07\x87\xa1\xfe\xb5\xbf\x9d\xe4\x72\xce\x9d\xe4\xd6\x89\x1d\x44\x59\x12\x43\x39\x48\x1f\xf3\xe5\xd9\xd4\xac\x7f\x55\x82\xfa\x32\xf6\x41\x58\x20\x16\x87\x82\x04\xb0\x83\x18\x44\x3e\x76\x65\x3c\xb2\x3d\x7d\xf2\xbf\x47\x2f\x67\xe9\x0f\x4f\x32\xe0\xb1\xaf\x3e\xbd\x85\x0b\xec\xc7\x58\x48\x19\xba\x42\x52\xc8\x51\xff\x3f\x9f\xf7\x0b\xdf\x5f\xbe\xdf\x9e\xaa\xe9\xfe\xfd\x4e\xe9\x71\xd2\xdd\xd7\x08\xbb\x2e\x70\x4e\x59\x2a\xe8\x1c\xbd\x7c\x71\xf4\xe4\xe5\xeb\xff\x93\x1a\x05\x79\x19\x12\x65\xb2\x5a\x74\x71\x74\xf8\xfa\xd7\x99\x32\x13\xeb\xdf\xd0\xa8\x4a\x69\x09\x34\xbd\x5c\x03\x03\xe4\x03\xf6\x64\xa3\xdf\x2f\xde\x67\x4d\x4d\x6c\x91\x20\xf0\xec\x77\x38\x68\x84\x96\x71\xe8\xf9\x30\x73\xd0\x73\xe0\xca\xd2\x38\x92\xfe\x32\x0d\x93\x4d\xf7\xac\x02\x1e\x47\x11\x65\x02\xbc\x1d\x44\x1c\x70\xe4\x4b\xb7\xa7\x6a\xcb\x6a\x56\x23\x7d\xe1\x6c\x52\x72\x31\xe8\x4e\x3e\x10\x2a\xe7\x95\xf2\x21\xa6\x7e\xcc\xd3\x3c\xbc\x54\x91\xf5\x44\xca\xc5\x5d\x67\xd7\xd9\xad\x7d\xeb\x63\xfa\xa2\x87\x47\xe0\x2e\xb4\xbc\xb3\x16\x81\x5f\x6f\x7b\x35\x0e\x28\x26\xe6\xde\x4d\x93\x94\xdc\xc9\x89\x63\xf8\xcf\xe9\xc3\x83\xe9\xc9\x89\x4a\xdb\x1d\xce\x7f\xc7\xf3\xbf\xe7\xa7\x77\xa6\x0f\x0f\x4e\x4e\x9c\xd2\xa3\xd9\xbf\xcf\x66\x0f\xd5\xf3\x3b\x85\xe7\x27\x27\xf3\x93\x13\xe7\xf4\xce\xec\xe1\xf6\xa4\x04\x4c\x76\x2c\xdc\x04\x4d\x56\x68\x03\xe7\x59\x22\x20\xbd\x9c\xe3\x8b\x5d\xe7\xee\x0f\xe8\x11\x0d\x02\x1a\xca\x02\xc4\xaf\x43\x81\xaf\x72\xa0\x22\x70\x1d\x57\x15\xcb\x8a\x15\x62\x52\x65\x31\x43\x24\x74\xfd\x58\xb1\xea\xbf\x7e\x79\x86\x04\x5e\xfa\x80\xe0\x4a\x40\x58\x1e\xb2\xc6\xdf\xea\xdd\x92\xff\xf7\xe1\x5f\x01\x00\x00\xff\xff\x72\x1d\x22\x50\xbe\x78\x00\x00")

func githubComOpspecIoSpecSpecOpYmlSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_githubComOpspecIoSpecSpecOpYmlSchemaJson,
		"github.com/opspec-io/spec/spec/op.yml.schema.json",
	)
}

func githubComOpspecIoSpecSpecOpYmlSchemaJson() (*asset, error) {
	bytes, err := githubComOpspecIoSpecSpecOpYmlSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "github.com/opspec-io/spec/spec/op.yml.schema.json", size: 30910, mode: os.FileMode(420), modTime: time.Unix(1520958804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github.com/opspec-io/spec/spec/op.yml.schema.json": githubComOpspecIoSpecSpecOpYmlSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"github.com": &bintree{nil, map[string]*bintree{
		"opspec-io": &bintree{nil, map[string]*bintree{
			"spec": &bintree{nil, map[string]*bintree{
				"spec": &bintree{nil, map[string]*bintree{
					"op.yml.schema.json": &bintree{githubComOpspecIoSpecSpecOpYmlSchemaJson, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
