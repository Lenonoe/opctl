// Code generated by go-bindata.
// sources:
// github.com/opspec-io/spec/spec/pkg-manifest.schema.json
// DO NOT EDIT!

package manifest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _githubComOpspecIoSpecSpecPkgManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7b\x73\xdb\x36\x12\xff\xdf\x9f\x02\xa3\x66\xa6\xf2\xc5\x92\x9c\x47\x73\x57\x77\x3a\x1e\x4f\x9a\xce\xe5\xa6\x4d\x32\x97\x26\x37\x53\x5b\xe9\x40\xe4\x4a\x42\x4d\x12\x2c\x00\xca\x71\xef\xf2\xdd\x6f\x00\x50\x7c\x80\x00\x45\x52\x64\xad\xbc\xfe\x89\x4d\x60\x17\xd8\x1f\x16\x8b\xc5\x2e\x00\xff\xf7\x08\xa1\xd1\x3d\xee\xad\x21\xc4\xa3\x33\x34\x5a\x0b\x11\x9f\xcd\x66\xbf\x73\x1a\x4d\xf4\xd7\x29\x65\xab\x99\xcf\xf0\x52\x4c\x4e\x1f\xcf\xf4\xb7\xaf\x46\x27\x92\x4e\x10\x11\x80\xa4\x8a\xb1\x77\x8d\x57\xf0\x33\x8e\xc8\x12\xb8\xd0\xa5\x3e\x70\x8f\x91\x58\x10\x1a\xc9\x3a\xdb\x42\xb4\xa4\x0c\x61\x94\x92\xe8\xaa\x31\xa3\x31\x30\x41\x80\x8f\xce\x90\xec\x12\x42\xa3\x08\x87\x90\xfd\x56\x65\xf7\x02\x87\x80\xe8\x12\x89\x35\x20\x1a\x2b\x36\xaa\x9a\xb8\x8d\x55\x97\xb8\x60\x24\x5a\x8d\xd4\xe7\x0f\xba\xd4\x60\xe1\xe2\xfc\x43\xfe\x6b\xdb\x06\x48\x14\x27\x82\x17\x79\xdf\x63\xb0\x94\xb5\xbf\x9a\xf9\xb0\x24\x11\x91\x5c\xf9\x2c\xc6\x0c\x87\x65\x52\x9a\x88\xce\xb4\x2c\x89\x76\xd3\x71\xcf\xe8\xec\x06\x18\xaf\x47\xe2\xad\xae\x61\x43\xc1\xd1\x06\x84\x6f\x81\xa5\xcd\x1c\xa5\x4d\x8d\x18\xfc\x91\x10\x06\xfe\xe8\x0c\x5d\x16\xc6\xf6\x08\xa1\xb9\x2a\xc7\xbe\xaf\xe8\x71\xf0\xaa\xa8\x07\x4b\x1c\x70\x48\x35\x29\x6b\x22\xd7\x0f\xcc\x18\xbe\x7d\xa5\xc0\x28\x48\x90\xa9\x64\xa1\xf8\xc4\x21\xde\x85\xac\x82\x14\x9e\x20\x80\x49\x31\x71\x64\x1d\x6b\xc5\x2c\xff\x6c\x51\xd7\xbc\x4b\xa5\x4f\xee\xca\x35\x0a\x99\x15\xdb\x54\x6d\xfb\xef\xc3\x89\xc9\x6a\x89\x93\x40\xd4\xb1\xd1\xdd\xab\xe5\x42\xf8\x6b\xf0\x18\x58\xd9\x18\xe8\x3d\xd7\x4a\xa1\x98\x22\xc2\x11\xd7\x84\x27\xae\xd6\x17\x94\x06\x80\xa3\xfa\xf6\x3d\x1a\x71\xc1\x30\x89\x44\x15\x2d\xa7\xd6\xa9\x2e\x3c\x2d\x50\x96\x9b\x38\x72\x34\x57\xab\x77\x47\x26\x79\x46\xba\x53\x5d\x55\xa5\x8a\xce\xa3\x5c\x41\xd2\xdf\xe7\xa5\xd9\x58\x11\xc2\xa9\xd4\xc5\x4a\x5d\x35\x35\xc4\xef\x9f\x0b\x08\x4d\x90\xcd\x31\xfe\xd7\xeb\x97\x2f\xd0\x6b\x65\xf2\xd1\xe5\x96\x06\x5d\xc3\xed\x0d\x65\xfe\x7c\x2c\x17\x0b\x7e\x36\x9b\x09\x4a\x03\x3e\x25\x20\x96\x6a\xb1\x58\x8b\x30\x48\x57\x8c\x1b\x46\x56\x6b\x31\x29\x2c\x27\x93\x0d\x0e\x88\x8f\x65\x0b\x93\xd3\xd3\xaf\x38\x78\xea\xc7\x6f\xa6\x0f\x4e\x8f\x4b\xca\x93\x89\x44\x22\x01\x2b\x60\xe5\xc2\x90\x44\x24\x4c\xe4\xd4\x3f\x3d\xb2\x8c\xae\x2c\x6f\x2f\x60\x4a\x33\x94\x80\x0f\xfa\x14\x90\xb4\x95\x8e\xf4\x2c\xda\x83\x4c\xb4\x27\xd3\x6f\x0d\xc9\x68\x04\x2f\x97\x25\xd5\x97\xff\x1a\x4e\x67\x09\x8b\x7b\x36\x9f\xd4\xb3\xb4\xc1\xd2\xbd\xb5\xb2\xf5\x28\xff\x36\xb7\x0e\x4b\x6e\x1c\x5a\xab\x9f\x41\x3a\xd0\x50\x55\xa6\x59\x4b\x58\x8a\xc2\x26\x11\xf9\x23\x81\xd6\x82\x16\xc8\x86\x12\xf2\x91\x63\xaa\x55\x16\xa1\x76\xe6\xbd\xec\x4d\x12\xe6\x76\x3f\xb2\x42\x97\xf3\xf1\x03\x61\xe0\x09\xca\x9a\x39\x20\x74\xf1\x3b\x78\x62\xb7\x5d\xf7\x09\x3b\x3c\xff\xa3\xe2\x5f\xab\x9a\x68\x83\x83\x04\xbe\x93\x12\xe3\x05\xa7\x41\x22\x00\xc5\x58\xac\xd1\x92\xd1\x10\x31\x4a\x85\xc4\x23\xbe\x5e\x21\xca\x10\x83\x00\x0b\xb2\x49\x6b\x48\x83\xc9\x62\x06\x02\x7c\x5d\x5b\x3a\x22\x3e\x61\x88\x44\xe8\x66\x4d\xbc\x75\xea\xae\x4a\xb7\x44\xfa\xc6\x4e\x9f\xa4\x89\x60\xed\x5d\x22\x3f\x1b\xda\xce\x6e\xd1\x01\xf9\x2c\x52\xa5\xac\x1e\xcb\x92\x04\xe0\x9e\x00\x79\xa9\x6b\x06\xfc\x48\x02\xe8\x55\xf9\x65\x93\x5f\xb4\xff\xae\xb5\x5f\x8e\xc2\x27\xa1\xf8\x4a\x9d\xac\x9a\x1f\x27\x41\xf0\x94\x81\x5f\x76\xd2\x1d\xda\x6a\xa0\x24\xe9\x20\x12\x04\x07\x1c\x25\x1c\x7c\xe4\x27\x72\x14\x10\x4e\xc4\x5a\x7e\xf7\xd4\x72\x86\x6e\x88\xd0\xe3\xc8\x69\xc2\x3c\x48\x67\x07\x09\xf1\x0a\xa4\x46\x14\xa3\x27\xa8\x6e\x4e\x24\x1c\x98\x11\x49\x41\xee\x55\x5f\xab\x16\x0d\xb0\x00\xff\xb5\xa1\x1d\xc5\x85\x3f\xc6\x9c\xcb\x65\xbb\x07\xae\x95\x11\xb3\x0f\x46\x26\x87\xad\x17\xdb\x41\x6a\xbf\x86\x47\x49\xb8\x00\xb6\x6b\xdb\x55\xad\xd5\xd9\x46\xe1\x20\x50\x9e\x71\x73\xaf\x50\x12\x0c\xb4\x23\x79\xf8\xd0\xe1\x26\x95\x77\x91\xc8\xed\x58\x3b\x46\xbc\x0a\x58\x71\x5e\xdb\x1d\xe7\xe8\xb6\x25\x30\x92\x60\x28\x60\x5c\xfe\xe3\x1d\x00\x03\x51\x12\xb6\xc1\x45\xd6\x1f\x0a\x16\xd7\x16\xbd\x39\x2c\x5b\x0a\x0d\xc4\x6e\xe9\x97\x94\x85\xd8\x5c\x7d\x9a\xee\x2f\xb3\x09\x6c\xdb\x61\xdb\x80\xfc\xb7\xb6\x3d\x5c\x59\x5e\xdd\x45\xb4\x00\x65\x79\x5d\x1c\x8c\xc5\xb4\x52\x9e\x0e\xdf\x65\x75\x3f\xba\x65\x69\x94\xcc\x5b\xee\x38\x43\xfc\x3e\x0d\x14\xb4\x89\xe4\x48\x92\xa1\xb4\xc4\xa1\x24\xe6\x90\x1b\xe1\x9a\xd6\x42\x68\x92\x81\x84\x78\xdc\x45\x88\x24\x10\x24\x0e\xa0\x9d\x1d\xcb\xa9\x86\x8a\x3b\x75\x10\x25\xa2\x95\x39\x57\x27\x43\x44\xc5\x50\xca\xf4\x4d\xa3\x70\x45\x8d\x5d\x2d\x8a\xb5\xb5\x1b\x8d\x05\x53\x04\x43\x89\xe6\xd2\xb1\xbf\x6a\x91\x69\xe5\x2c\x5b\xdc\x26\xf7\xe6\xaf\x58\xee\x72\x84\x5f\x68\xf3\xda\xe7\x06\x30\xd5\xe8\x83\xdb\x02\xba\x17\xbd\x3e\x36\x5c\xe9\x3a\x75\xa7\x29\x98\x5a\x95\x3b\xac\x6d\x5d\x79\x10\xca\x1b\x3b\xad\x68\xbb\xb6\x03\xd5\x5a\x9d\x35\x36\xc4\xef\x5f\xb9\xd4\x73\xd7\x12\x9e\x13\x0e\xb5\x70\xb8\xbc\xe0\xae\x19\x99\x8e\xa2\x16\x09\x87\x12\xd5\x65\x8b\x3b\x89\x5a\x50\xbc\xc6\x52\x6e\x69\x86\x12\xd0\x5c\x47\xbb\xbb\xee\x55\x63\x68\x77\xdd\x9d\x76\xb7\x16\x87\x78\xf0\xa1\x7e\xe2\x40\xc2\x98\xb3\xa8\xc6\xce\x34\x5a\x86\x6b\x32\x4b\x0e\xc0\xb0\x10\xc0\x3a\xce\x92\x0a\xf1\x50\xf0\xfd\xfd\x50\xe1\x6b\xd0\x58\xc3\xfc\xdb\xf0\x20\xfe\xa3\x5b\xc2\xb4\xcd\x42\xde\x4b\xb6\x75\xe7\xee\xd3\x87\x18\x22\x1f\x22\xaf\x25\xd8\x45\xba\xa1\x40\xfe\x28\xb2\xd2\x75\x2e\x66\xfb\xf4\xf3\x27\x19\x2c\x32\x63\x27\xa3\x28\x09\x82\xaa\x97\x9b\x1a\xa0\xd2\xe7\xf9\x6e\xab\xf1\x59\x04\x64\xab\x2e\xeb\x6e\x60\x3e\x8b\x80\x6c\x07\x60\x3e\x8f\x20\x42\x07\x60\x3e\xb6\xa0\x51\x8d\x88\x7b\xc4\x46\x34\x57\x77\x6c\xa4\x58\xee\x8a\x8d\xbc\x54\x75\x7a\x8d\x8d\xa4\xf5\x0e\x36\x36\x62\xb3\xde\xfb\xc7\x46\x34\xd7\xbb\x8d\x8d\xd4\xce\xa4\xc3\x8a\x8d\x94\x07\xa1\x1c\x1b\xe1\xd4\xbb\x86\x1a\xbd\x2e\x96\xef\xd4\x52\x63\xb4\x5e\x2b\xda\x5a\x7d\x77\xe9\xb5\x6e\xf6\x8e\xf4\xba\xbd\x42\xea\xee\x7e\x12\xe7\x23\x52\xe4\xed\xca\xa2\xc0\xdb\x15\x48\xab\xd6\xfa\x92\x57\x4f\x3f\x3b\xee\x57\x54\x00\xfb\xe2\xc6\x75\x05\xe6\x93\xdc\x2a\x35\x0e\xce\xd9\xf3\xea\xa6\x59\x4e\x62\x60\x1c\xd4\x51\xb4\x12\x16\x9a\x7a\x10\x34\xcc\xf0\x52\xdb\x54\xbf\x8f\x05\x4c\x04\x29\x9d\x14\x6a\x30\xba\x19\x19\xd2\xb2\xf5\x2b\xd3\xf4\x91\x99\x85\xb5\x0d\x5a\x8b\xb3\x03\xb9\x94\x46\xd9\xbc\x6e\xbd\xaa\x41\x4d\xda\x72\x36\x51\xe7\xcb\x26\x72\x86\xed\x02\xef\x02\x69\x92\xf4\x48\x1a\x83\x25\x30\x88\x3c\x40\x98\x23\x35\x31\xc1\x47\x8b\x5b\x74\xb9\x22\x62\x9d\x2c\xa6\x1e\x0d\x67\x9a\x60\xe6\x13\x29\xee\x22\x91\x9c\x66\x19\x5d\x8e\xf7\x0e\x0a\xc1\x00\xb6\x05\x0f\xa6\x0f\x1e\xe5\x2c\xfa\x05\xd8\x04\xa4\x1f\x9c\x21\xc4\xc4\x12\xba\xa8\xb5\x3b\x92\x64\x28\xad\x7c\xd8\x2b\x68\x5a\xba\x7e\x90\x5a\x53\x2e\x8c\x03\x7f\x0d\xc0\xda\x52\x0d\x85\xd7\xa3\x5e\xf1\xca\x64\xec\x07\x32\x12\x6f\x1e\xb7\x83\x4b\x52\x0c\x05\xd5\xe3\x5e\xa1\x52\xb2\xf5\x06\xd3\x93\xd6\x30\x3d\x19\x0a\xa6\x6f\xfa\x86\xe9\x49\x4f\x30\x25\x8c\xb4\x43\x29\x61\x64\x28\x90\x9e\xf4\x0a\x92\x94\xac\x1f\x8c\x38\x84\x9b\x06\xc7\x0a\x2f\x10\x87\x10\x47\x82\x78\x28\xbd\x74\x6d\x2e\x93\x9a\x91\xc4\x48\x63\x77\x36\x9b\xe5\x9f\x66\xbd\x4a\x9f\xf6\xb9\x1e\x80\x23\x5b\x89\x71\xea\xf0\x27\x88\x56\x62\xdd\x32\x93\xaf\x89\x06\xf2\xa3\x5d\x99\xdd\x1d\x49\xfc\x07\x76\x09\xb7\x9d\x3d\x24\x09\x5d\xc9\xd7\x5d\xc7\x14\x4e\xca\x02\x6c\xa3\x71\xf6\xe3\x0b\x1f\x5b\x1c\xb7\x66\xf3\xf7\xf9\xc5\xed\x3b\xec\x84\xd3\xa3\x03\x1d\x4e\x1b\x0c\x04\x8e\x99\x1d\xaf\x31\x76\xf9\x46\x76\xc4\x60\x05\xef\x7b\x09\xe1\xeb\x76\x6a\x42\x9d\x85\xf2\xd6\xa1\x4e\x45\xdb\x2d\xd4\xa9\xc5\x3f\xd8\x10\xfe\x40\x11\x53\x0d\xd8\x9d\x86\xf0\x6b\x27\xd5\x81\x45\x65\x4b\x83\x60\xdc\x5b\x33\x35\xda\x40\xfc\x55\x97\x7c\x53\xed\xa1\xa5\xd1\xe5\xe4\xb7\x29\x9e\xfc\x79\x31\xf9\xf5\x74\xf2\xed\xfc\x7e\xc7\x8b\x1c\x35\xef\x7e\xbc\xca\x9f\xc3\x71\x0c\x79\x43\x6e\xd9\x8d\xed\x1e\x78\xe5\x97\x5f\x7b\x60\x56\x3c\x4c\xdd\x03\xbb\x62\xfe\xb1\x07\x76\xc5\xb4\x4f\x1f\xec\x0a\xa6\xb5\x89\x4b\xda\xdd\xc8\x9b\x07\x7a\x6c\x86\xde\xac\xe3\x32\xea\xf9\xc4\xf1\x6c\xb5\xab\x5a\xde\xe0\xd6\xa4\xfb\x55\x9b\x02\xb2\x0d\xf8\x34\xbb\x1a\xd1\x80\x51\x5d\xba\xbc\x15\xa3\x3a\x7f\xcd\x6a\xb7\xb8\xb7\xb2\xaf\xc3\xde\xaa\x66\x9d\xc5\x72\xbf\xe5\xe1\x20\x40\x2b\x86\xe3\x75\x66\xd3\xbe\x43\x1c\x00\x6d\x1d\x16\x88\xa6\x37\xe4\x9a\xc4\xe0\x13\xfd\xd4\x99\xfc\x6d\xf6\x14\x07\xc1\x6f\x8a\x6c\xcf\x51\xf4\x68\x24\x30\x89\x80\x49\x8e\x9d\x91\x8f\xf7\xa1\x96\x56\x3f\x08\x20\xd8\x87\x07\x07\x46\xb0\xc9\xc1\x3a\x56\x65\x81\x6d\xa3\x56\xae\xd1\x39\xe3\x97\xb1\x69\xe3\x10\x79\xa1\x79\x28\xdb\xa6\x3b\x4f\x69\x18\xe2\xc8\x47\x2c\x89\xe4\xee\x1c\xa3\xac\xad\xef\x10\xdd\x00\x63\xc4\x07\x8e\x70\x74\x8b\x38\x08\x84\x85\xf2\x53\x74\x20\x3c\x80\x0d\x58\x02\xbc\x6e\xef\x1e\xb9\x3d\xfc\x9a\xf1\xa8\xbb\x52\x5d\x1e\x9d\xca\x68\x6b\x81\x09\xb3\xba\x3f\x35\x87\x79\x6d\x40\x6d\x1f\x31\x21\xc0\x11\x89\x14\x0c\xf9\xb0\x54\x88\x77\x9d\x6f\x4e\xab\xbd\x1b\x5f\x6a\x8f\x61\x7e\x76\x7c\x2e\xfd\x87\xab\xab\x59\xc1\x85\xb8\x67\xa5\x72\xfa\x12\xdb\x7f\x36\x12\x9b\x48\xe3\x1b\x12\x04\x68\x01\x68\x41\x93\xc8\x47\x82\x22\x8e\xc3\xec\xe5\x85\xed\xc5\xfb\x6a\x44\xa6\x02\xa1\x3a\xa4\x68\xad\xf4\xc1\x4e\xdb\xb4\x87\x3e\x61\x88\xc1\x52\x3f\x03\x50\xea\xd5\xee\x4e\xd9\x4f\x99\xa6\xdd\xb2\x7c\x9d\x57\xbe\x99\xb5\x2a\xc2\x34\xf3\x79\x2d\xa4\x23\x88\x36\x6f\x71\x2f\x7a\xf9\x2c\xda\x10\x46\xa3\x10\x22\x81\x36\x98\x11\xbc\x08\x7a\xd5\xd0\xcb\x77\xdf\xdf\x81\x22\x92\x08\x71\x8f\xc6\x2a\xdb\x86\x6e\x66\x5a\x31\x23\x1c\xde\xa9\x36\x6a\x8d\x4a\xbd\x8c\xad\x5e\xa6\x7b\x36\xf5\xc6\x89\xbb\x6f\x5d\x4d\x5b\xda\xef\xbb\x56\x57\xe9\xe4\xf7\xa1\xac\x3f\x92\x7e\x95\xf3\x8b\xf9\xac\xed\xa1\x1c\xb6\x99\x55\x6b\x3f\x2d\x6b\xaa\xfc\x91\x2e\xea\x59\xe3\x3f\x21\x1d\x77\x30\xa3\xa8\x59\x51\xe5\x39\x85\xed\xa9\x00\x41\xb3\xe7\x6b\xac\xb0\xee\x61\x0b\x2c\xea\x60\x7d\xa0\xa7\x41\x73\x39\x59\x87\x81\xb2\x86\x63\x4a\xa0\x19\x5f\xe7\xfd\x8d\xb5\xe5\x85\x1f\x64\x19\x0f\xf5\x66\x72\xc9\xca\x20\x0f\x47\x72\xb6\x66\x87\x28\x54\x3a\x4a\xbd\x2a\x45\xc5\x5a\xef\x67\x75\x4d\xbe\xdf\x3b\x52\x31\x65\xf6\x80\x9b\xb9\x93\x96\xf5\x52\xe3\x91\x3d\x6e\x95\x77\x57\x50\xf5\x61\x4d\x79\x4d\x1c\xd0\xa9\xd8\xcd\x0c\xe8\xa5\xb2\x93\xe3\x89\xfe\xff\xf8\x7c\x2c\xbc\xf8\x7f\x89\x1f\x1f\x9f\x37\x54\xfb\x7f\x52\x2e\x90\x14\x78\xcc\x8f\x65\x8f\x17\x44\x59\x42\xbb\xe2\xef\x48\xe4\xa1\x72\x80\xbe\xd2\xb9\x2e\x9a\xda\x59\xcd\x74\xac\xa7\xd3\x9a\xd7\x14\xfb\x33\x77\xb0\x30\xab\x54\xd9\xad\x6d\xb5\x23\x3d\x5c\x8b\x7d\x9f\x01\xe7\x28\xc4\x71\x0c\x6a\x0d\xc2\xdb\x22\xdb\xd1\x26\xd4\xc4\xa4\x0f\x89\xaa\xf0\x9f\x31\x73\x17\xdb\x27\xa8\xef\xa6\xee\x55\xdf\x8d\xa5\xf0\x81\x31\x14\x33\x58\x92\xf7\x65\x28\xb5\x73\x77\xa0\x50\xbe\x4c\x9a\x5c\x33\xf8\xab\xa1\xa4\x89\xf8\xc8\xa0\xbc\xa1\xec\xfa\x87\xca\x6b\xa2\x36\x41\xff\x43\xd9\xb5\x94\xc2\x2f\xbc\x68\x2a\xd6\x68\x5c\x8e\x94\x14\x4e\x3b\x28\x37\x60\xf7\x99\x86\x23\x97\xa4\xe5\x14\x8b\x73\xdd\x4d\x3d\xa0\xc2\xb7\x79\x1f\xb9\x19\x7b\xda\x25\xf7\xdb\x8f\x8c\xb6\x5a\xdc\x1c\x8a\x9d\x31\xb3\xb4\xa8\x73\xb0\x8c\xc6\x66\x94\xac\xee\xda\x76\x5d\x04\x2d\xbe\x36\x33\x90\xbb\xd8\xed\x62\x89\xf6\x71\x2a\x91\xec\x4f\xe7\x85\x35\x4f\x1e\x27\x8c\x4c\x32\x27\xe8\x8b\x93\x69\x69\xbd\xfa\xc7\x2d\xb2\x12\x33\x71\x2b\x45\xc5\x01\xf9\x13\x38\x7a\xfe\xe2\xd5\x9b\x5f\x7e\x7b\x71\xf1\xf3\x33\xed\xce\xbd\xbd\xf8\xe9\xcd\x33\xb9\xc9\x4a\x8f\x90\x7f\x9d\x57\x38\xd3\x85\x5f\x4f\xd1\xf3\xe5\xb6\x1e\x47\x72\x1f\x78\x82\x88\x40\x3f\xbf\x79\xfd\x8b\x7a\x8c\x8d\xf3\x24\x04\x3f\xad\xf1\x3d\xba\x37\xce\x59\xd4\x18\x95\x7d\x1d\x93\xda\x3c\x66\x56\xad\xe3\x26\xba\xff\x4d\xef\x9e\xb1\x95\x96\xad\xd5\x3d\x70\xb4\x2f\x4f\xdb\xc5\xc0\x8c\xe7\x5d\x6f\xb2\xab\x7f\xb5\x25\x2b\xaa\x99\x14\xf9\x74\x78\xf9\xe6\x97\x6c\x7e\x14\x26\x85\x9e\x0e\x85\x42\x3d\x29\x4a\xb5\x6b\xa6\x86\xaa\x20\x67\x46\x81\xe0\xcb\xd4\x30\x39\x1e\x56\xf4\xc6\xe9\xdf\x34\x3c\x22\x51\xbf\x32\xc8\x55\xd2\x5c\x19\xea\x14\xbb\x25\xfb\xdd\x17\x24\xfe\x1a\x2f\x8c\xc6\x7b\xb8\x5f\xa5\x3c\xa9\xcd\x09\x2b\x55\xe8\xec\x8a\x6d\xb9\xb8\x1c\xb2\xbd\x0f\x00\x7a\xae\xeb\x5f\x0d\x41\xcc\x3a\xd8\x1d\xca\x42\xba\xd8\x9a\xb7\xcf\x8b\x3b\xc3\xa8\x79\x1c\x2c\x88\x69\xf7\xba\x43\x68\x59\xaa\x6d\x50\x5a\xaa\xb9\x4f\x44\xa8\xcd\x26\x4f\xe2\x98\x32\x21\x7f\xbc\x37\x56\x2b\x03\xe2\xc9\x82\x0b\x22\xd4\x05\x2b\xc4\x6f\x23\x81\xdf\xa3\x9b\x35\x30\xc8\x6a\x6c\xa3\xfa\x0c\xe2\x00\xa7\x51\x42\xb1\x06\x9d\xe1\x41\x74\xa9\x97\x1c\x2c\x10\x4b\xa2\xd2\xe5\xbb\xda\x3f\x97\x96\xfe\xb9\x30\xbb\x8a\xa8\x22\x97\x2c\x9b\x87\xd3\xd3\xe9\x69\xf5\x58\xfd\x78\x7b\xb4\xa3\x7c\x80\x9e\xc7\xe0\xcd\x34\xcd\x74\x2d\xc2\xe0\xd8\xd9\x3f\xf3\x5c\x9b\x2c\x7a\x37\x4e\xa3\x6d\x57\x57\x53\xcb\x8f\xe3\xf3\xb3\xf1\xd5\x95\x8a\xc8\x5d\x4c\x7e\xc5\x93\x3f\x27\xf3\xfb\xe3\xf3\xb3\xab\xab\x69\xe9\xd3\xf1\xdf\x8e\x8f\xcf\xd5\xf7\xfb\x85\xef\x57\x57\x93\xab\xab\xe9\xfc\xfe\xf1\xf9\xbd\xc2\x9f\x4d\x3b\xfa\x70\x74\xf4\xff\x00\x00\x00\xff\xff\x7d\x9a\xc9\x3c\x9a\x6f\x00\x00")

func githubComOpspecIoSpecSpecPkgManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_githubComOpspecIoSpecSpecPkgManifestSchemaJson,
		"github.com/opspec-io/spec/spec/pkg-manifest.schema.json",
	)
}

func githubComOpspecIoSpecSpecPkgManifestSchemaJson() (*asset, error) {
	bytes, err := githubComOpspecIoSpecSpecPkgManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "github.com/opspec-io/spec/spec/pkg-manifest.schema.json", size: 28570, mode: os.FileMode(420), modTime: time.Unix(1506344578, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github.com/opspec-io/spec/spec/pkg-manifest.schema.json": githubComOpspecIoSpecSpecPkgManifestSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"github.com": &bintree{nil, map[string]*bintree{
		"opspec-io": &bintree{nil, map[string]*bintree{
			"spec": &bintree{nil, map[string]*bintree{
				"spec": &bintree{nil, map[string]*bintree{
					"pkg-manifest.schema.json": &bintree{githubComOpspecIoSpecSpecPkgManifestSchemaJson, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
