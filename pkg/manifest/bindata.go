// Code generated by go-bindata.
// sources:
// github.com/opspec-io/spec/spec/pkg-manifest.schema.json
// DO NOT EDIT!

package manifest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _githubComOpspecIoSpecSpecPkgManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x6f\xdb\x38\xf2\x7f\x9f\x4f\x41\x78\x03\xac\xf3\x6f\x6c\xa7\x8f\xff\xdb\x14\x8b\x20\xe8\x76\x71\x3d\x6c\x1f\x70\x69\x7b\xc0\xc6\x6e\x41\x4b\x63\x9b\x1b\x49\xd4\x91\x94\xd3\xf4\xae\xdf\xfd\x40\x52\x92\x25\x8a\x92\x25\x59\x6a\xdc\x36\x7d\xd3\x44\xe4\x8c\x38\x3f\x0e\x67\x86\xc3\x11\xf3\x9f\x03\x84\x06\x87\xdc\x59\x81\x8f\x07\xa7\x68\xb0\x12\x22\x3c\x9d\x4c\xfe\xe2\x34\x18\xe9\xa7\x63\xca\x96\x13\x97\xe1\x85\x18\x9d\x3c\x9a\xe8\x67\x3f\x0d\x8e\x25\x9d\x20\xc2\x03\x49\x15\x62\xe7\x0a\x2f\xe1\x25\x0e\xc8\x02\xb8\xd0\xad\x2e\x70\x87\x91\x50\x10\x1a\xc8\x3e\x49\x23\x5a\x50\x86\x30\x8a\x49\x74\xd7\x90\xd1\x10\x98\x20\xc0\x07\xa7\x48\x0e\x09\xa1\x41\x80\x7d\x48\x7f\x2b\xb2\x7b\x85\x7d\x40\x74\x81\xc4\x0a\x10\x0d\x15\x1b\xd5\x4d\xdc\x84\x6a\x48\x5c\x30\x12\x2c\x07\xea\xf1\x17\xdd\x6a\xb0\x28\xe3\xfc\xdb\xe6\xd7\xa6\x2f\x20\x41\x18\x09\x9e\xe5\x7d\xc8\x60\x21\x7b\xff\x34\x71\x61\x41\x02\x22\xb9\xf2\x49\x88\x19\xf6\xf3\xa4\x34\x12\xad\x69\x59\x14\x6c\xa7\xe3\x8e\x31\xd8\x35\x30\x5e\x8d\xc4\x7b\xdd\xc3\x86\x42\xc9\x3b\xc0\x7f\x0f\x2c\x7e\xcd\x41\xfc\xaa\x01\x83\x7f\x47\x84\x81\x3b\x38\x45\x97\x99\xb9\x3d\x40\x68\xa6\xda\xb1\xeb\x2a\x7a\xec\xbd\xc9\xea\xc1\x02\x7b\x1c\x62\x4d\x4a\x5f\xb1\xd1\x0f\x97\xb0\x37\x0a\x8a\xcc\xf8\x53\x85\x4c\x1b\x8f\xcb\x26\x99\x30\x70\x04\x65\x37\x48\xe1\x09\x02\x98\x14\x13\x07\xd6\xb9\xa6\xf3\xbf\xc0\x11\x9b\xe7\x16\x7d\x4d\xc6\x94\x7b\x50\xde\xb5\x42\x1f\xd3\x66\x9b\xa6\x25\xff\xbe\x1c\x9b\xac\x16\x38\xf2\x84\x8d\x4d\x41\xbd\x55\x4f\xb4\xc6\x5e\x04\x4f\xa5\xc4\x78\xce\xa9\x17\x09\x40\x21\x16\x2b\xb4\x60\xd4\x47\x8c\x52\x21\xf1\x08\xaf\x96\x88\x32\xc4\xc0\xc3\x82\xac\xe3\x1e\x24\x10\xc0\x42\x06\x02\x5c\xdd\x5b\x2a\x87\x4b\x18\x22\x01\xba\x5e\x11\x67\x15\x6b\x0b\x22\x1c\x49\xd5\x3c\xde\x45\x30\xc2\x2f\xc0\x61\x50\x47\xb2\x17\x8b\x64\x24\xf1\xd4\x12\x8e\xb8\x26\x2e\x1d\xc2\x9c\x52\x0f\x70\x60\x8c\xe1\xa0\x64\x3c\x95\xaa\x7a\x60\x92\xa7\xa4\x5b\x35\x5c\x75\x2a\x2c\x13\x94\xa8\x54\xfc\xdb\x2c\xb7\x7c\x17\xc4\x83\xf2\x05\xb0\x69\x2d\x5b\x01\xbf\x13\x0f\x3a\x55\x7e\xf9\xca\x3b\xed\xbf\x6d\xed\x97\xb3\xf0\x5d\x28\xbe\x52\x27\xab\xe6\x87\x91\xe7\x3d\x63\xe0\xe6\x9c\x65\x99\xb6\x1a\x28\x49\x3a\x08\x04\xc1\x1e\x47\x11\x07\x17\xb9\x91\x9c\x05\x84\x23\xb1\x92\xcf\x1d\xac\xfc\xfe\x35\x11\x7a\x1e\x39\x8d\x98\x03\xf1\xea\x20\x3e\x5e\x82\xd4\x88\x6c\xf0\x82\xaa\xd6\x44\xc4\x81\x19\x81\x0c\x2a\x77\x9f\x5a\xb5\xa8\x87\x05\xb8\x17\x86\x76\x64\xa6\x63\x10\x62\xce\xaf\x29\x73\x3b\xe0\x5a\x98\x31\xfb\x64\xa4\x72\xd8\x46\x91\x4c\x52\xad\x59\xcf\xcd\x64\x10\xf9\x73\x60\xcf\x68\xc0\x05\xc3\x24\xc8\x87\x3f\xa9\x2d\x2b\xf6\x6a\x6d\xa3\xb0\xe7\xbd\x5e\x98\xb0\x19\x2a\xf2\x8f\x8b\xd7\xaf\xd0\x85\x8a\x73\xd1\xa5\x22\x40\x57\x70\x23\x25\x9d\x0d\x65\x78\xcc\x4f\x27\x13\x41\xa9\xc7\xc7\x04\xc4\x42\x85\xc7\x2b\xe1\x7b\x71\x8c\x7c\xcd\xc8\x72\x25\x46\x99\x00\x7a\xb4\xc6\x1e\x71\x95\x5e\x8d\x4e\x4e\x7e\xe2\xe0\xa8\x1f\x1f\x8f\x1f\x3c\x38\xca\xad\xcf\x54\x1a\xcc\x18\xbe\xc9\x37\x11\x01\xbe\xc5\x86\xda\x67\xbc\x08\x58\x76\x5d\x5b\x55\x0a\x07\x37\x0d\x81\x91\x04\x7d\x01\xf3\x70\x7f\x80\x81\x20\xf2\x9b\xe0\x22\xfb\xf7\x05\xcb\xc9\xce\xb0\x24\x14\x1a\x88\xed\xd2\x2f\x28\xf3\xb1\xe9\x7d\x06\x34\x00\xa5\x2c\x97\x39\xe6\x45\x0f\x9e\x2c\x60\x69\x81\x96\xc0\x8a\xce\xc8\x00\xf2\x9f\xda\xf6\x70\x65\x79\xf5\x10\xd1\x1c\x94\xe5\x2d\xe3\x60\x38\xd3\x42\x7b\x3c\x7d\x97\xc6\x73\xb4\x19\x94\xd1\x32\x2b\x75\x88\x33\x2b\x42\x3e\xfe\x44\xfc\x66\x2a\x12\x93\xf4\xa5\x25\x25\x4a\x62\x4e\x79\x4e\x08\x12\x34\x16\x42\x93\xf4\x24\xc4\xa3\x36\x42\x44\x9e\x20\xa1\x07\xcd\xec\xd8\x86\xaa\x27\x51\xee\xb7\x10\x25\xa0\x85\x35\x57\x25\x43\x40\x45\x5f\xca\xf4\xd8\x18\x7d\x63\xbb\x9a\x15\x2b\xb1\x1b\xb5\x05\x53\x04\x7d\x89\x56\xa6\x63\x5f\xcb\xc9\x34\x0a\x96\x2d\x61\x53\xf9\xe6\x2f\xdb\x5e\x16\x08\xbf\xd2\xe6\xb5\xcb\x0d\x60\xac\xd1\x7b\xb7\x05\x2c\x77\x7a\x5d\x6c\xb8\x62\x3f\xd5\x7a\xcb\x65\x0c\xc0\xb1\x06\xc3\x69\x73\x0b\x95\xdb\xaf\x6d\x5d\x7e\x12\xf2\x1b\x3b\xad\x68\xdb\xb6\x03\xc5\x5e\xad\x35\xd6\xc7\x9f\xde\x94\xa9\xe7\x36\x17\xbe\x21\xec\xcb\x71\x94\x45\xc1\xb6\x60\x28\xe3\xc2\x4f\xca\x5c\x7c\x4b\x51\xb3\x84\x7d\x89\x5a\x66\x8b\x5b\x89\x9a\x51\xbc\xda\x52\x26\x34\x7d\x09\x68\xfa\xd1\xf6\xa1\x7b\xd1\x18\xda\x43\xf7\x52\xbb\x5b\x89\x43\xd8\xfb\x54\x3f\x29\x41\xc2\x58\xb3\xa8\xc2\xce\xd4\x72\xc3\x92\x6f\xa3\x9d\x5e\x88\x85\x00\xd6\x72\x95\x14\x88\xfb\x82\xef\xff\xf7\x15\xbe\x1a\x2f\xab\x4e\x28\x58\xe8\xfb\x02\xf1\x6f\x06\x88\x75\x37\xb4\x0d\x1c\x79\x4d\xcf\x5d\x01\x73\x9d\xdd\xa7\x0b\x21\x04\x2e\x04\x4e\x43\xb0\xb3\x74\x7d\x81\xfc\x4b\x3b\x90\xdb\xe0\xb4\x05\x7a\xbb\x45\x45\xdb\x42\xcc\xfc\x04\xd4\x99\x8e\xef\x32\x59\x64\xe6\x4e\x06\x41\xe4\x79\xc5\x28\x37\x36\x40\xb9\xc7\xb3\xed\x56\xe3\x87\x48\xc8\x16\x43\xd6\xed\xc0\xfc\x10\x09\xd9\x16\xc0\xfc\x18\x49\x84\x16\xc0\x7c\x6b\x49\xa3\x0a\x11\x77\xc8\x8d\x68\xae\xe5\xb9\x91\x6c\x7b\x59\x6e\xe4\xb5\xea\xd3\x69\x6e\x24\xee\xb7\xb7\xb9\x11\x9b\xf5\xde\x3d\x37\xa2\xb9\xde\x6e\x6e\xa4\x72\x25\xed\x57\x6e\x24\x3f\x09\xf9\xdc\x08\xa7\xce\x15\x54\xe8\x75\xb6\x7d\xab\x96\x1a\xb3\x75\xa1\x68\x2b\xf5\xbd\x4c\xaf\xf5\x6b\x6f\x49\xaf\x9b\x2b\xa4\x1e\xee\x77\x51\x1f\x11\x23\x6f\x57\x16\x05\xde\xb6\x44\x5a\xb1\xd7\xdd\xb9\x7a\xfc\xb8\xa4\xbc\xb1\x00\xd8\x5d\x18\xd7\x16\x98\xef\x72\xab\x54\x3b\x39\x67\x3f\x57\x37\xcd\x72\x14\x02\xe3\xa0\x4a\xd1\x72\x58\x68\xea\x5e\xd0\x30\xd3\x4b\x4d\x8f\xfa\x5d\x2c\x60\x24\x48\xae\x52\xa8\xc6\xec\xa6\x64\x48\xcb\xd6\xad\x4c\xe3\x87\xe6\x29\xac\x6d\xd2\x1a\xd4\x0e\x6c\xa4\x34\xda\x66\x55\xfe\xaa\x02\x35\x69\xcb\xd9\x48\xd5\x97\x8d\xe4\x0a\xdb\x06\xde\x39\xd2\x24\x71\x49\x1a\x83\x05\x30\x08\x1c\x40\x98\x23\xb5\x30\xc1\x45\xf3\x1b\x74\xb9\x24\x62\x15\xcd\xc7\x0e\xf5\x27\x9a\x60\xe2\x12\x29\xee\x3c\x92\x9c\x26\x29\xdd\x06\xef\x2d\x14\x82\x01\x24\x0d\xf7\xc7\xf7\x1f\x6e\x58\x74\x0b\xb0\x09\x48\x37\x38\x83\x8f\x89\x25\x75\x51\x69\x77\x24\x49\x5f\x5a\xf9\xa0\x53\xd0\xb4\x74\xdd\x20\xb5\xa2\x5c\x18\x05\x7f\x35\xc0\x4a\xa8\xfa\xc2\xeb\x61\xa7\x78\xa5\x32\x76\x03\x19\x09\xd7\x8f\x9a\xc1\x25\x29\xfa\x82\xea\x51\xa7\x50\x29\xd9\x3a\x83\xe9\x49\x63\x98\x9e\xf4\x05\xd3\xe3\xae\x61\x7a\xd2\x11\x4c\x11\x23\xcd\x50\x8a\x18\xe9\x0b\xa4\x27\x9d\x82\x24\x25\xeb\x06\x23\x0e\xfe\xba\x46\x59\xe1\x39\xe2\xe0\xe3\x40\x10\x07\xc5\xdf\x3c\x99\x6e\x52\x33\x92\x18\x69\xec\x4e\x27\x93\xcd\xa3\x49\xa7\xd2\xc7\x63\xae\x06\xe0\xc0\xd6\x62\x54\x1d\xfe\x01\xc1\x52\xac\x1a\x9e\xe4\x6b\xa2\x9e\xe2\xe8\xb2\x93\xdd\x2d\x87\xf8\xf7\xed\x12\x26\x83\xdd\x27\x09\xcb\x0e\x5f\xb7\x95\x29\x1c\xe7\x05\x48\xb2\x71\xf6\xf2\x85\x6f\x2d\x8f\x5b\xb1\xf9\xfb\xf1\xf2\xf6\x2d\x76\xc2\x71\xe9\x40\x8b\x6a\x83\x9e\xc0\x31\x4f\xc7\x2b\x8c\xdd\x66\x23\x3b\x60\xb0\x84\x4f\x9d\xa4\xf0\xf5\x7b\x2a\x52\x9d\x99\xf6\xc6\xa9\x4e\x45\xdb\x2e\xd5\xa9\xc5\xdf\xdb\x14\x7e\x4f\x19\x53\x0d\xd8\xad\xa6\xf0\x2b\x17\xd5\x9e\x65\x65\x73\x93\x60\x7c\xb7\x66\x6a\xb4\x81\xf8\x9b\x36\xe7\x4d\x95\x45\x4b\x83\xcb\xd1\xc7\x31\x1e\x7d\x3e\x1f\xfd\x79\x32\xfa\x65\x76\xaf\xe5\x87\x1c\xf6\x59\x49\xbf\xb1\x6e\x14\xbc\xd9\x79\x6d\x3e\x57\xed\x80\x59\xb6\xfc\xb9\x03\x76\xd9\x13\xc3\x0e\xd8\x65\x0f\x6a\xba\x60\x97\x31\x86\x75\x82\xc8\xf6\x66\xd9\x2c\xc1\xb1\x99\x66\xb3\x4f\x99\x19\xde\xa8\xba\x63\xeb\x5d\xd4\xcb\x1a\xdf\x39\xd6\xfb\x08\xa1\x06\xa3\xaa\x83\xe9\x46\x8c\xaa\x22\x23\xab\x85\xe0\xce\xd2\xee\xf1\x9c\x65\x85\x47\xc3\x72\x67\xe3\x60\xcf\x43\x4b\x86\xc3\x55\x6a\x3d\x9e\x22\x0e\x80\x92\xd0\x00\x82\xf1\x35\xb9\x22\x21\xb8\x44\xdf\xe9\x21\x7f\x9b\x3c\xc3\x9e\xf7\x51\x91\xed\x88\xbe\x43\x03\x81\x49\x00\x4c\x72\x6c\x8d\x7c\xb8\x0b\xb5\xb4\xaf\x9e\x07\xde\x2e\x3c\x38\x30\x82\x4d\x0e\xd6\xb9\xca\x0b\x6c\x9b\xb5\x7c\x8f\xd6\x67\x6b\x29\x9b\x26\xa1\x87\xe3\x9b\xe5\xcf\x36\xdd\x79\x46\x7d\x1f\x07\x2e\x62\x51\x20\xf7\xc1\x18\xa5\xef\x7a\x8a\xe8\x1a\x18\x23\x2e\x70\x84\x83\x1b\xc4\x41\x20\x2c\x54\x44\xa0\x53\xce\x1e\xac\xc1\x92\x4a\x2d\x8f\xa3\x51\x79\x2c\x5d\x31\x1f\x55\x1f\x2f\xe7\x67\xa7\x30\xdb\x5a\x60\xc2\xac\x81\x46\x45\xd9\xac\x0d\xa8\xe4\xba\x10\x02\x1c\x91\x40\xc1\xb0\x99\x96\x02\xf1\xb6\x4a\xe2\xb8\xdb\x87\xe1\xa5\xf6\xcd\xb3\xd3\xa3\x33\xe9\xa9\xa7\xd3\x49\xc6\x59\x1f\x5a\xa9\x4a\xbd\x76\xf2\xcf\x46\x62\x13\x69\x78\x4d\x3c\x0f\xcd\x01\xcd\x69\x14\xb8\x48\x50\xc4\xb1\x9f\xde\x71\x90\x7c\xe2\x5e\xcc\x7d\x14\x20\x54\xe5\x80\xd6\x4e\x5f\xec\xb4\x75\x47\xe8\x12\x86\x18\x2c\xf4\x07\xf7\xb9\x51\x6d\x1f\x94\xbd\x9e\x33\x1e\x96\xe5\xe9\xac\xf0\xcc\xec\x55\x10\xa6\x5e\x74\x69\x21\x1d\x40\xb0\x7e\x8f\x3b\xd1\xcb\xe7\xc1\x9a\x30\x1a\xf8\x10\x08\xb4\xc6\x8c\xe0\xb9\xd7\xa9\x86\x5e\x7e\xf8\xf5\x16\x14\x91\x04\x88\x3b\x34\x54\xe7\x5a\xe8\x7a\xa2\x15\x33\xc0\xfe\xad\x6a\xa3\xd6\xa8\x38\xca\x48\xf4\x32\xde\x1d\xa9\xdb\x44\xca\xc7\xd6\xd6\xb4\xc5\xe3\xbe\x6d\x75\x95\xc1\x79\x17\xca\xfa\x3b\xe9\x56\x39\xef\xcc\x67\xe5\x08\xe5\xb4\x4d\xac\x5a\xfb\x7d\x59\x53\x15\x8f\xb4\x51\xcf\x8a\xf8\x09\xe9\x1d\xbe\x99\xaf\x4c\x9b\x0a\x17\x17\x24\xe7\xef\x82\xa6\x17\xc5\x58\x61\xdd\xc1\x16\x58\xd4\xc1\x7a\x15\x4e\x8d\xd7\x6d\xc8\x5a\x4c\x94\x35\xf1\x91\x03\xcd\x78\x3a\xeb\x6e\xae\x2d\x77\xe9\x20\xcb\x7c\xa8\xcb\x01\x73\x56\x06\x39\x38\x90\xab\x35\x2d\x57\x50\x07\x3f\xea\xfe\x26\x2a\x56\x7a\x1f\xaa\x7b\xf2\xdd\x6e\x6c\x0a\x29\xb3\xa7\xb6\xcc\x1d\xb0\xec\x17\x1b\x8f\xf4\x1a\xa9\xcd\x70\x05\x55\x0f\x56\x94\x57\x64\xdc\x4a\x15\xbb\x9e\x01\xbd\x54\x76\x72\x38\xd2\xff\x1f\x9d\x0d\x85\x13\xfe\x37\x72\xc3\xa3\xb3\x9a\x6a\xff\x77\xca\x05\x92\x02\x0f\xf9\x91\x1c\xf1\x9c\x28\x4b\x68\x57\xfc\x2d\x47\x66\x28\x9f\x0a\x2f\x0c\xae\x8d\xa6\xb6\x56\x33\x9d\xa3\x69\xe5\xf3\xea\x62\x7f\x5a\x9e\x96\x4b\x3b\x15\x76\x6b\x89\x76\xc4\x65\xac\xd8\x75\x19\x70\x8e\x7c\x1c\x86\xa0\x7c\x10\x4e\x9a\x6c\x45\x44\xa8\x8e\x49\xef\x13\x55\xe1\x3e\x67\xe6\x2e\xb6\x4b\x50\x3f\x8c\xcb\xbd\x7e\x39\x96\xc2\x05\xc6\x50\xc8\x60\x41\x3e\xe5\xa1\xd4\xc1\xdd\x9e\x42\xf9\x3a\xaa\x53\xd0\xff\xb5\xa1\xa4\x91\xf8\xc6\xa0\xbc\xa6\xec\xea\xb7\xc2\xbd\x9d\x36\x41\xff\x45\xd9\x95\x94\xc2\xcd\xdc\x1d\x2a\x56\x68\x98\xcf\x94\x64\xea\x0a\x54\x18\xb0\xbd\x7a\xe0\xa0\x4c\xd2\xfc\x61\x46\xa9\xdf\x8d\x23\xa0\xcc\xb3\x59\x17\xa7\x20\xf6\x03\x8e\x4d\xdc\x7e\x60\xbc\xab\xc1\x37\x3a\x61\x69\xce\x2c\x6e\x6a\x9d\x2c\xa3\xa1\x99\x25\xab\xfa\x40\xba\x2a\x83\x16\x5e\x99\x67\x7d\xdb\xd8\x6d\x63\x89\x76\x09\x2a\x91\x1c\x4f\x6b\xc7\xba\x39\xa6\x8d\x18\x19\xa5\x41\xd0\x5d\x90\x69\x79\x7b\xf1\x16\xe7\xb4\xc5\x3c\x22\x95\xa2\x62\x8f\x7c\x06\x8e\x5e\xbc\x7a\xf3\xee\xed\xc7\x57\xe7\x2f\x9f\xeb\x70\xee\xfd\xf9\x1f\xef\x9e\xcb\x4d\x56\x5c\xac\xfd\xf3\xa6\xc3\xa9\x6e\xfc\x79\x8c\x5e\x2c\x92\x7e\x1c\xc9\x7d\xe0\x31\x22\x02\xbd\x7c\x77\xf1\x56\x5d\x7b\xc6\x79\xe4\x83\x1b\xf7\xf8\x15\x1d\x0e\x37\x2c\x2a\x8c\xca\xae\x81\x49\xe5\x89\x61\xda\xad\xe5\x26\xba\xfb\x4d\xef\x8e\xb9\x95\x86\x6f\xab\xba\x4a\x68\x57\x9e\xb6\x4f\xf0\x52\x9e\xb7\xbd\xc9\x2e\x5e\x4f\x9e\x36\x55\x2c\x8a\xcd\x72\x78\xfd\xee\x6d\xba\x3e\x32\x8b\x42\x2f\x87\x4c\xa3\x5e\x14\xb9\xde\x15\x4b\x43\x75\x90\x2b\x23\x43\x70\xb7\x34\x4c\x8e\xfb\x95\xbd\x29\x8d\x6f\x6a\x16\x23\x54\x7b\x06\xe9\x25\x4d\xcf\x50\xa5\xd8\x0d\xd9\x6f\xff\x14\xe1\xeb\x44\x61\x34\xdc\x21\xfc\xca\x9d\x93\xda\x82\xb0\x5c\x87\xd6\xa1\x58\xc2\xa5\x2c\x20\xdb\xb9\xd4\xce\x29\xfb\xd0\xaa\x26\x88\xe9\x00\xdb\x43\x99\x39\x2e\xb6\x9e\xdb\x6f\x9a\x5b\xc3\xa8\x79\xec\x2d\x88\xf1\xf0\xda\x43\x68\x71\xd5\x36\x28\x2d\xdd\xb6\xd4\xf8\xf1\x28\x0c\x29\x13\xf2\xc7\xc3\xa1\xf2\x0c\x88\x47\x73\x2e\x88\x50\x9f\x32\x21\x7e\x13\x08\xfc\x09\x5d\xaf\x80\x41\xda\x23\xc9\xea\x33\x08\x3d\x1c\x67\x09\xc5\x0a\xf4\x09\x0f\xa2\x0b\xed\x72\xb0\x40\x2c\x0a\x72\x9f\xb9\x55\xfe\x5d\x90\xf8\xef\x62\xd8\x55\x44\x35\x95\xc9\xb2\x7e\x30\x3e\x19\x9f\x14\x0b\xd8\x87\x49\x69\x47\xbe\x54\x9d\x87\xe0\x4c\x34\xcd\x78\x25\x7c\xef\xa8\x74\x7c\x66\x05\x99\x6c\xfa\x30\x8c\xb3\x6d\xd3\xe9\xd8\xf2\xe3\xf0\xec\x74\x38\x9d\xaa\x8c\xdc\xf9\xe8\x4f\x3c\xfa\x3c\x9a\xdd\x1b\x9e\x9d\x4e\xa7\xe3\xdc\xa3\xa3\xff\x3b\x3a\x3a\x53\xcf\xef\x65\x9e\x4f\xa7\xa3\xe9\x74\x3c\xbb\x77\x74\x76\x98\xf9\xfb\x20\x07\x5f\x0e\x0e\xfe\x17\x00\x00\xff\xff\xbb\xd9\xd7\x7f\x83\x66\x00\x00")

func githubComOpspecIoSpecSpecPkgManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_githubComOpspecIoSpecSpecPkgManifestSchemaJson,
		"github.com/opspec-io/spec/spec/pkg-manifest.schema.json",
	)
}

func githubComOpspecIoSpecSpecPkgManifestSchemaJson() (*asset, error) {
	bytes, err := githubComOpspecIoSpecSpecPkgManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "github.com/opspec-io/spec/spec/pkg-manifest.schema.json", size: 26243, mode: os.FileMode(420), modTime: time.Unix(1506142428, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github.com/opspec-io/spec/spec/pkg-manifest.schema.json": githubComOpspecIoSpecSpecPkgManifestSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"github.com": &bintree{nil, map[string]*bintree{
		"opspec-io": &bintree{nil, map[string]*bintree{
			"spec": &bintree{nil, map[string]*bintree{
				"spec": &bintree{nil, map[string]*bintree{
					"pkg-manifest.schema.json": &bintree{githubComOpspecIoSpecSpecPkgManifestSchemaJson, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
