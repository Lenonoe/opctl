// This file was generated by counterfeiter
package sdk

import (
  "sync"
)

type fakeCompositionRoot struct {
  CreateOpUseCaseStub                     func() createOpUseCase
  createOpUseCaseMutex                    sync.RWMutex
  createOpUseCaseArgsForCall              []struct{}
  createOpUseCaseReturns                  struct {
                                         result1 createOpUseCase
                                       }
  SetDescriptionOfOpUseCaseStub        func() setDescriptionOfOpUseCase
  setDescriptionOfOpUseCaseMutex       sync.RWMutex
  setDescriptionOfOpUseCaseArgsForCall []struct{}
  setDescriptionOfOpUseCaseReturns     struct {
                                         result1 setDescriptionOfOpUseCase
                                       }
  invocations                          map[string][][]interface{}
  invocationsMutex                     sync.RWMutex
}

func (fake *fakeCompositionRoot) CreateOpUseCase() createOpUseCase {
  fake.createOpUseCaseMutex.Lock()
  fake.createOpUseCaseArgsForCall = append(fake.createOpUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("CreateOpUseCase", []interface{}{})
  fake.createOpUseCaseMutex.Unlock()
  if fake.CreateOpUseCaseStub != nil {
    return fake.CreateOpUseCaseStub()
  } else {
    return fake.createOpUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) CreateOpUseCaseCallCount() int {
  fake.createOpUseCaseMutex.RLock()
  defer fake.createOpUseCaseMutex.RUnlock()
  return len(fake.createOpUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) CreateOpUseCaseReturns(result1 createOpUseCase) {
  fake.CreateOpUseCaseStub = nil
  fake.createOpUseCaseReturns = struct {
    result1 createOpUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) SetDescriptionOfOpUseCase() setDescriptionOfOpUseCase {
  fake.setDescriptionOfOpUseCaseMutex.Lock()
  fake.setDescriptionOfOpUseCaseArgsForCall = append(fake.setDescriptionOfOpUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("SetDescriptionOfOpUseCase", []interface{}{})
  fake.setDescriptionOfOpUseCaseMutex.Unlock()
  if fake.SetDescriptionOfOpUseCaseStub != nil {
    return fake.SetDescriptionOfOpUseCaseStub()
  } else {
    return fake.setDescriptionOfOpUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) SetDescriptionOfOpUseCaseCallCount() int {
  fake.setDescriptionOfOpUseCaseMutex.RLock()
  defer fake.setDescriptionOfOpUseCaseMutex.RUnlock()
  return len(fake.setDescriptionOfOpUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) SetDescriptionOfOpUseCaseReturns(result1 setDescriptionOfOpUseCase) {
  fake.SetDescriptionOfOpUseCaseStub = nil
  fake.setDescriptionOfOpUseCaseReturns = struct {
    result1 setDescriptionOfOpUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.createOpUseCaseMutex.RLock()
  defer fake.createOpUseCaseMutex.RUnlock()
  fake.setDescriptionOfOpUseCaseMutex.RLock()
  defer fake.setDescriptionOfOpUseCaseMutex.RUnlock()
  return fake.invocations
}

func (fake *fakeCompositionRoot) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
