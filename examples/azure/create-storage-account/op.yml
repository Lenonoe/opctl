name: create-storage-account
description: creates a storage account if it doesn't already exist
inputs:
  subscriptionId:
    string:
      constraints: { minLength: 1}
  username:
    string:
      constraints: { format: email }
  location:
    string:
      constraints: { enum: [ westus, centralus, eastus ] }
      default: westus
  password:
    string:
      constraints: { minLength: 1 }
      isSecret: true
  resourceGroupName:
    string:
      constraints: { minLength: 1 }
  storageAccountName:
    string:
      constraints: { minLength: 4, maxLength: 23, pattern: '^[a-z0-9]*$' }
  storageAccountKind:
    string:
      constraints: { enum: [ Storage, Blob ] }
      default: Storage
  storageAccountSkuName:
    string:
      constraints: { enum: [ LRS, ZRS, GRS, RAGRS, PLRS ] }
      default: RAGRS
outputs:
  storageAccessKey:
    string:
      constraints: { minLength: 1 }
      isSecret: true
run:
  serial:
    - op: 
        ref: create-resource-group
        inputs: { subscriptionId, username, password, location, resourceGroupName }
    - container:
        image: microsoft/azure-cli
        cmd:
          - sh
          - -c
          - |
            echo "logging in to azure"
            azure login -u "$(username)" -p "$(password)"

            echo "setting default subscription"
            azure account set "$(subscriptionId)"

            echo "switching to ARM (azure resource manager) mode"
            azure config mode arm

            echo "checking for existing storage account"
            if azure storage account show --resource-group "$(resourceGroupName)" "$(storageAccountName)" 1> /dev/null
            then
              echo "found existing storage account"
            else
              echo "creating storage account"
              azure storage account create \
                --kind "$(storageAccountKind)" \
                --location "$(location)" \
                --resource-group "$(resourceGroupName)" \
                --sku-name "$(storageAccountSkuName)" \
                "$(storageAccountName)"
            fi

            echo "fetching storage access keys"
            storageAccessKeys=$(azure storage account keys list \
              --resource-group "$(resourceGroupName)" --json "$(storageAccountName)")

            echo "storageAccessKey=$(echo $storageAccessKeys | jq -r '.[0].value')"
        stdOut:
          storageAccessKey=: { bind: storageAccessKey }

