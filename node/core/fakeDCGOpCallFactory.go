// Code generated by counterfeiter. DO NOT EDIT.
package core

import (
	"sync"

	"github.com/opspec-io/sdk-golang/model"
)

type fakeDCGOpCallFactory struct {
	ConstructStub        func(currentScope map[string]*model.Data, scgOpCall *model.SCGOpCall, opId string, rootOpId string, pkgRef string) (*model.DCGOpCall, error)
	constructMutex       sync.RWMutex
	constructArgsForCall []struct {
		currentScope map[string]*model.Data
		scgOpCall    *model.SCGOpCall
		opId         string
		rootOpId     string
		pkgRef       string
	}
	constructReturns struct {
		result1 *model.DCGOpCall
		result2 error
	}
	constructReturnsOnCall map[int]struct {
		result1 *model.DCGOpCall
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeDCGOpCallFactory) Construct(currentScope map[string]*model.Data, scgOpCall *model.SCGOpCall, opId string, rootOpId string, pkgRef string) (*model.DCGOpCall, error) {
	fake.constructMutex.Lock()
	ret, specificReturn := fake.constructReturnsOnCall[len(fake.constructArgsForCall)]
	fake.constructArgsForCall = append(fake.constructArgsForCall, struct {
		currentScope map[string]*model.Data
		scgOpCall    *model.SCGOpCall
		opId         string
		rootOpId     string
		pkgRef       string
	}{currentScope, scgOpCall, opId, rootOpId, pkgRef})
	fake.recordInvocation("Construct", []interface{}{currentScope, scgOpCall, opId, rootOpId, pkgRef})
	fake.constructMutex.Unlock()
	if fake.ConstructStub != nil {
		return fake.ConstructStub(currentScope, scgOpCall, opId, rootOpId, pkgRef)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.constructReturns.result1, fake.constructReturns.result2
}

func (fake *fakeDCGOpCallFactory) ConstructCallCount() int {
	fake.constructMutex.RLock()
	defer fake.constructMutex.RUnlock()
	return len(fake.constructArgsForCall)
}

func (fake *fakeDCGOpCallFactory) ConstructArgsForCall(i int) (map[string]*model.Data, *model.SCGOpCall, string, string, string) {
	fake.constructMutex.RLock()
	defer fake.constructMutex.RUnlock()
	return fake.constructArgsForCall[i].currentScope, fake.constructArgsForCall[i].scgOpCall, fake.constructArgsForCall[i].opId, fake.constructArgsForCall[i].rootOpId, fake.constructArgsForCall[i].pkgRef
}

func (fake *fakeDCGOpCallFactory) ConstructReturns(result1 *model.DCGOpCall, result2 error) {
	fake.ConstructStub = nil
	fake.constructReturns = struct {
		result1 *model.DCGOpCall
		result2 error
	}{result1, result2}
}

func (fake *fakeDCGOpCallFactory) ConstructReturnsOnCall(i int, result1 *model.DCGOpCall, result2 error) {
	fake.ConstructStub = nil
	if fake.constructReturnsOnCall == nil {
		fake.constructReturnsOnCall = make(map[int]struct {
			result1 *model.DCGOpCall
			result2 error
		})
	}
	fake.constructReturnsOnCall[i] = struct {
		result1 *model.DCGOpCall
		result2 error
	}{result1, result2}
}

func (fake *fakeDCGOpCallFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.constructMutex.RLock()
	defer fake.constructMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeDCGOpCallFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
