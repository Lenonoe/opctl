// This file was generated by counterfeiter
package adapters

import (
  "sync"
)

type FakeEngineHost struct {
  EnsureEngineRunningStub        func(image string) (err error)
  ensureEngineRunningMutex       sync.RWMutex
  ensureEngineRunningArgsForCall []struct {
    image string
  }
  ensureEngineRunningReturns     struct {
                                   result1 error
                                 }
  GetEngineBaseUrlStub           func() (baseUrl string, err error)
  getEngineBaseUrlMutex          sync.RWMutex
  getEngineBaseUrlArgsForCall    []struct{}
  getEngineBaseUrlReturns        struct {
                                   result1 string
                                   result2 error
                                 }
  invocations                    map[string][][]interface{}
  invocationsMutex               sync.RWMutex
}

func (fake *FakeEngineHost) EnsureEngineRunning(image string) (err error) {
  fake.ensureEngineRunningMutex.Lock()
  fake.ensureEngineRunningArgsForCall = append(fake.ensureEngineRunningArgsForCall, struct {
    image string
  }{image})
  fake.recordInvocation("EnsureEngineRunning", []interface{}{image})
  fake.ensureEngineRunningMutex.Unlock()
  if fake.EnsureEngineRunningStub != nil {
    return fake.EnsureEngineRunningStub(image)
  } else {
    return fake.ensureEngineRunningReturns.result1
  }
}

func (fake *FakeEngineHost) EnsureEngineRunningCallCount() int {
  fake.ensureEngineRunningMutex.RLock()
  defer fake.ensureEngineRunningMutex.RUnlock()
  return len(fake.ensureEngineRunningArgsForCall)
}

func (fake *FakeEngineHost) EnsureEngineRunningArgsForCall(i int) string {
  fake.ensureEngineRunningMutex.RLock()
  defer fake.ensureEngineRunningMutex.RUnlock()
  return fake.ensureEngineRunningArgsForCall[i].image
}

func (fake *FakeEngineHost) EnsureEngineRunningReturns(result1 error) {
  fake.EnsureEngineRunningStub = nil
  fake.ensureEngineRunningReturns = struct {
    result1 error
  }{result1}
}

func (fake *FakeEngineHost) GetEngineBaseUrl() (baseUrl string, err error) {
  fake.getEngineBaseUrlMutex.Lock()
  fake.getEngineBaseUrlArgsForCall = append(fake.getEngineBaseUrlArgsForCall, struct{}{})
  fake.recordInvocation("GetEngineBaseUrl", []interface{}{})
  fake.getEngineBaseUrlMutex.Unlock()
  if fake.GetEngineBaseUrlStub != nil {
    return fake.GetEngineBaseUrlStub()
  } else {
    return fake.getEngineBaseUrlReturns.result1, fake.getEngineBaseUrlReturns.result2
  }
}

func (fake *FakeEngineHost) GetEngineBaseUrlCallCount() int {
  fake.getEngineBaseUrlMutex.RLock()
  defer fake.getEngineBaseUrlMutex.RUnlock()
  return len(fake.getEngineBaseUrlArgsForCall)
}

func (fake *FakeEngineHost) GetEngineBaseUrlReturns(result1 string, result2 error) {
  fake.GetEngineBaseUrlStub = nil
  fake.getEngineBaseUrlReturns = struct {
    result1 string
    result2 error
  }{result1, result2}
}

func (fake *FakeEngineHost) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.ensureEngineRunningMutex.RLock()
  defer fake.ensureEngineRunningMutex.RUnlock()
  fake.getEngineBaseUrlMutex.RLock()
  defer fake.getEngineBaseUrlMutex.RUnlock()
  return fake.invocations
}

func (fake *FakeEngineHost) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}

var _ EngineHost = new(FakeEngineHost)
