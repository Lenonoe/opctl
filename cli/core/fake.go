// This file was generated by counterfeiter
package core

import (
	"sync"
)

type Fake struct {
	CreateStub        func(path string, description string, name string)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		path        string
		description string
		name        string
	}
	OpKillStub        func(opId string)
	opKillMutex       sync.RWMutex
	opKillArgsForCall []struct {
		opId string
	}
	ListPackagesStub        func(path string)
	listPackagesMutex       sync.RWMutex
	listPackagesArgsForCall []struct {
		path string
	}
	NodeCreateStub        func()
	nodeCreateMutex       sync.RWMutex
	nodeCreateArgsForCall []struct{}
	NodeKillStub          func()
	nodeKillMutex         sync.RWMutex
	nodeKillArgsForCall   []struct{}
	RunStub               func(args []string, pkgRef string)
	runMutex              sync.RWMutex
	runArgsForCall        []struct {
		args   []string
		pkgRef string
	}
	PkgValidateStub        func(pkgRef string)
	pkgValidateMutex       sync.RWMutex
	pkgValidateArgsForCall []struct {
		pkgRef string
	}
	StreamEventsStub        func()
	streamEventsMutex       sync.RWMutex
	streamEventsArgsForCall []struct{}
	SelfUpdateStub          func(channel string)
	selfUpdateMutex         sync.RWMutex
	selfUpdateArgsForCall   []struct {
		channel string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Create(path string, description string, name string) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		path        string
		description string
		name        string
	}{path, description, name})
	fake.recordInvocation("Create", []interface{}{path, description, name})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		fake.CreateStub(path, description, name)
	}
}

func (fake *Fake) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *Fake) CreateArgsForCall(i int) (string, string, string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].path, fake.createArgsForCall[i].description, fake.createArgsForCall[i].name
}

func (fake *Fake) OpKill(opId string) {
	fake.opKillMutex.Lock()
	fake.opKillArgsForCall = append(fake.opKillArgsForCall, struct {
		opId string
	}{opId})
	fake.recordInvocation("OpKill", []interface{}{opId})
	fake.opKillMutex.Unlock()
	if fake.OpKillStub != nil {
		fake.OpKillStub(opId)
	}
}

func (fake *Fake) OpKillCallCount() int {
	fake.opKillMutex.RLock()
	defer fake.opKillMutex.RUnlock()
	return len(fake.opKillArgsForCall)
}

func (fake *Fake) OpKillArgsForCall(i int) string {
	fake.opKillMutex.RLock()
	defer fake.opKillMutex.RUnlock()
	return fake.opKillArgsForCall[i].opId
}

func (fake *Fake) ListPackages(path string) {
	fake.listPackagesMutex.Lock()
	fake.listPackagesArgsForCall = append(fake.listPackagesArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("ListPackages", []interface{}{path})
	fake.listPackagesMutex.Unlock()
	if fake.ListPackagesStub != nil {
		fake.ListPackagesStub(path)
	}
}

func (fake *Fake) ListPackagesCallCount() int {
	fake.listPackagesMutex.RLock()
	defer fake.listPackagesMutex.RUnlock()
	return len(fake.listPackagesArgsForCall)
}

func (fake *Fake) ListPackagesArgsForCall(i int) string {
	fake.listPackagesMutex.RLock()
	defer fake.listPackagesMutex.RUnlock()
	return fake.listPackagesArgsForCall[i].path
}

func (fake *Fake) NodeCreate() {
	fake.nodeCreateMutex.Lock()
	fake.nodeCreateArgsForCall = append(fake.nodeCreateArgsForCall, struct{}{})
	fake.recordInvocation("NodeCreate", []interface{}{})
	fake.nodeCreateMutex.Unlock()
	if fake.NodeCreateStub != nil {
		fake.NodeCreateStub()
	}
}

func (fake *Fake) NodeCreateCallCount() int {
	fake.nodeCreateMutex.RLock()
	defer fake.nodeCreateMutex.RUnlock()
	return len(fake.nodeCreateArgsForCall)
}

func (fake *Fake) NodeKill() {
	fake.nodeKillMutex.Lock()
	fake.nodeKillArgsForCall = append(fake.nodeKillArgsForCall, struct{}{})
	fake.recordInvocation("NodeKill", []interface{}{})
	fake.nodeKillMutex.Unlock()
	if fake.NodeKillStub != nil {
		fake.NodeKillStub()
	}
}

func (fake *Fake) NodeKillCallCount() int {
	fake.nodeKillMutex.RLock()
	defer fake.nodeKillMutex.RUnlock()
	return len(fake.nodeKillArgsForCall)
}

func (fake *Fake) Run(args []string, pkgRef string) {
	var argsCopy []string
	if args != nil {
		argsCopy = make([]string, len(args))
		copy(argsCopy, args)
	}
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		args   []string
		pkgRef string
	}{argsCopy, pkgRef})
	fake.recordInvocation("Run", []interface{}{argsCopy, pkgRef})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		fake.RunStub(args, pkgRef)
	}
}

func (fake *Fake) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *Fake) RunArgsForCall(i int) ([]string, string) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].args, fake.runArgsForCall[i].pkgRef
}

func (fake *Fake) PkgValidate(pkgRef string) {
	fake.pkgValidateMutex.Lock()
	fake.pkgValidateArgsForCall = append(fake.pkgValidateArgsForCall, struct {
		pkgRef string
	}{pkgRef})
	fake.recordInvocation("PkgValidate", []interface{}{pkgRef})
	fake.pkgValidateMutex.Unlock()
	if fake.PkgValidateStub != nil {
		fake.PkgValidateStub(pkgRef)
	}
}

func (fake *Fake) PkgValidateCallCount() int {
	fake.pkgValidateMutex.RLock()
	defer fake.pkgValidateMutex.RUnlock()
	return len(fake.pkgValidateArgsForCall)
}

func (fake *Fake) PkgValidateArgsForCall(i int) string {
	fake.pkgValidateMutex.RLock()
	defer fake.pkgValidateMutex.RUnlock()
	return fake.pkgValidateArgsForCall[i].pkgRef
}

func (fake *Fake) StreamEvents() {
	fake.streamEventsMutex.Lock()
	fake.streamEventsArgsForCall = append(fake.streamEventsArgsForCall, struct{}{})
	fake.recordInvocation("StreamEvents", []interface{}{})
	fake.streamEventsMutex.Unlock()
	if fake.StreamEventsStub != nil {
		fake.StreamEventsStub()
	}
}

func (fake *Fake) StreamEventsCallCount() int {
	fake.streamEventsMutex.RLock()
	defer fake.streamEventsMutex.RUnlock()
	return len(fake.streamEventsArgsForCall)
}

func (fake *Fake) SelfUpdate(channel string) {
	fake.selfUpdateMutex.Lock()
	fake.selfUpdateArgsForCall = append(fake.selfUpdateArgsForCall, struct {
		channel string
	}{channel})
	fake.recordInvocation("SelfUpdate", []interface{}{channel})
	fake.selfUpdateMutex.Unlock()
	if fake.SelfUpdateStub != nil {
		fake.SelfUpdateStub(channel)
	}
}

func (fake *Fake) SelfUpdateCallCount() int {
	fake.selfUpdateMutex.RLock()
	defer fake.selfUpdateMutex.RUnlock()
	return len(fake.selfUpdateArgsForCall)
}

func (fake *Fake) SelfUpdateArgsForCall(i int) string {
	fake.selfUpdateMutex.RLock()
	defer fake.selfUpdateMutex.RUnlock()
	return fake.selfUpdateArgsForCall[i].channel
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.opKillMutex.RLock()
	defer fake.opKillMutex.RUnlock()
	fake.listPackagesMutex.RLock()
	defer fake.listPackagesMutex.RUnlock()
	fake.nodeCreateMutex.RLock()
	defer fake.nodeCreateMutex.RUnlock()
	fake.nodeKillMutex.RLock()
	defer fake.nodeKillMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.pkgValidateMutex.RLock()
	defer fake.pkgValidateMutex.RUnlock()
	fake.streamEventsMutex.RLock()
	defer fake.streamEventsMutex.RUnlock()
	fake.selfUpdateMutex.RLock()
	defer fake.selfUpdateMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Core = new(Fake)
