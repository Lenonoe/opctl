// This file was generated by counterfeiter
package docker

import (
  "sync"

  "github.com/opspec-io/engine/core"
)

type fakeStartContainerUseCase struct {
  ExecuteStub        func(opRunArgs map[string]string, opBundlePath string, opName string, opRunId string, eventPublisher core.EventPublisher, rootOpRunId string) (err error)
  executeMutex       sync.RWMutex
  executeArgsForCall []struct {
    opRunArgs      map[string]string
    opBundlePath   string
    opName         string
    opRunId        string
    eventPublisher core.EventPublisher
    rootOpRunId    string
  }
  executeReturns     struct {
                       result1 error
                     }
  invocations        map[string][][]interface{}
  invocationsMutex   sync.RWMutex
}

func (fake *fakeStartContainerUseCase) Execute(opRunArgs map[string]string, opBundlePath string, opName string, opRunId string, eventPublisher core.EventPublisher, rootOpRunId string) (err error) {
  fake.executeMutex.Lock()
  fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
    opRunArgs      map[string]string
    opBundlePath   string
    opName         string
    opRunId        string
    eventPublisher core.EventPublisher
    rootOpRunId    string
  }{opRunArgs, opBundlePath, opName, opRunId, eventPublisher, rootOpRunId})
  fake.recordInvocation("Execute", []interface{}{opRunArgs, opBundlePath, opName, opRunId, eventPublisher, rootOpRunId})
  fake.executeMutex.Unlock()
  if fake.ExecuteStub != nil {
    return fake.ExecuteStub(opRunArgs, opBundlePath, opName, opRunId, eventPublisher, rootOpRunId)
  } else {
    return fake.executeReturns.result1
  }
}

func (fake *fakeStartContainerUseCase) ExecuteCallCount() int {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return len(fake.executeArgsForCall)
}

func (fake *fakeStartContainerUseCase) ExecuteArgsForCall(i int) (map[string]string, string, string, string, core.EventPublisher, string) {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return fake.executeArgsForCall[i].opRunArgs, fake.executeArgsForCall[i].opBundlePath, fake.executeArgsForCall[i].opName, fake.executeArgsForCall[i].opRunId, fake.executeArgsForCall[i].eventPublisher, fake.executeArgsForCall[i].rootOpRunId
}

func (fake *fakeStartContainerUseCase) ExecuteReturns(result1 error) {
  fake.ExecuteStub = nil
  fake.executeReturns = struct {
    result1 error
  }{result1}
}

func (fake *fakeStartContainerUseCase) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return fake.invocations
}

func (fake *fakeStartContainerUseCase) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
