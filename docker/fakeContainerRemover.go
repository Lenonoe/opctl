// This file was generated by counterfeiter
package docker

import "sync"

type fakeContainerRemover struct {
  EnsureContainerRemovedStub        func(opBundlePath string, opRunId string)
  ensureContainerRemovedMutex       sync.RWMutex
  ensureContainerRemovedArgsForCall []struct {
    opBundlePath string
    opRunId      string
  }
  invocations                       map[string][][]interface{}
  invocationsMutex                  sync.RWMutex
}

func (fake *fakeContainerRemover) EnsureContainerRemoved(opBundlePath string, opRunId string) {
  fake.ensureContainerRemovedMutex.Lock()
  fake.ensureContainerRemovedArgsForCall = append(fake.ensureContainerRemovedArgsForCall, struct {
    opBundlePath string
    opRunId      string
  }{opBundlePath, opRunId})
  fake.recordInvocation("EnsureContainerRemoved", []interface{}{opBundlePath, opRunId})
  fake.ensureContainerRemovedMutex.Unlock()
  if fake.EnsureContainerRemovedStub != nil {
    fake.EnsureContainerRemovedStub(opBundlePath, opRunId)
  }
}

func (fake *fakeContainerRemover) EnsureContainerRemovedCallCount() int {
  fake.ensureContainerRemovedMutex.RLock()
  defer fake.ensureContainerRemovedMutex.RUnlock()
  return len(fake.ensureContainerRemovedArgsForCall)
}

func (fake *fakeContainerRemover) EnsureContainerRemovedArgsForCall(i int) (string, string) {
  fake.ensureContainerRemovedMutex.RLock()
  defer fake.ensureContainerRemovedMutex.RUnlock()
  return fake.ensureContainerRemovedArgsForCall[i].opBundlePath, fake.ensureContainerRemovedArgsForCall[i].opRunId
}

func (fake *fakeContainerRemover) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.ensureContainerRemovedMutex.RLock()
  defer fake.ensureContainerRemovedMutex.RUnlock()
  return fake.invocations
}

func (fake *fakeContainerRemover) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
