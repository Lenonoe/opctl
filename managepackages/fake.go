// This file was generated by counterfeiter
package managepackages

import (
	"sync"

	"github.com/opspec-io/sdk-golang/model"
)

type Fake struct {
	CreatePackageStub        func(req model.CreatePackageReq) (err error)
	createPackageMutex       sync.RWMutex
	createPackageArgsForCall []struct {
		req model.CreatePackageReq
	}
	createPackageReturns struct {
		result1 error
	}
	createPackageReturnsOnCall map[int]struct {
		result1 error
	}
	ListPackagesInDirStub        func(dirPath string) (ops []*model.PackageView, err error)
	listPackagesInDirMutex       sync.RWMutex
	listPackagesInDirArgsForCall []struct {
		dirPath string
	}
	listPackagesInDirReturns struct {
		result1 []*model.PackageView
		result2 error
	}
	listPackagesInDirReturnsOnCall map[int]struct {
		result1 []*model.PackageView
		result2 error
	}
	GetPackageStub        func(packageRef string) (packageView model.PackageView, err error)
	getPackageMutex       sync.RWMutex
	getPackageArgsForCall []struct {
		packageRef string
	}
	getPackageReturns struct {
		result1 model.PackageView
		result2 error
	}
	getPackageReturnsOnCall map[int]struct {
		result1 model.PackageView
		result2 error
	}
	SetPackageDescriptionStub        func(req model.SetPackageDescriptionReq) (err error)
	setPackageDescriptionMutex       sync.RWMutex
	setPackageDescriptionArgsForCall []struct {
		req model.SetPackageDescriptionReq
	}
	setPackageDescriptionReturns struct {
		result1 error
	}
	setPackageDescriptionReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) CreatePackage(req model.CreatePackageReq) (err error) {
	fake.createPackageMutex.Lock()
	ret, specificReturn := fake.createPackageReturnsOnCall[len(fake.createPackageArgsForCall)]
	fake.createPackageArgsForCall = append(fake.createPackageArgsForCall, struct {
		req model.CreatePackageReq
	}{req})
	fake.recordInvocation("CreatePackage", []interface{}{req})
	fake.createPackageMutex.Unlock()
	if fake.CreatePackageStub != nil {
		return fake.CreatePackageStub(req)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createPackageReturns.result1
}

func (fake *Fake) CreatePackageCallCount() int {
	fake.createPackageMutex.RLock()
	defer fake.createPackageMutex.RUnlock()
	return len(fake.createPackageArgsForCall)
}

func (fake *Fake) CreatePackageArgsForCall(i int) model.CreatePackageReq {
	fake.createPackageMutex.RLock()
	defer fake.createPackageMutex.RUnlock()
	return fake.createPackageArgsForCall[i].req
}

func (fake *Fake) CreatePackageReturns(result1 error) {
	fake.CreatePackageStub = nil
	fake.createPackageReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) CreatePackageReturnsOnCall(i int, result1 error) {
	fake.CreatePackageStub = nil
	if fake.createPackageReturnsOnCall == nil {
		fake.createPackageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createPackageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Fake) ListPackagesInDir(dirPath string) (ops []*model.PackageView, err error) {
	fake.listPackagesInDirMutex.Lock()
	ret, specificReturn := fake.listPackagesInDirReturnsOnCall[len(fake.listPackagesInDirArgsForCall)]
	fake.listPackagesInDirArgsForCall = append(fake.listPackagesInDirArgsForCall, struct {
		dirPath string
	}{dirPath})
	fake.recordInvocation("ListPackagesInDir", []interface{}{dirPath})
	fake.listPackagesInDirMutex.Unlock()
	if fake.ListPackagesInDirStub != nil {
		return fake.ListPackagesInDirStub(dirPath)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listPackagesInDirReturns.result1, fake.listPackagesInDirReturns.result2
}

func (fake *Fake) ListPackagesInDirCallCount() int {
	fake.listPackagesInDirMutex.RLock()
	defer fake.listPackagesInDirMutex.RUnlock()
	return len(fake.listPackagesInDirArgsForCall)
}

func (fake *Fake) ListPackagesInDirArgsForCall(i int) string {
	fake.listPackagesInDirMutex.RLock()
	defer fake.listPackagesInDirMutex.RUnlock()
	return fake.listPackagesInDirArgsForCall[i].dirPath
}

func (fake *Fake) ListPackagesInDirReturns(result1 []*model.PackageView, result2 error) {
	fake.ListPackagesInDirStub = nil
	fake.listPackagesInDirReturns = struct {
		result1 []*model.PackageView
		result2 error
	}{result1, result2}
}

func (fake *Fake) ListPackagesInDirReturnsOnCall(i int, result1 []*model.PackageView, result2 error) {
	fake.ListPackagesInDirStub = nil
	if fake.listPackagesInDirReturnsOnCall == nil {
		fake.listPackagesInDirReturnsOnCall = make(map[int]struct {
			result1 []*model.PackageView
			result2 error
		})
	}
	fake.listPackagesInDirReturnsOnCall[i] = struct {
		result1 []*model.PackageView
		result2 error
	}{result1, result2}
}

func (fake *Fake) GetPackage(packageRef string) (packageView model.PackageView, err error) {
	fake.getPackageMutex.Lock()
	ret, specificReturn := fake.getPackageReturnsOnCall[len(fake.getPackageArgsForCall)]
	fake.getPackageArgsForCall = append(fake.getPackageArgsForCall, struct {
		packageRef string
	}{packageRef})
	fake.recordInvocation("GetPackage", []interface{}{packageRef})
	fake.getPackageMutex.Unlock()
	if fake.GetPackageStub != nil {
		return fake.GetPackageStub(packageRef)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getPackageReturns.result1, fake.getPackageReturns.result2
}

func (fake *Fake) GetPackageCallCount() int {
	fake.getPackageMutex.RLock()
	defer fake.getPackageMutex.RUnlock()
	return len(fake.getPackageArgsForCall)
}

func (fake *Fake) GetPackageArgsForCall(i int) string {
	fake.getPackageMutex.RLock()
	defer fake.getPackageMutex.RUnlock()
	return fake.getPackageArgsForCall[i].packageRef
}

func (fake *Fake) GetPackageReturns(result1 model.PackageView, result2 error) {
	fake.GetPackageStub = nil
	fake.getPackageReturns = struct {
		result1 model.PackageView
		result2 error
	}{result1, result2}
}

func (fake *Fake) GetPackageReturnsOnCall(i int, result1 model.PackageView, result2 error) {
	fake.GetPackageStub = nil
	if fake.getPackageReturnsOnCall == nil {
		fake.getPackageReturnsOnCall = make(map[int]struct {
			result1 model.PackageView
			result2 error
		})
	}
	fake.getPackageReturnsOnCall[i] = struct {
		result1 model.PackageView
		result2 error
	}{result1, result2}
}

func (fake *Fake) SetPackageDescription(req model.SetPackageDescriptionReq) (err error) {
	fake.setPackageDescriptionMutex.Lock()
	ret, specificReturn := fake.setPackageDescriptionReturnsOnCall[len(fake.setPackageDescriptionArgsForCall)]
	fake.setPackageDescriptionArgsForCall = append(fake.setPackageDescriptionArgsForCall, struct {
		req model.SetPackageDescriptionReq
	}{req})
	fake.recordInvocation("SetPackageDescription", []interface{}{req})
	fake.setPackageDescriptionMutex.Unlock()
	if fake.SetPackageDescriptionStub != nil {
		return fake.SetPackageDescriptionStub(req)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setPackageDescriptionReturns.result1
}

func (fake *Fake) SetPackageDescriptionCallCount() int {
	fake.setPackageDescriptionMutex.RLock()
	defer fake.setPackageDescriptionMutex.RUnlock()
	return len(fake.setPackageDescriptionArgsForCall)
}

func (fake *Fake) SetPackageDescriptionArgsForCall(i int) model.SetPackageDescriptionReq {
	fake.setPackageDescriptionMutex.RLock()
	defer fake.setPackageDescriptionMutex.RUnlock()
	return fake.setPackageDescriptionArgsForCall[i].req
}

func (fake *Fake) SetPackageDescriptionReturns(result1 error) {
	fake.SetPackageDescriptionStub = nil
	fake.setPackageDescriptionReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) SetPackageDescriptionReturnsOnCall(i int, result1 error) {
	fake.SetPackageDescriptionStub = nil
	if fake.setPackageDescriptionReturnsOnCall == nil {
		fake.setPackageDescriptionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setPackageDescriptionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createPackageMutex.RLock()
	defer fake.createPackageMutex.RUnlock()
	fake.listPackagesInDirMutex.RLock()
	defer fake.listPackagesInDirMutex.RUnlock()
	fake.getPackageMutex.RLock()
	defer fake.getPackageMutex.RUnlock()
	fake.setPackageDescriptionMutex.RLock()
	defer fake.setPackageDescriptionMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ManagePackages = new(Fake)
